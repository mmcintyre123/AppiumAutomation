require('source-map-support').install();

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this = this;

var _libStreams = require('../lib/streams');

var _stream = require('stream');

var _stream2 = _interopRequireDefault(_stream);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('streams', function () {
  function runThroughStream(stream, text) {
    return _regeneratorRuntime.async(function runThroughStream$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          return context$2$0.abrupt('return', new _bluebird2['default'](function (resolve) {
            stream.on('data', function (data) {
              resolve(data);
            });
            stream.write(text);
          }));

        case 1:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  }

  describe('outputStream', function () {
    var stream = undefined;
    beforeEach(function () {
      stream = (0, _libStreams.outputStream)();
    });
    it('should return a stream', function () {
      stream.should.be.an['instanceof'](_stream2['default']);
    });
    it('should append [INST] to the output', function callee$2$0() {
      var text, output;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            text = 'Some output';
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(runThroughStream(stream, text));

          case 3:
            output = context$3$0.sent;

            output.should.include('[INST] Some output');

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should remove beginning * from output', function callee$2$0() {
      var text, output;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            text = '***Some output***';
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(runThroughStream(stream, text));

          case 3:
            output = context$3$0.sent;

            output.should.include('Some output***');

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should remove final newlines', function callee$2$0() {
      var text, output;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            text = 'Some output\n';
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(runThroughStream(stream, text));

          case 3:
            output = context$3$0.sent;

            output.should.not.include('\n');

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should indent internal newlines', function callee$2$0() {
      var text, output;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            text = 'Some output\non multiple lines';
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(runThroughStream(stream, text));

          case 3:
            output = context$3$0.sent;

            output.should.include('Some output\n       on multiple lines');

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  });
  describe('errorStream', function () {
    var stream = undefined;
    beforeEach(function () {
      stream = (0, _libStreams.errorStream)();
    });
    it('should return a stream', function () {
      stream.should.be.an['instanceof'](_stream2['default']);
    });
    it('should append [INST STDERR] to the output', function callee$2$0() {
      var text, output;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            text = 'Some output';
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(runThroughStream(stream, text));

          case 3:
            output = context$3$0.sent;

            output.should.include('[INST STDERR] Some output');

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should remove beginning * from output', function callee$2$0() {
      var text, output;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            text = '***Some output***';
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(runThroughStream(stream, text));

          case 3:
            output = context$3$0.sent;

            output.should.include('Some output***');

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should remove final newlines', function callee$2$0() {
      var text, output;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            text = 'Some output\n';
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(runThroughStream(stream, text));

          case 3:
            output = context$3$0.sent;

            output.should.not.include('\n');

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  });
  describe('webSocketAlertStream', function () {
    var webSocket = {
      sockets: {
        emit: function emit() {}
      }
    };
    var webSocketSpy = _sinon2['default'].spy(webSocket.sockets, 'emit');

    afterEach(function () {
      webSocketSpy.reset();
    });

    it('should return a stream', function () {
      (0, _libStreams.webSocketAlertStream)().should.be.an['instanceof'](_stream2['default']);
    });
    it('should queue data', function callee$2$0() {
      var text, output;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            text = 'Some output';
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(runThroughStream((0, _libStreams.webSocketAlertStream)(), text));

          case 3:
            output = context$3$0.sent;

            output.should.equal(text);

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should send data to websocket when appropriate', function callee$2$0() {
      var text;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            text = 'Call to onAlert returned \'YES\'\nSome output';
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(runThroughStream((0, _libStreams.webSocketAlertStream)(webSocket), text));

          case 3:

            webSocketSpy.calledWith('alert', { message: text });

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should not send data to websocket when inappropriate', function callee$2$0() {
      var text;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            text = 'Some output';
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(runThroughStream((0, _libStreams.webSocketAlertStream)(webSocket), text));

          case 3:

            webSocketSpy.called.should.be['false'];

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  });
  describe('dumpStream', function () {
    var stream = undefined;
    beforeEach(function () {
      stream = (0, _libStreams.dumpStream)();
    });
    it('should return a stream', function () {
      stream.should.be.an['instanceof'](_stream2['default']);
    });
  });
});
//# sourceMappingURL=data:application/json;base64,
require('source-map-support').install();

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Promise = require('babel-runtime/core-js/promise')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this = this;

var _ = require('..');

var _libUtils = require('../lib/utils');

var utils = _interopRequireWildcard(_libUtils);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _appiumTestSupport = require('appium-test-support');

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('Early failures', (0, _appiumTestSupport.withSandbox)({}, function (S) {
  it('should error on getInstrumentsPath failure', function callee$1$0() {
    var instruments, onExitSpy;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          instruments = new _.Instruments({});

          S.sandbox.stub(utils, 'getInstrumentsPath').returns(_Promise.reject(new Error('ouch!')));
          onExitSpy = _sinon2['default'].spy();

          instruments.onShutdown.then(onExitSpy, onExitSpy).done();
          context$2$0.next = 6;
          return _regeneratorRuntime.awrap(instruments.launch().should.be.rejectedWith(/ouch!/));

        case 6:
          onExitSpy.should.not.have.been.called;

        case 7:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZWFybHktZmFpbHVyZXMtc3BlY3MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Z0JBRTRCLElBQUk7O3dCQUNULGNBQWM7O0lBQXpCLEtBQUs7O29CQUNBLE1BQU07Ozs7OEJBQ0ksa0JBQWtCOzs7O3FCQUMzQixPQUFPOzs7O2lDQUNHLHFCQUFxQjs7QUFHakQsa0JBQUssTUFBTSxFQUFFLENBQUM7QUFDZCxrQkFBSyxHQUFHLDZCQUFnQixDQUFDOztBQUV6QixRQUFRLENBQUMsZ0JBQWdCLEVBQUUsb0NBQVksRUFBRSxFQUFFLFVBQUMsQ0FBQyxFQUFLO0FBQ2hELElBQUUsQ0FBQyw0Q0FBNEMsRUFBRTtRQUMzQyxXQUFXLEVBRVgsU0FBUzs7OztBQUZULHFCQUFXLEdBQUcsa0JBQWdCLEVBQUUsQ0FBQzs7QUFDckMsV0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLG9CQUFvQixDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVEsTUFBTSxDQUFDLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNwRixtQkFBUyxHQUFHLG1CQUFNLEdBQUcsRUFBRTs7QUFDM0IscUJBQVcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQzs7MkNBQ25ELFdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUM7OztBQUMxRCxtQkFBUyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7Ozs7Ozs7R0FDdkMsQ0FBQyxDQUFDO0NBQ0osQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoidGVzdC9lYXJseS1mYWlsdXJlcy1zcGVjcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHRyYW5zcGlsZTptb2NoYVxuXG5pbXBvcnQgeyBJbnN0cnVtZW50cyB9IGZyb20gJy4uJztcbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gJy4uL2xpYi91dGlscyc7XG5pbXBvcnQgY2hhaSBmcm9tICdjaGFpJztcbmltcG9ydCBjaGFpQXNQcm9taXNlZCBmcm9tICdjaGFpLWFzLXByb21pc2VkJztcbmltcG9ydCBzaW5vbiBmcm9tICdzaW5vbic7XG5pbXBvcnQgeyB3aXRoU2FuZGJveCB9IGZyb20gJ2FwcGl1bS10ZXN0LXN1cHBvcnQnO1xuXG5cbmNoYWkuc2hvdWxkKCk7XG5jaGFpLnVzZShjaGFpQXNQcm9taXNlZCk7XG5cbmRlc2NyaWJlKCdFYXJseSBmYWlsdXJlcycsIHdpdGhTYW5kYm94KHt9LCAoUykgPT4ge1xuICBpdCgnc2hvdWxkIGVycm9yIG9uIGdldEluc3RydW1lbnRzUGF0aCBmYWlsdXJlJywgYXN5bmMgKCkgPT4ge1xuICAgIGxldCBpbnN0cnVtZW50cyA9IG5ldyBJbnN0cnVtZW50cyh7fSk7XG4gICAgUy5zYW5kYm94LnN0dWIodXRpbHMsICdnZXRJbnN0cnVtZW50c1BhdGgnKS5yZXR1cm5zKFByb21pc2UucmVqZWN0KG5ldyBFcnJvcignb3VjaCEnKSkpO1xuICAgIGxldCBvbkV4aXRTcHkgPSBzaW5vbi5zcHkoKTtcbiAgICBpbnN0cnVtZW50cy5vblNodXRkb3duLnRoZW4ob25FeGl0U3B5LCBvbkV4aXRTcHkpLmRvbmUoKTtcbiAgICBhd2FpdCBpbnN0cnVtZW50cy5sYXVuY2goKS5zaG91bGQuYmUucmVqZWN0ZWRXaXRoKC9vdWNoIS8pO1xuICAgIG9uRXhpdFNweS5zaG91bGQubm90LmhhdmUuYmVlbi5jYWxsZWQ7XG4gIH0pO1xufSkpO1xuIl19
require('source-map-support').install();

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this = this;

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _libSettings = require('../../lib/settings');

var _libSimulatorXcode6 = require('../../lib/simulator-xcode-6');

var _libSimulatorXcode62 = _interopRequireDefault(_libSimulatorXcode6);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _appiumSupport = require('appium-support');

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _asyncbox = require('asyncbox');

var SIM_DIRECTORY = _path2['default'].resolve('test/assets/');

_chai2['default'].should();
var expect = _chai2['default'].expect;
_chai2['default'].use(_chaiAsPromised2['default']);

describe('settings', function () {
  var sim = undefined;
  before(function () {
    // create a simulator object that returns our fixture directory
    sim = new _libSimulatorXcode62['default']();
    sim.xcodeVersion = {
      versionString: '6.1',
      versionFloat: 6.1,
      major: 6,
      minor: 1,
      patch: undefined
    };
    _sinon2['default'].stub(sim, 'getDir').returns(SIM_DIRECTORY);
  });

  describe('general plist handling', function () {
    var plist = _path2['default'].resolve('test/assets/sample.plist');
    var expectedField = 'com.apple.locationd.bundle-/System/Library/PrivateFrameworks/Parsec.framework';
    var tmpPlist = undefined;

    beforeEach(function callee$2$0() {
      var temp;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(_appiumSupport.tempDir.path());

          case 2:
            temp = context$3$0.sent;

            tmpPlist = _path2['default'].resolve(temp, 'sample.plist');
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.copyFile(plist, tmpPlist));

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    afterEach(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.unlink(tmpPlist));

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    it('should update a plist', function callee$2$0() {
      var originalData, updatedData;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _libSettings.read)(tmpPlist));

          case 2:
            originalData = context$3$0.sent;

            originalData[expectedField].Whitelisted = true;
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap((0, _libSettings.update)(tmpPlist, originalData));

          case 6:
            context$3$0.next = 8;
            return _regeneratorRuntime.awrap((0, _libSettings.read)(tmpPlist));

          case 8:
            updatedData = context$3$0.sent;

            updatedData[expectedField].Whitelisted.should.be['true'];

            originalData.should.eql(updatedData);

          case 11:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    it('should read a plist', function callee$2$0() {
      var data;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _libSettings.read)(tmpPlist));

          case 2:
            data = context$3$0.sent;

            data[expectedField].should.be.an['instanceof'](Object);

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  });

  describe('location services', function () {
    var clientFixtureFile = _path2['default'].resolve(SIM_DIRECTORY, 'Library', 'Caches', 'locationd', 'clients-fixture.plist');
    var clientFile = _path2['default'].resolve(SIM_DIRECTORY, 'Library', 'Caches', 'locationd', 'clients.plist');
    var cacheFixtureFiles = [_path2['default'].resolve(SIM_DIRECTORY, 'Library', 'Caches', 'locationd', 'cache-fixture.plist'), _path2['default'].resolve(SIM_DIRECTORY, 'Library', 'Preferences', 'com.apple.locationd-fixture.plist')];
    var cacheFiles = [_path2['default'].resolve(SIM_DIRECTORY, 'Library', 'Caches', 'locationd', 'cache.plist'), _path2['default'].resolve(SIM_DIRECTORY, 'Library', 'Preferences', 'com.apple.locationd.plist')];
    beforeEach(function callee$2$0() {
      var i;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.copyFile(clientFixtureFile, clientFile));

          case 2:
            i = 0;

          case 3:
            if (!(i < cacheFiles.length)) {
              context$3$0.next = 9;
              break;
            }

            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.copyFile(cacheFixtureFiles[i], cacheFiles[i]));

          case 6:
            i++;
            context$3$0.next = 3;
            break;

          case 9:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    afterEach(function callee$2$0() {
      var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, file;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.unlink(clientFile));

          case 2:
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _iteratorError = undefined;
            context$3$0.prev = 5;
            _iterator = _getIterator(cacheFiles);

          case 7:
            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
              context$3$0.next = 14;
              break;
            }

            file = _step.value;
            context$3$0.next = 11;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.unlink(file));

          case 11:
            _iteratorNormalCompletion = true;
            context$3$0.next = 7;
            break;

          case 14:
            context$3$0.next = 20;
            break;

          case 16:
            context$3$0.prev = 16;
            context$3$0.t0 = context$3$0['catch'](5);
            _didIteratorError = true;
            _iteratorError = context$3$0.t0;

          case 20:
            context$3$0.prev = 20;
            context$3$0.prev = 21;

            if (!_iteratorNormalCompletion && _iterator['return']) {
              _iterator['return']();
            }

          case 23:
            context$3$0.prev = 23;

            if (!_didIteratorError) {
              context$3$0.next = 26;
              break;
            }

            throw _iteratorError;

          case 26:
            return context$3$0.finish(23);

          case 27:
            return context$3$0.finish(20);

          case 28:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this, [[5, 16, 20, 28], [21,, 23, 27]]);
    });

    describe('client plist', function () {
      var data = undefined;
      var weirdLocKey = 'com.apple.locationd.bundle-/System/Library/' + 'PrivateFrameworks/AOSNotification.framework';
      beforeEach(function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap((0, _libSettings.read)(clientFile));

            case 2:
              data = context$4$0.sent;

              expect(data['com.apple.mobilesafari']).to.not.exist;
              expect(data[weirdLocKey]).to.not.exist;

            case 5:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });

      it('should update', function callee$3$0() {
        var finalData;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap((0, _libSettings.updateLocationSettings)(sim, 'com.apple.mobilesafari', true));

            case 2:
              context$4$0.next = 4;
              return _regeneratorRuntime.awrap((0, _libSettings.read)(clientFile));

            case 4:
              finalData = context$4$0.sent;

              finalData.should.not.eql(data);
              finalData['com.apple.mobilesafari'].should.exist;
              finalData['com.apple.mobilesafari'].Authorized.should.be['true'];

            case 8:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });

      it('should update an already existing bundle without changing anything but Authorized', function callee$3$0() {
        var finalData, originalRecord, updatedRecord;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap((0, _libSettings.updateLocationSettings)(sim, 'io.appium.test', true));

            case 2:
              context$4$0.next = 4;
              return _regeneratorRuntime.awrap((0, _libSettings.read)(clientFile));

            case 4:
              finalData = context$4$0.sent;

              finalData.should.not.eql(data);

              originalRecord = data['io.appium.test'];
              updatedRecord = finalData['io.appium.test'];

              updatedRecord.Whitelisted.should.equal(originalRecord.Whitelisted);
              updatedRecord.Executable.should.equal(originalRecord.Executable);
              updatedRecord.Registered.should.equal(originalRecord.Registered);
              updatedRecord.Authorized.should.not.equal(originalRecord.Authorized);

            case 12:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });

      it('should update with weird location key', function callee$3$0() {
        var finalData;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap((0, _libSettings.updateLocationSettings)(sim, 'com.apple.mobilesafari', true));

            case 2:
              context$4$0.next = 4;
              return _regeneratorRuntime.awrap((0, _libSettings.read)(clientFile));

            case 4:
              finalData = context$4$0.sent;

              finalData.should.not.eql(data);
              finalData[weirdLocKey].should.exist;

            case 7:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    });

    describe('cache plists', function () {
      it('should update both files', function callee$3$0() {
        var _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, file, finalData;

        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap((0, _libSettings.updateLocationSettings)(sim, 'com.apple.mobilesafari', true));

            case 2:
              _iteratorNormalCompletion2 = true;
              _didIteratorError2 = false;
              _iteratorError2 = undefined;
              context$4$0.prev = 5;
              _iterator2 = _getIterator(cacheFiles);

            case 7:
              if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                context$4$0.next = 18;
                break;
              }

              file = _step2.value;
              context$4$0.next = 11;
              return _regeneratorRuntime.awrap((0, _libSettings.read)(file));

            case 11:
              finalData = context$4$0.sent;

              finalData['com.apple.mobilesafari'].should.exist;
              finalData['com.apple.mobilesafari'].LastFenceActivityTimestamp.should.equal(412122103.232983);
              finalData['com.apple.mobilesafari'].CleanShutdown.should.be['true'];

            case 15:
              _iteratorNormalCompletion2 = true;
              context$4$0.next = 7;
              break;

            case 18:
              context$4$0.next = 24;
              break;

            case 20:
              context$4$0.prev = 20;
              context$4$0.t0 = context$4$0['catch'](5);
              _didIteratorError2 = true;
              _iteratorError2 = context$4$0.t0;

            case 24:
              context$4$0.prev = 24;
              context$4$0.prev = 25;

              if (!_iteratorNormalCompletion2 && _iterator2['return']) {
                _iterator2['return']();
              }

            case 27:
              context$4$0.prev = 27;

              if (!_didIteratorError2) {
                context$4$0.next = 30;
                break;
              }

              throw _iteratorError2;

            case 30:
              return context$4$0.finish(27);

            case 31:
              return context$4$0.finish(24);

            case 32:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this, [[5, 20, 24, 32], [25,, 27, 31]]);
      });
    });
  });

  describe('updateLocale', function () {
    var globalPlistFixtureFile = _path2['default'].resolve(SIM_DIRECTORY, 'Library', 'Preferences', '.GlobalPreferences-fixture.plist');
    var globalPlistFile = _path2['default'].resolve(SIM_DIRECTORY, 'Library', 'Preferences', '.GlobalPreferences.plist');

    beforeEach(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.copyFile(globalPlistFixtureFile, globalPlistFile));

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    afterEach(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.unlink(globalPlistFile));

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    it('should update language', function callee$2$0() {
      var originalData, finalData;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _libSettings.read)(globalPlistFile));

          case 2:
            originalData = context$3$0.sent;
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap((0, _libSettings.updateLocale)(sim, 'rr'));

          case 5:
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap((0, _libSettings.read)(globalPlistFile));

          case 7:
            finalData = context$3$0.sent;

            finalData.should.not.eql(originalData);
            finalData.AppleLanguages.should.include('rr');

          case 10:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    it('should not do anything when language is already present', function callee$2$0() {
      var originalData;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _libSettings.read)(globalPlistFile));

          case 2:
            originalData = context$3$0.sent;
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap((0, _libSettings.updateLocale)(sim, 'en'));

          case 5:
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap((0, _libSettings.read)(globalPlistFile));

          case 7:
            context$3$0.t0 = originalData;
            context$3$0.sent.should.eql(context$3$0.t0);

          case 9:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    it('should update locale', function callee$2$0() {
      var originalData, finalData;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _libSettings.read)(globalPlistFile));

          case 2:
            originalData = context$3$0.sent;
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap((0, _libSettings.updateLocale)(sim, undefined, 'fr_US'));

          case 5:
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap((0, _libSettings.read)(globalPlistFile));

          case 7:
            finalData = context$3$0.sent;

            finalData.should.not.eql(originalData);
            finalData.AppleLanguages.should.eql(originalData.AppleLanguages);
            finalData.AppleLocale.should.include('fr_US');

          case 11:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    it('should update calendarFormat', function callee$2$0() {
      var originalData, finalData;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _libSettings.read)(globalPlistFile));

          case 2:
            originalData = context$3$0.sent;
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap((0, _libSettings.updateLocale)(sim, undefined, undefined, 'something'));

          case 5:
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap((0, _libSettings.read)(globalPlistFile));

          case 7:
            finalData = context$3$0.sent;

            finalData.should.not.eql(originalData);
            finalData.AppleLanguages.should.eql(originalData.AppleLanguages);
            finalData.AppleLocale.should.include('@calendar=something');

          case 11:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    it('should preserve the calendarFormat when updating locale alone', function callee$2$0() {
      var originalData, intermediateData, finalData;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _libSettings.read)(globalPlistFile));

          case 2:
            originalData = context$3$0.sent;
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap((0, _libSettings.updateLocale)(sim, undefined, undefined, 'something'));

          case 5:
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap((0, _libSettings.read)(globalPlistFile));

          case 7:
            intermediateData = context$3$0.sent;

            intermediateData.should.not.eql(originalData);
            intermediateData.AppleLanguages.should.eql(originalData.AppleLanguages);
            intermediateData.AppleLocale.should.include('@calendar=something');

            // udpate with a new locale
            context$3$0.next = 13;
            return _regeneratorRuntime.awrap((0, _libSettings.updateLocale)(sim, undefined, 'fr_US'));

          case 13:
            context$3$0.next = 15;
            return _regeneratorRuntime.awrap((0, _libSettings.read)(globalPlistFile));

          case 15:
            finalData = context$3$0.sent;

            finalData.should.not.eql(intermediateData);
            finalData.AppleLanguages.should.eql(originalData.AppleLanguages);
            finalData.AppleLocale.should.eql('fr_US@calendar=something');

          case 19:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  });

  describe('updateSafariUserSettings', function () {
    var fixtureFiles = [_path2['default'].resolve(SIM_DIRECTORY, 'Library', 'ConfigurationProfiles', 'EffectiveUserSettings-fixture.plist'), _path2['default'].resolve(SIM_DIRECTORY, 'Library', 'ConfigurationProfiles', 'UserSettings-fixture.plist'), _path2['default'].resolve(SIM_DIRECTORY, 'Library', 'ConfigurationProfiles', 'PublicInfo', 'PublicEffectiveUserSettings-fixture.plist')];
    var realFiles = [_path2['default'].resolve(SIM_DIRECTORY, 'Library', 'ConfigurationProfiles', 'EffectiveUserSettings.plist'), _path2['default'].resolve(SIM_DIRECTORY, 'Library', 'ConfigurationProfiles', 'UserSettings.plist'), _path2['default'].resolve(SIM_DIRECTORY, 'Library', 'ConfigurationProfiles', 'PublicInfo', 'PublicEffectiveUserSettings.plist')];

    beforeEach(function callee$2$0() {
      var i;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            i = 0;

          case 1:
            if (!(i < fixtureFiles.length)) {
              context$3$0.next = 7;
              break;
            }

            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.copyFile(fixtureFiles[i], realFiles[i]));

          case 4:
            i++;
            context$3$0.next = 1;
            break;

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    afterEach(function callee$2$0() {
      var _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, file;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            _iteratorNormalCompletion3 = true;
            _didIteratorError3 = false;
            _iteratorError3 = undefined;
            context$3$0.prev = 3;
            _iterator3 = _getIterator(realFiles);

          case 5:
            if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {
              context$3$0.next = 12;
              break;
            }

            file = _step3.value;
            context$3$0.next = 9;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.unlink(file));

          case 9:
            _iteratorNormalCompletion3 = true;
            context$3$0.next = 5;
            break;

          case 12:
            context$3$0.next = 18;
            break;

          case 14:
            context$3$0.prev = 14;
            context$3$0.t0 = context$3$0['catch'](3);
            _didIteratorError3 = true;
            _iteratorError3 = context$3$0.t0;

          case 18:
            context$3$0.prev = 18;
            context$3$0.prev = 19;

            if (!_iteratorNormalCompletion3 && _iterator3['return']) {
              _iterator3['return']();
            }

          case 21:
            context$3$0.prev = 21;

            if (!_didIteratorError3) {
              context$3$0.next = 24;
              break;
            }

            throw _iteratorError3;

          case 24:
            return context$3$0.finish(21);

          case 25:
            return context$3$0.finish(18);

          case 26:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this, [[3, 14, 18, 26], [19,, 21, 25]]);
    });

    function getData() {
      return _regeneratorRuntime.async(function getData$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            return context$3$0.abrupt('return', (0, _asyncbox.asyncmap)(realFiles, function (file) {
              return (0, _libSettings.read)(file);
            }, true));

          case 1:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    }

    it('should update all the files', function callee$2$0() {
      var originalData, settingSet, finalData, i;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(getData());

          case 2:
            originalData = context$3$0.sent;
            settingSet = {
              WebKitJavaScriptEnabled: false,
              WebKitJavaScriptCanOpenWindowsAutomatically: false,
              WarnAboutFraudulentWebsites: false
            };
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap((0, _libSettings.updateSafariUserSettings)(sim, settingSet));

          case 6:
            context$3$0.next = 8;
            return _regeneratorRuntime.awrap(getData());

          case 8:
            finalData = context$3$0.sent;

            for (i = 0; i < realFiles.length; i++) {
              finalData[i].should.not.eql(originalData[i]);
              finalData[i].restrictedBool.safariAllowJavaScript.value.should.be['false'];
              finalData[i].restrictedBool.safariAllowPopups.value.should.be['false'];
              finalData[i].restrictedBool.safariForceFraudWarning.value.should.be['true'];
            }

          case 10:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  });
});

// get rid of the temporary plist we made

// make a copy of the clients plist

// and the cache plists

// get rid of the temporary plist we made

// get rid of the temporary plist we made

// get a calendar format into the plist

// make a copy of the fixture

// get rid of the temporary plists we made

// check the update
//# sourceMappingURL=data:application/json;charset=utf8;base64,

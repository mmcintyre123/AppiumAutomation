require('source-map-support').install();

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this = this;

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _libCertificate = require('../../lib/certificate');

var _appiumSupport = require('appium-support');

var _fsExtra = require('fs-extra');

var _uuid = require('uuid');

var _uuid2 = _interopRequireDefault(_uuid);

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);
var expect = _chai2['default'].expect;

var cwd = process.cwd();
var assetsDir = cwd + '/test/assets';
var keychainsDir = assetsDir + '/Library/Keychains';
var keychainsDirOriginal = undefined;
var certificate = undefined;
var trustStore = undefined;
var testUUID = undefined;
var tempDirectory = undefined;

describe('when using TrustStore class', function () {

  beforeEach(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          keychainsDirOriginal = assetsDir + '/Library/Keychains-Original';
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(_appiumSupport.fs.rimraf(keychainsDir));

        case 3:
          (0, _fsExtra.copySync)(keychainsDirOriginal, keychainsDir);
          trustStore = new _libCertificate.TrustStore(assetsDir);
          testUUID = _uuid2['default'].v4();

        case 6:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('can add a record to the TrustStore tsettings', function callee$1$0() {
    var tsettings;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(trustStore.getRecords(testUUID));

        case 2:
          tsettings = context$2$0.sent;

          expect(tsettings).to.have.length.of(0);
          context$2$0.next = 6;
          return _regeneratorRuntime.awrap(trustStore.addRecord(_uuid2['default'].v4(), 'tset', testUUID, 'data'));

        case 6:
          context$2$0.next = 8;
          return _regeneratorRuntime.awrap(trustStore.getRecords(testUUID));

        case 8:
          tsettings = context$2$0.sent;

          expect(tsettings).to.have.length.above(0);
          tsettings[0].subj.should.equal(testUUID);

        case 11:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('can add and remove records to in TrustStore tsettings', function callee$1$0() {
    var tsettings;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(trustStore.addRecord(_uuid2['default'].v4(), 'tset', testUUID, 'data'));

        case 2:
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(trustStore.getRecords(testUUID));

        case 4:
          tsettings = context$2$0.sent;

          expect(tsettings).to.have.length.above(0);
          context$2$0.next = 8;
          return _regeneratorRuntime.awrap(trustStore.removeRecord(testUUID));

        case 8:
          context$2$0.next = 10;
          return _regeneratorRuntime.awrap(trustStore.getRecords(testUUID));

        case 10:
          tsettings = context$2$0.sent;

          expect(tsettings).to.have.length(0);

        case 12:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('can update a record in the TrustStore tsettings', function callee$1$0() {
    var tsettings;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(trustStore.addRecord(_uuid2['default'].v4(), 'tset', testUUID, 'data1'));

        case 2:
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(trustStore.getRecords(testUUID));

        case 4:
          tsettings = context$2$0.sent;

          expect(tsettings[0].data).to.equal('data1');
          context$2$0.next = 8;
          return _regeneratorRuntime.awrap(trustStore.addRecord(_uuid2['default'].v4(), 'tset', testUUID, 'data2'));

        case 8:
          context$2$0.next = 10;
          return _regeneratorRuntime.awrap(trustStore.getRecords(testUUID));

        case 10:
          tsettings = context$2$0.sent;

          expect(tsettings[0].data).to.equal('data2');

        case 12:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
});

describe('when using TrustStore class when the keychains directory doesn\'t exist', function () {
  beforeEach(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          tempDirectory = assetsDir + '/temp';
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(_appiumSupport.fs.rimraf(tempDirectory));

        case 3:
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap(_appiumSupport.fs.mkdir(tempDirectory));

        case 5:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  afterEach(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(_appiumSupport.fs.rimraf(tempDirectory));

        case 2:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('will create a new keychains directory with a SQLite DB', function callee$1$0() {
    var newTrustStore, tsettings;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          newTrustStore = new _libCertificate.TrustStore(tempDirectory);
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(newTrustStore.addRecord('test', 'test', 'test', 'test'));

        case 3:
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap(newTrustStore.getRecords('test'));

        case 5:
          tsettings = context$2$0.sent;

          expect(tsettings).to.have.length(1);

        case 7:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
});

describe('when using Certificate class', function () {

  beforeEach(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(new _libCertificate.Certificate(assetsDir + '/test-pem.pem'));

        case 2:
          certificate = context$2$0.sent;

        case 3:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('can translate PEM certificate to DER format', function callee$1$0() {
    var derData, testData;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(certificate.getDerData());

        case 2:
          derData = context$2$0.sent;
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(assetsDir + '/Library/certificates/test-data.txt'));

        case 5:
          testData = context$2$0.sent;

          expect(testData.equals(derData));

        case 7:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('can get a fingerprint from a PEM certificate', function callee$1$0() {
    var fingerprint, testFingerprint;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(certificate.getFingerPrint());

        case 2:
          fingerprint = context$2$0.sent;
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(assetsDir + '/Library/certificates/test-fingerprint.txt'));

        case 5:
          testFingerprint = context$2$0.sent;

          expect(fingerprint.equals(testFingerprint));

        case 7:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('can get a subject from a PEM certificate', function callee$1$0() {
    var subject, testSubject;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(certificate.getSubject(assetsDir + '/test-pem.pem'));

        case 2:
          subject = context$2$0.sent;
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(assetsDir + '/Library/certificates/test-subj.txt', 'utf-8'));

        case 5:
          testSubject = context$2$0.sent;

          expect(subject).to.equal(testSubject);

        case 7:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('can add a certificate to a sqlite store', function callee$1$0() {
    var hasCert;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(certificate.add(assetsDir));

        case 2:
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(certificate.has(assetsDir));

        case 4:
          hasCert = context$2$0.sent;

          expect(hasCert);

        case 6:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('can add and remove a certificate to a sqlite store', function callee$1$0() {
    var hasCert;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(certificate.add(assetsDir));

        case 2:
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(certificate.has(assetsDir));

        case 4:
          hasCert = context$2$0.sent;

          expect(hasCert);
          context$2$0.next = 8;
          return _regeneratorRuntime.awrap(certificate.remove(assetsDir));

        case 8:
          context$2$0.next = 10;
          return _regeneratorRuntime.awrap(certificate.has(assetsDir));

        case 10:
          hasCert = context$2$0.sent;

          expect(!hasCert);

        case 12:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('can add a certificate and then remove the same certificate later', function callee$1$0() {
    var hasCert;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(certificate.add(assetsDir));

        case 2:
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(certificate.has(assetsDir));

        case 4:
          hasCert = context$2$0.sent;

          expect(hasCert);

          certificate = new _libCertificate.Certificate(assetsDir + '/test-pem.pem');
          context$2$0.next = 9;
          return _regeneratorRuntime.awrap(certificate.remove(assetsDir));

        case 9:
          context$2$0.next = 11;
          return _regeneratorRuntime.awrap(certificate.has(assetsDir));

        case 11:
          hasCert = context$2$0.sent;

          expect(!hasCert);

        case 13:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,

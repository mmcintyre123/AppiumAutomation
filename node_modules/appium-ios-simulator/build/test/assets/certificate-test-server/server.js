/* eslint-disable no-console */
'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this = this;

var _https = require('https');

var _https2 = _interopRequireDefault(_https);

var _inquirer = require('inquirer');

var _inquirer2 = _interopRequireDefault(_inquirer);

var _libUtils = require('../../../lib/utils');

var _nodeSimctl = require('node-simctl');

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

/* jshint ignore:start */ /* eslint-disable no-unused-vars */

var _colors = require('colors');

var _colors2 = _interopRequireDefault(_colors);

/* eslint-enable */ /* jshint ignore:end */

var pem = _bluebird2['default'].promisifyAll(require('pem'));

(function callee$0$0() {
  var key, keys, server, devices, bootedDevices, osName, os, _deviceName, device, bootedDevice, udid, deviceName, done, result;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        done = function done() {
          return _regeneratorRuntime.async(function done$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.next = 2;
                return _regeneratorRuntime.awrap((0, _libUtils.uninstallSSLCert)(keys.certificate, udid));

              case 2:
                server.close();
                console.log('Incomplete/failed test'.red);

              case 4:
              case 'end':
                return context$2$0.stop();
            }
          }, null, this);
        };

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(pem.createPrivateKeyAsync());

      case 3:
        key = context$1$0.sent;
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(pem.createCertificateAsync({ days: 1, selfSigned: true, serviceKey: key.key }));

      case 6:
        keys = context$1$0.sent;
        server = _https2['default'].createServer({ key: keys.serviceKey, cert: keys.certificate }, function (req, res) {
          res.end('If you are seeing this the certificate has been installed');
        }).listen(9758);

        console.log('Make sure you have at least one IOS Simulator running'.yellow);
        context$1$0.next = 11;
        return _regeneratorRuntime.awrap((0, _nodeSimctl.getDevices)());

      case 11:
        devices = context$1$0.sent;
        bootedDevices = [];

        for (osName in devices) {
          os = devices[osName];

          for (_deviceName in os) {
            device = os[_deviceName];

            if (device.state === 'Booted') {
              bootedDevices.push(device);
            }
          }
        }

        if (!(bootedDevices.length === 0)) {
          context$1$0.next = 16;
          break;
        }

        return context$1$0.abrupt('return', console.log('You must have at least one IOS Simulator running to do this test'.red));

      case 16:
        bootedDevice = bootedDevices[0];
        udid = bootedDevice.udid;
        deviceName = bootedDevice.name;

        console.log('HTTPS server is running at localhost:9758 and has created a new certificate at "random-pem.pem"'.yellow);
        console.log(('Navigate to https://localhost:9758 in \'' + deviceName + ' Simulator\'').yellow);
        console.log('DO NOT PUSH THE CONTINUE BUTTON. PUSH CANCEL.'.red);

        // Call this if the user answers 'No' to any prompts
        context$1$0.next = 24;
        return _regeneratorRuntime.awrap(_inquirer2['default'].prompt([{
          type: 'confirm',
          name: 'confirmOpenSite',
          message: 'Is https//localhost:9758 on \'' + deviceName + ' Simulator\' unaccessible?'
        }]));

      case 24:
        result = context$1$0.sent;

        console.log('Certificate', keys.certificate, udid);

        context$1$0.next = 28;
        return _regeneratorRuntime.awrap((0, _libUtils.installSSLCert)(keys.certificate, udid));

      case 28:
        if (result.confirmOpenSite) {
          context$1$0.next = 30;
          break;
        }

        return context$1$0.abrupt('return', done());

      case 30:

        // Apply certificate to Simulator
        console.log('Installing certificate'.yellow);
        console.log(('Certificate installed to \'' + deviceName + ' ' + udid + '\'. Navigate back to https://localhost:9758.').yellow);

        context$1$0.next = 34;
        return _regeneratorRuntime.awrap(_inquirer2['default'].prompt([{
          type: 'confirm',
          name: 'confirmOpenedSite',
          message: 'Now is https://localhost:9758 accessible?'
        }]));

      case 34:
        result = context$1$0.sent;

        if (result.confirmOpenedSite) {
          context$1$0.next = 37;
          break;
        }

        return context$1$0.abrupt('return', done());

      case 37:

        // Uninstall cert
        console.log('Uninstalling SSL cert'.yellow);
        context$1$0.next = 40;
        return _regeneratorRuntime.awrap((0, _libUtils.uninstallSSLCert)(keys.certificate, udid));

      case 40:
        console.log('SSL cert removed.'.yellow);
        console.log('Close the simulator, re-open it and then navigate back to https://localhost:9758'.yellow);

        context$1$0.next = 44;
        return _regeneratorRuntime.awrap(_inquirer2['default'].prompt([{
          type: 'confirm',
          name: 'confirmUninstallCert',
          message: 'Is https://localhost:9758 unaccessible?'
        }]));

      case 44:
        result = context$1$0.sent;

        if (result.confirmUninstallCert) {
          console.log('Test passed'.green);
        }

        return context$1$0.abrupt('return', server.close());

      case 47:
      case 'end':
        return context$1$0.stop();
    }
  }, null, _this);
})();

/* eslint-enable */

// Create an HTTPS server with a randomly generated certificate

// Get currently booted devices

// Get info for first device
//# sourceMappingURL=data:application/json;charset=utf8;base64,

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _xmldom = require('xmldom');

var _xmldom2 = _interopRequireDefault(_xmldom);

var commands = {},
    helpers = {},
    extensions = {};

var APPIUM_SRC_XML = '<?xml version="1.0" encoding="UTF-8"?><AppiumAUT/>';

// WDA uses a POST request to get the source. Until that
// is fixed, we need to translate the request
commands.getPageSource = function callee$0$0() {
  var cmd;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!this.isWebContext()) {
          context$1$0.next = 5;
          break;
        }

        cmd = 'document.getElementsByTagName("html")[0].outerHTML';
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.remote.execute(cmd));

      case 4:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 5:
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(this.getNativePageSource());

      case 7:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 8:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.getNativePageSource = function callee$0$0() {
  var srcTree, parser, tree, doc;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.proxyCommand('/source/xml', 'GET'));

      case 2:
        srcTree = context$1$0.sent;
        parser = new _xmldom2['default'].DOMParser();
        tree = parser.parseFromString(srcTree.tree);
        doc = parser.parseFromString(APPIUM_SRC_XML);

        doc.documentElement.appendChild(tree.documentElement);

        return context$1$0.abrupt('return', new _xmldom2['default'].XMLSerializer().serializeToString(doc));

      case 8:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

_Object$assign(extensions, commands, helpers);
exports.commands = commands;
exports.helpers = helpers;
exports['default'] = extensions;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9zb3VyY2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O3NCQUFtQixRQUFROzs7O0FBRzNCLElBQUksUUFBUSxHQUFHLEVBQUU7SUFBRSxPQUFPLEdBQUcsRUFBRTtJQUFFLFVBQVUsR0FBRyxFQUFFLENBQUM7O0FBRWpELElBQU0sY0FBYyxHQUFHLG9EQUFvRCxDQUFDOzs7O0FBSTVFLFFBQVEsQ0FBQyxhQUFhLEdBQUc7TUFFakIsR0FBRzs7OzthQURMLElBQUksQ0FBQyxZQUFZLEVBQUU7Ozs7O0FBQ2pCLFdBQUcsR0FBRyxvREFBb0Q7O3lDQUNqRCxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUM7Ozs7Ozs7eUNBRzFCLElBQUksQ0FBQyxtQkFBbUIsRUFBRTs7Ozs7Ozs7OztDQUN4QyxDQUFDOztBQUVGLE9BQU8sQ0FBQyxtQkFBbUIsR0FBRztNQUN4QixPQUFPLEVBRVAsTUFBTSxFQUVOLElBQUksRUFFSixHQUFHOzs7Ozt5Q0FOYSxJQUFJLENBQUMsWUFBWSxDQUFDLGFBQWEsRUFBRSxLQUFLLENBQUM7OztBQUF2RCxlQUFPO0FBRVAsY0FBTSxHQUFHLElBQUksb0JBQU8sU0FBUyxFQUFFO0FBRS9CLFlBQUksR0FBRyxNQUFNLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7QUFFM0MsV0FBRyxHQUFHLE1BQU0sQ0FBQyxlQUFlLENBQUMsY0FBYyxDQUFDOztBQUNoRCxXQUFHLENBQUMsZUFBZSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7OzRDQUUvQyxJQUFJLG9CQUFPLGFBQWEsRUFBRSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQzs7Ozs7OztDQUN6RCxDQUFDOztBQUdGLGVBQWMsVUFBVSxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUNwQyxRQUFRLEdBQVIsUUFBUTtRQUFFLE9BQU8sR0FBUCxPQUFPO3FCQUNYLFVBQVUiLCJmaWxlIjoibGliL2NvbW1hbmRzL3NvdXJjZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB4bWxkb20gZnJvbSAneG1sZG9tJztcblxuXG5sZXQgY29tbWFuZHMgPSB7fSwgaGVscGVycyA9IHt9LCBleHRlbnNpb25zID0ge307XG5cbmNvbnN0IEFQUElVTV9TUkNfWE1MID0gJzw/eG1sIHZlcnNpb249XCIxLjBcIiBlbmNvZGluZz1cIlVURi04XCI/PjxBcHBpdW1BVVQvPic7XG5cbi8vIFdEQSB1c2VzIGEgUE9TVCByZXF1ZXN0IHRvIGdldCB0aGUgc291cmNlLiBVbnRpbCB0aGF0XG4vLyBpcyBmaXhlZCwgd2UgbmVlZCB0byB0cmFuc2xhdGUgdGhlIHJlcXVlc3RcbmNvbW1hbmRzLmdldFBhZ2VTb3VyY2UgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLmlzV2ViQ29udGV4dCgpKSB7XG4gICAgbGV0IGNtZCA9ICdkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImh0bWxcIilbMF0ub3V0ZXJIVE1MJztcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5yZW1vdGUuZXhlY3V0ZShjbWQpO1xuICB9XG5cbiAgcmV0dXJuIGF3YWl0IHRoaXMuZ2V0TmF0aXZlUGFnZVNvdXJjZSgpO1xufTtcblxuaGVscGVycy5nZXROYXRpdmVQYWdlU291cmNlID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICBsZXQgc3JjVHJlZSA9IGF3YWl0IHRoaXMucHJveHlDb21tYW5kKCcvc291cmNlL3htbCcsICdHRVQnKTtcblxuICBsZXQgcGFyc2VyID0gbmV3IHhtbGRvbS5ET01QYXJzZXIoKTtcblxuICBsZXQgdHJlZSA9IHBhcnNlci5wYXJzZUZyb21TdHJpbmcoc3JjVHJlZS50cmVlKTtcblxuICBsZXQgZG9jID0gcGFyc2VyLnBhcnNlRnJvbVN0cmluZyhBUFBJVU1fU1JDX1hNTCk7XG4gIGRvYy5kb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQodHJlZS5kb2N1bWVudEVsZW1lbnQpO1xuXG4gIHJldHVybiBuZXcgeG1sZG9tLlhNTFNlcmlhbGl6ZXIoKS5zZXJpYWxpemVUb1N0cmluZyhkb2MpO1xufTtcblxuXG5PYmplY3QuYXNzaWduKGV4dGVuc2lvbnMsIGNvbW1hbmRzLCBoZWxwZXJzKTtcbmV4cG9ydCB7IGNvbW1hbmRzLCBoZWxwZXJzIH07XG5leHBvcnQgZGVmYXVsdCBleHRlbnNpb25zO1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9

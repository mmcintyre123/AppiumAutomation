'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _appiumBaseDriver = require('appium-base-driver');

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var helpers = {},
    extensions = {};

helpers.proxyCommand = function callee$0$0(endpoint, method, body) {
  var res;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!endpoint) {
          _logger2['default'].errorAndThrow('Proxying requires an endpoint');
        } else if (method !== 'POST' && method !== 'GET' && method !== 'DELETE') {
          _logger2['default'].errorAndThrow('Proxying only works for GET, POST or DELETE requests');
        }

        if (!(!this.wda || !this.wda.jwproxy)) {
          context$1$0.next = 3;
          break;
        }

        throw new Error("Can't call proxyCommand without proxy active");

      case 3:
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.wda.jwproxy.command(endpoint, method, body));

      case 5:
        res = context$1$0.sent;

        if (!(res && res.status && parseInt(res.status, 10) !== 0)) {
          context$1$0.next = 8;
          break;
        }

        throw (0, _appiumBaseDriver.errorFromCode)(res.status, res.value);

      case 8:
        return context$1$0.abrupt('return', res);

      case 9:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

_Object$assign(extensions, helpers);
exports.helpers = helpers;
exports['default'] = extensions;

// temporarily handle errors that can be returned
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9wcm94eS1oZWxwZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O2dDQUE4QixvQkFBb0I7O3NCQUNsQyxXQUFXOzs7O0FBRzNCLElBQUksT0FBTyxHQUFHLEVBQUU7SUFBRSxVQUFVLEdBQUcsRUFBRSxDQUFDOztBQUVsQyxPQUFPLENBQUMsWUFBWSxHQUFHLG9CQUFnQixRQUFRLEVBQUUsTUFBTSxFQUFFLElBQUk7TUFXdkQsR0FBRzs7OztBQVZQLFlBQUksQ0FBQyxRQUFRLEVBQUU7QUFDYiw4QkFBSSxhQUFhLENBQUMsK0JBQStCLENBQUMsQ0FBQztTQUNwRCxNQUFNLElBQUksTUFBTSxLQUFLLE1BQU0sSUFBSSxNQUFNLEtBQUssS0FBSyxJQUFJLE1BQU0sS0FBSyxRQUFRLEVBQUU7QUFDdkUsOEJBQUksYUFBYSxDQUFDLHNEQUFzRCxDQUFDLENBQUM7U0FDM0U7O2NBRUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUE7Ozs7O2NBQzFCLElBQUksS0FBSyxDQUFDLDhDQUE4QyxDQUFDOzs7O3lDQUdqRCxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUM7OztBQUE1RCxXQUFHOztjQUdILEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBTSxJQUFJLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQTs7Ozs7Y0FDL0MscUNBQWMsR0FBRyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsS0FBSyxDQUFDOzs7NENBR3JDLEdBQUc7Ozs7Ozs7Q0FDWCxDQUFDOztBQUVGLGVBQWMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQzFCLE9BQU8sR0FBUCxPQUFPO3FCQUNELFVBQVUiLCJmaWxlIjoibGliL2NvbW1hbmRzL3Byb3h5LWhlbHBlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGVycm9yRnJvbUNvZGUgfSBmcm9tICdhcHBpdW0tYmFzZS1kcml2ZXInO1xuaW1wb3J0IGxvZyBmcm9tICcuLi9sb2dnZXInO1xuXG5cbmxldCBoZWxwZXJzID0ge30sIGV4dGVuc2lvbnMgPSB7fTtcblxuaGVscGVycy5wcm94eUNvbW1hbmQgPSBhc3luYyBmdW5jdGlvbiAoZW5kcG9pbnQsIG1ldGhvZCwgYm9keSkge1xuICBpZiAoIWVuZHBvaW50KSB7XG4gICAgbG9nLmVycm9yQW5kVGhyb3coJ1Byb3h5aW5nIHJlcXVpcmVzIGFuIGVuZHBvaW50Jyk7XG4gIH0gZWxzZSBpZiAobWV0aG9kICE9PSAnUE9TVCcgJiYgbWV0aG9kICE9PSAnR0VUJyAmJiBtZXRob2QgIT09ICdERUxFVEUnKSB7XG4gICAgbG9nLmVycm9yQW5kVGhyb3coJ1Byb3h5aW5nIG9ubHkgd29ya3MgZm9yIEdFVCwgUE9TVCBvciBERUxFVEUgcmVxdWVzdHMnKTtcbiAgfVxuXG4gIGlmICghdGhpcy53ZGEgfHwgIXRoaXMud2RhLmp3cHJveHkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW4ndCBjYWxsIHByb3h5Q29tbWFuZCB3aXRob3V0IHByb3h5IGFjdGl2ZVwiKTtcbiAgfVxuXG4gIGxldCByZXMgPSBhd2FpdCB0aGlzLndkYS5qd3Byb3h5LmNvbW1hbmQoZW5kcG9pbnQsIG1ldGhvZCwgYm9keSk7XG5cbiAgLy8gdGVtcG9yYXJpbHkgaGFuZGxlIGVycm9ycyB0aGF0IGNhbiBiZSByZXR1cm5lZFxuICBpZiAocmVzICYmIHJlcy5zdGF0dXMgJiYgcGFyc2VJbnQocmVzLnN0YXR1cywgMTApICE9PSAwKSB7XG4gICAgdGhyb3cgZXJyb3JGcm9tQ29kZShyZXMuc3RhdHVzLCByZXMudmFsdWUpO1xuICB9XG5cbiAgcmV0dXJuIHJlcztcbn07XG5cbk9iamVjdC5hc3NpZ24oZXh0ZW5zaW9ucywgaGVscGVycyk7XG5leHBvcnQgeyBoZWxwZXJzIH07XG5leHBvcnQgZGVmYXVsdCBleHRlbnNpb25zO1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9

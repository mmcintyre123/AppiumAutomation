'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _appiumBaseDriver = require('appium-base-driver');

var _appiumSupport = require('appium-support');

var _appiumIosDriver = require('appium-ios-driver');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var helpers = {},
    extensions = {},
    commands = {};

commands.moveTo = _appiumIosDriver.iosCommands.gesture.moveTo;

commands.click = function callee$0$0(el) {
  var atomsElement;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (this.isWebContext()) {
          context$1$0.next = 4;
          break;
        }

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.nativeClick(el));

      case 3:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 4:
        el = _appiumSupport.util.unwrapElement(el);

        if (!(this.opts.nativeWebTap && !this.isRealDevice())) {
          context$1$0.next = 10;
          break;
        }

        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(this.nativeWebTap(el));

      case 8:
        context$1$0.next = 14;
        break;

      case 10:
        atomsElement = this.useAtomsElement(el);
        context$1$0.next = 13;
        return _regeneratorRuntime.awrap(this.executeAtom('click', [atomsElement]));

      case 13:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 14:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.performTouch = function callee$0$0(gestures) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Received the following touch action: ' + _lodash2['default'].map(gestures, 'action').join('-'));

        if (!isDoubleTap(gestures)) {
          context$1$0.next = 7;
          break;
        }

        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.handleDoubleTap(gestures));

      case 4:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 7:
        if (!isTap(gestures)) {
          context$1$0.next = 13;
          break;
        }

        context$1$0.next = 10;
        return _regeneratorRuntime.awrap(this.handleTap(gestures[0]));

      case 10:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 13:
        if (!isLongPress(gestures)) {
          context$1$0.next = 19;
          break;
        }

        context$1$0.next = 16;
        return _regeneratorRuntime.awrap(this.handleLongPress(gestures));

      case 16:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 19:
        if (!isDrag(gestures)) {
          context$1$0.next = 25;
          break;
        }

        context$1$0.next = 22;
        return _regeneratorRuntime.awrap(this.handleDrag(gestures));

      case 22:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 25:
        if (!isScroll(gestures)) {
          context$1$0.next = 29;
          break;
        }

        context$1$0.next = 28;
        return _regeneratorRuntime.awrap(this.handleScroll(gestures));

      case 28:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 29:
        throw new _appiumBaseDriver.errors.NotYetImplementedError('Support for this gesture is not yet implemented. Please contact an Appium dev');

      case 30:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.performMultiAction = function callee$0$0(actions) {
  var i;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Received the following multi touch action:');
        for (i in actions) {
          _logger2['default'].debug('    ' + (i + 1) + ': ' + _lodash2['default'].map(actions[i], 'action').join('-'));
        }

        if (!isPinchOrZoom(actions)) {
          context$1$0.next = 6;
          break;
        }

        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.handlePinchOrZoom(actions));

      case 5:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 6:
        throw new _appiumBaseDriver.errors.NotYetImplementedError('Support for this multi-action is not yet implemented. Please contact an Appium dev.');

      case 7:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.nativeClick = function callee$0$0(el) {
  var endpoint;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        el = _appiumSupport.util.unwrapElement(el);
        endpoint = '/element/' + el + '/click';
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.proxyCommand(endpoint, 'POST', {}));

      case 4:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

function isDrag(gestures) {
  return gestures.length === 4 && gestures[0].action === 'press' && gestures[1].action === 'wait' && gestures[2].action === 'moveTo' && gestures[3].action === 'release';
}

function isDoubleTap(gestures) {
  if (gestures.length === 1 && gestures[0].action.toLowerCase() === 'doubletap') {
    return true;
  } else if (gestures.length === 1 && gestures[0].action === 'tap' && (gestures[0].options || {}).count === 2) {
    return true;
  }
  return false;
}

function isTap(gestures) {
  if (gestures.length === 1 && gestures[0].action === 'tap') {
    return true;
  } else if (gestures.length === 2 && gestures[0].action === 'press' && gestures[1].action === 'release') {
    return true;
  }
  return false;
}

function isLongPress(gestures) {
  if (gestures.length === 1 && gestures[0].action.toLowerCase() === 'longpress') {
    return true;
  } else if (gestures.length === 3 && gestures[0].action === 'press' && gestures[1].action === 'wait' && gestures[2].action === 'release') {
    return true;
  }
  return false;
}

function isScroll(gestures) {
  if (gestures.length === 3 && gestures[0].action === 'press' && gestures[1].action === 'moveTo' && gestures[2].action === 'release') {
    return true;
  }
  return false;
}

function isPinchOrZoom() {
  var actions = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];

  // symmetric two-finger action consisting of press-moveto-release
  if (actions.length === 2) {
    if (actions[0].length === 3 && actions[1].length === 3) {
      return _lodash2['default'].every(actions, function (gestures) {
        return isScroll(gestures);
      });
    }
  }
  return false;
}

helpers.handleScroll = function callee$0$0(gestures) {
  var dragGestures;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!gestures[1].options.element) {
          context$1$0.next = 4;
          break;
        }

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.mobileScroll({
          element: gestures[1].options.element,
          toVisible: true
        }));

      case 3:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 4:
        dragGestures = [gestures[0], { action: 'wait', options: { ms: 0 } }, gestures[1], gestures[2]];
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(this.handleDrag(dragGestures));

      case 7:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 8:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.handleDrag = function callee$0$0(gestures) {
  var press, wait, moveTo, pressCoordinates, duration, moveToCoordinates, params, endpoint;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        press = gestures[0];
        wait = gestures[1];
        moveTo = gestures[2];
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.getCoordinates(press));

      case 5:
        pressCoordinates = context$1$0.sent;
        duration = parseInt(wait.options.ms, 10) / 1000;
        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(this.getCoordinates(moveTo));

      case 9:
        moveToCoordinates = context$1$0.sent;

        // update moveTo coordinates with offset
        moveToCoordinates = this.applyMoveToOffset(pressCoordinates, moveToCoordinates);

        // build drag command
        params = {};

        params.fromX = pressCoordinates.x;
        params.fromY = pressCoordinates.y;
        params.toX = moveToCoordinates.x;
        params.toY = moveToCoordinates.y;
        params.duration = duration;

        endpoint = '/wda/element/0/dragfromtoforduration';
        context$1$0.next = 20;
        return _regeneratorRuntime.awrap(this.proxyCommand(endpoint, 'POST', params));

      case 20:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 21:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.handleTap = function callee$0$0(gesture) {
  var options, params, el, endpoint;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        options = gesture.options || {};
        params = {};

        if (_appiumSupport.util.hasValue(options.x) && _appiumSupport.util.hasValue(options.y)) {
          params.x = options.x;
          params.y = options.y;
        }

        el = _appiumSupport.util.hasValue(options.element) ? options.element : '0';
        endpoint = '/wda/tap/' + el;

        if (_appiumSupport.util.hasValue(this.opts.tapWithShortPressDuration)) {
          // in some cases `tap` is too slow, so allow configurable long press
          _logger2['default'].debug('Translating tap into long press with \'' + this.opts.tapWithShortPressDuration + '\' duration');
          params.duration = parseFloat(this.opts.tapWithShortPressDuration);
          endpoint = '/wda/element/' + el + '/touchAndHold';
          params.duration = parseFloat(this.opts.tapWithShortPressDuration);
        }

        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(this.proxyCommand(endpoint, 'POST', params));

      case 8:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 9:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.handleDoubleTap = function callee$0$0(gestures) {
  var gesture, opts, el, endpoint;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        gesture = gestures[0];
        opts = gesture.options || {};

        if (!opts.element) {
          _logger2['default'].errorAndThrow('WDA double tap needs an element');
        }

        el = _appiumSupport.util.unwrapElement(opts.element);
        endpoint = '/wda/element/' + el + '/doubleTap';
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(this.proxyCommand(endpoint, 'POST'));

      case 7:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 8:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.handleLongPress = function callee$0$0(gestures) {
  var pressOpts, el, duration, params, endpoint;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        pressOpts = gestures[0].options || {};
        el = _appiumSupport.util.unwrapElement(pressOpts.element);
        duration = undefined;

        if (gestures.length === 1 && _appiumSupport.util.hasValue(pressOpts.duration)) {
          duration = pressOpts.duration;
        } else if (gestures.length === 3) {
          // duration is the `wait` action
          // upstream system expects seconds not milliseconds
          duration = parseFloat(gestures[1].options.ms) / 1000;
        } else {
          // give a sane default duration
          duration = 0.8;
        }

        params = {
          duration: duration,
          x: pressOpts.x,
          y: pressOpts.y
        };
        endpoint = undefined;

        if (el) {
          endpoint = '/wda/element/' + el + '/touchAndHold';
        } else {
          params.x = pressOpts.x;
          params.y = pressOpts.y;

          endpoint = '/wda/touchAndHold';
        }
        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(this.proxyCommand(endpoint, 'POST', params));

      case 9:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 10:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

function determinePinchScale(x, y, pinch) {
  var scale = x > y ? x - y : y - x;
  if (pinch) {
    // TODO: revisit this when pinching actually works, since it is impossible to
    // know what the scale factor does at this point (Xcode 8.1)
    scale = 1 / scale;
    if (scale < 0.02) {
      // this is the minimum that Apple will allow
      // but WDA will not throw an error if it is too low
      scale = 0.02;
    }
  } else {
    // for zoom, each 10px is one scale factor
    scale = scale / 10;
  }
  return scale;
}

helpers.handlePinchOrZoom = function callee$0$0(actions) {
  var el, scale, velocity, thumb, forefinger, params;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        // currently we can only do this action on an element
        if (!actions[0][0].options.element || actions[0][0].options.element !== actions[1][0].options.element) {
          _logger2['default'].errorAndThrow('Pinch/zoom actions must be done on a single element');
        }
        el = actions[0][0].options.element;
        scale = undefined, velocity = undefined;

        if (actions[0][0].options.y === actions[0][1].options.y) {
          thumb = actions[0][0].options.x <= actions[1][0].options.x ? actions[0] : actions[1];

          // now decipher pinch vs. zoom,
          //   pinch: thumb moving from left to right
          //   zoom: thumb moving from right to left
          scale = determinePinchScale(thumb[0].options.x, thumb[1].options.x, thumb[0].options.x <= thumb[1].options.x);
        } else {
          forefinger = actions[0][0].options.y <= actions[1][0].options.y ? actions[0] : actions[1];

          // now decipher pinch vs. zoom
          //   pinch: forefinger moving from top to bottom
          //   zoom: forefinger moving from bottom to top
          scale = determinePinchScale(forefinger[0].options.y, forefinger[1].options.y, forefinger[0].options.y <= forefinger[1].options.y);
        }
        velocity = scale < 1 ? -1 : 1;

        _logger2['default'].debug('Decoded ' + (scale < 1 ? 'pinch' : 'zoom') + ' action with scale \'' + scale + '\' and velocity \'' + velocity + '\'');
        if (scale < 1) {
          _logger2['default'].warn('Pinch actions may not work, due to Apple issue.');
        }

        params = {
          scale: scale,
          velocity: velocity
        };
        context$1$0.next = 10;
        return _regeneratorRuntime.awrap(this.proxyCommand('/wda/element/' + el + '/pinch', 'POST', params));

      case 10:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.mobileScroll = function callee$0$0() {
  var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
  var params, msg, element, endpoint;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (opts.element) {
          context$1$0.next = 4;
          break;
        }

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.findElement('class name', 'XCUIElementTypeApplication'));

      case 3:
        opts.element = context$1$0.sent;

      case 4:
        params = {};

        if (opts.name) {
          params.name = opts.name;
        } else if (opts.direction) {
          params.direction = opts.direction;
        } else if (opts.predicateString) {
          params.predicateString = opts.predicateString;
        } else if (opts.toVisible) {
          params.toVisible = opts.toVisible;
        } else {
          msg = 'Mobile scroll supports the following strategies: name, ' + 'direction, predicateString, and toVisible. Specify one of these';

          _logger2['default'].errorAndThrow(msg);
        }

        element = opts.element.ELEMENT ? opts.element.ELEMENT : opts.element;
        endpoint = '/wda/element/' + element + '/scroll';
        context$1$0.next = 10;
        return _regeneratorRuntime.awrap(this.proxyCommand(endpoint, 'POST', params));

      case 10:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 11:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.getCoordinates = function callee$0$0(gesture) {
  var el, coordinates, rect, pos, size, offsetX, offsetY;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        el = gesture.options.element;
        coordinates = { x: 0, y: 0, areOffsets: false };

        if (!el) {
          context$1$0.next = 15;
          break;
        }

        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.getRect(el));

      case 5:
        rect = context$1$0.sent;
        pos = { x: rect.x, y: rect.y };
        size = { w: rect.width, h: rect.height };
        offsetX = 0;
        offsetY = 0;

        // get the real offsets
        if (gesture.options.x || gesture.options.y) {
          offsetX = gesture.options.x || 0;
          offsetY = gesture.options.y || 0;
        } else {
          offsetX = size.w / 2;
          offsetY = size.h / 2;
        }

        // apply the offsets
        coordinates.x = pos.x + offsetX;
        coordinates.y = pos.y + offsetY;
        context$1$0.next = 18;
        break;

      case 15:
        // moveTo coordinates are passed in as offsets
        coordinates.areOffsets = gesture.action === 'moveTo';
        coordinates.x = gesture.options.x || 0;
        coordinates.y = gesture.options.y || 0;

      case 18:
        return context$1$0.abrupt('return', coordinates);

      case 19:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.applyMoveToOffset = function (firstCoordinates, secondCoordinates) {
  if (secondCoordinates.areOffsets) {
    return {
      x: firstCoordinates.x + secondCoordinates.x,
      y: firstCoordinates.y + secondCoordinates.y
    };
  } else {
    return secondCoordinates;
  }
};

_Object$assign(extensions, helpers, commands);
exports.extensions = extensions;
exports.helpers = helpers;
exports.commands = commands;
exports['default'] = extensions;

// there are multiple commands that map here, so manually proxy

// atoms-based clicks don't always work in safari 7

// use the to-visible option of scrolling in WDA

// otherwise, for now, just translate into a drag with short duration

// get gestures

// get drag data

// assume that action is in a single plane (x or y, not horizontal at all)
// terminology all assuming right handedness

// horizontal, since y offset is the same in press and moveTo

// vertical

// WDA supports four scrolling strategies: predication based on name, direction,
// predicateString, and toVisible, in that order.

// defaults

// figure out the element coordinates.

// defaults
//# sourceMappingURL=data:application/json;charset=utf8;base64,

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _appiumBaseDriver = require('appium-base-driver');

var _appiumIosDriver = require('appium-ios-driver');

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var commands = {};

commands.active = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (this.isWebContext()) {
          context$1$0.next = 2;
          break;
        }

        throw new _appiumBaseDriver.errors.UnknownError('Command should be proxied to WDA');

      case 2:
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.executeAtom('active_element', []));

      case 4:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Close app (simulate device home button). If a duration is given, app will
 * re-open after that many seconds
 */
commands.background = function callee$0$0(seconds) {
  var params;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        params = {};

        if (seconds) {
          params.duration = seconds;
        }
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.proxyCommand('/wda/deactivateApp', 'POST', params));

      case 4:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/*
 * Simulate Touch ID with either valid (match === true) or invalid (match === false)
 * fingerprint
 */
commands.touchId = function callee$0$0() {
  var match = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];
  var params;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        params = {
          match: match
        };
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.proxyCommand('/wda/simulator/touch_id', 'POST', params));

      case 3:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.getWindowSize = function callee$0$0() {
  var windowHandle = arguments.length <= 0 || arguments[0] === undefined ? 'current' : arguments[0];
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!(windowHandle !== "current")) {
          context$1$0.next = 2;
          break;
        }

        throw new _appiumBaseDriver.errors.NotYetImplementedError('Currently only getting current window size is supported.');

      case 2:
        if (this.isWebContext()) {
          context$1$0.next = 8;
          break;
        }

        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.proxyCommand('/window/size', 'GET'));

      case 5:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 8:
        context$1$0.next = 10;
        return _regeneratorRuntime.awrap(this.executeAtom('get_window_size', []));

      case 10:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 11:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.hideKeyboard = function callee$0$0(strategy) {
  for (var _len = arguments.length, possibleKeys = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    possibleKeys[_key - 1] = arguments[_key];
  }

  var keyboard, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, key, el, buttons;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        keyboard = undefined;
        context$1$0.prev = 1;
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.findNativeElementOrElements('class name', 'XCUIElementTypeKeyboard', false));

      case 4:
        keyboard = context$1$0.sent;
        context$1$0.next = 11;
        break;

      case 7:
        context$1$0.prev = 7;
        context$1$0.t0 = context$1$0['catch'](1);

        // no keyboard found
        _logger2['default'].debug('No keyboard found. Unable to hide.');
        return context$1$0.abrupt('return');

      case 11:

        possibleKeys.pop(); // last parameter is the session id
        possibleKeys = possibleKeys.filter(function (element) {
          return !!element;
        }); // get rid of undefined elements

        if (!possibleKeys.length) {
          context$1$0.next = 50;
          break;
        }

        _iteratorNormalCompletion = true;
        _didIteratorError = false;
        _iteratorError = undefined;
        context$1$0.prev = 17;
        _iterator = _getIterator(possibleKeys);

      case 19:
        if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
          context$1$0.next = 34;
          break;
        }

        key = _step.value;
        context$1$0.t1 = _lodash2['default'];
        context$1$0.next = 24;
        return _regeneratorRuntime.awrap(this.findNativeElementOrElements('accessibility id', key, true, keyboard));

      case 24:
        context$1$0.t2 = context$1$0.sent;
        el = context$1$0.t1.last.call(context$1$0.t1, context$1$0.t2);

        if (!el) {
          context$1$0.next = 31;
          break;
        }

        _logger2['default'].debug('Attempting to hide keyboard by pressing \'' + key + '\' key.');
        context$1$0.next = 30;
        return _regeneratorRuntime.awrap(this.nativeClick(el));

      case 30:
        return context$1$0.abrupt('return');

      case 31:
        _iteratorNormalCompletion = true;
        context$1$0.next = 19;
        break;

      case 34:
        context$1$0.next = 40;
        break;

      case 36:
        context$1$0.prev = 36;
        context$1$0.t3 = context$1$0['catch'](17);
        _didIteratorError = true;
        _iteratorError = context$1$0.t3;

      case 40:
        context$1$0.prev = 40;
        context$1$0.prev = 41;

        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }

      case 43:
        context$1$0.prev = 43;

        if (!_didIteratorError) {
          context$1$0.next = 46;
          break;
        }

        throw _iteratorError;

      case 46:
        return context$1$0.finish(43);

      case 47:
        return context$1$0.finish(40);

      case 48:
        context$1$0.next = 56;
        break;

      case 50:
        // find the keyboard, and hit the last Button
        _logger2['default'].debug('Finding keyboard and clicking final button to close');
        context$1$0.next = 53;
        return _regeneratorRuntime.awrap(this.findNativeElementOrElements('class name', 'XCUIElementTypeButton', true, keyboard));

      case 53:
        buttons = context$1$0.sent;
        context$1$0.next = 56;
        return _regeneratorRuntime.awrap(this.nativeClick(_lodash2['default'].last(buttons)));

      case 56:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[1, 7], [17, 36, 40, 48], [41,, 43, 47]]);
};

commands.getDeviceTime = _appiumIosDriver.iosCommands.general.getDeviceTime;

commands.getStrings = _appiumIosDriver.iosCommands.general.getStrings;

commands.removeApp = function callee$0$0(bundleId) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!this.isRealDevice()) {
          context$1$0.next = 5;
          break;
        }

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.opts.device.remove(bundleId));

      case 3:
        context$1$0.next = 7;
        break;

      case 5:
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(this.opts.device.removeApp(bundleId));

      case 7:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.launchApp = _appiumIosDriver.iosCommands.general.launchApp;

commands.closeApp = _appiumIosDriver.iosCommands.general.closeApp;

commands.keys = function callee$0$0(keys) {
  var el;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (this.isWebContext()) {
          context$1$0.next = 2;
          break;
        }

        throw new _appiumBaseDriver.errors.UnknownError('Command should be proxied to WDA');

      case 2:
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.active());

      case 4:
        el = context$1$0.sent;

        if (!_lodash2['default'].isUndefined(el.ELEMENT)) {
          context$1$0.next = 7;
          break;
        }

        throw new _appiumBaseDriver.errors.NoSuchElementError();

      case 7:
        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(this.setValue(keys, el.ELEMENT));

      case 9:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

exports.commands = commands;
exports['default'] = commands;
//# sourceMappingURL=data:application/json;charset=utf8;base64,

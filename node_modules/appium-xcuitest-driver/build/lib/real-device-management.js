'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _teen_process = require('teen_process');

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

function getConnectedDevices() {
  var _ref, stdout, msg;

  return _regeneratorRuntime.async(function getConnectedDevices$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.prev = 0;
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('idevice_id', ['-l']));

      case 3:
        _ref = context$1$0.sent;
        stdout = _ref.stdout;
        return context$1$0.abrupt('return', stdout.trim().split('\n'));

      case 8:
        context$1$0.prev = 8;
        context$1$0.t0 = context$1$0['catch'](0);

        if (!(context$1$0.t0.message.indexOf('Command \'idevice_id\' not found') === -1)) {
          context$1$0.next = 12;
          break;
        }

        throw context$1$0.t0;

      case 12:
        msg = 'The \'idevice_id\' program is not installed. If you are running ' + 'a real device test it is necessary. Install with \'brew install ' + 'libimobiledevice --HEAD\'';

        _logger2['default'].warn(msg);
        return context$1$0.abrupt('return', []);

      case 15:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[0, 8]]);
}

function resetRealDevice(device, opts) {
  var bundleId;
  return _regeneratorRuntime.async(function resetRealDevice$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!(opts.bundleId && opts.fullReset)) {
          context$1$0.next = 18;
          break;
        }

        bundleId = opts.bundleId;

        _logger2['default'].debug('Full reset requested. Will try to uninstall the app \'' + bundleId + '\'.');
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(device.isInstalled(bundleId));

      case 5:
        if (context$1$0.sent) {
          context$1$0.next = 8;
          break;
        }

        _logger2['default'].debug('App not installed. No need to uninstall');
        return context$1$0.abrupt('return');

      case 8:
        context$1$0.prev = 8;
        context$1$0.next = 11;
        return _regeneratorRuntime.awrap(device.remove(bundleId));

      case 11:
        context$1$0.next = 17;
        break;

      case 13:
        context$1$0.prev = 13;
        context$1$0.t0 = context$1$0['catch'](8);

        _logger2['default'].error('Could not remove \'' + bundleId + '\' from device');
        throw context$1$0.t0;

      case 17:
        _logger2['default'].debug('Removed \'' + bundleId + '\'');

      case 18:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[8, 13]]);
}

function runRealDeviceReset(device, opts) {
  return _regeneratorRuntime.async(function runRealDeviceReset$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!(!opts.noReset || opts.fullReset)) {
          context$1$0.next = 7;
          break;
        }

        _logger2['default'].debug('Running ios real device reset flow');

        if (opts.noReset) {
          context$1$0.next = 5;
          break;
        }

        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(resetRealDevice(device, opts));

      case 5:
        context$1$0.next = 8;
        break;

      case 7:
        _logger2['default'].debug("Reset not set, continuing");

      case 8:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

exports.getConnectedDevices = getConnectedDevices;
exports.runRealDeviceReset = runRealDeviceReset;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9yZWFsLWRldmljZS1tYW5hZ2VtZW50LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7NEJBQXFCLGNBQWM7O3NCQUNuQixVQUFVOzs7O0FBRzFCLFNBQWUsbUJBQW1CO1lBRXpCLE1BQU0sRUFNUCxHQUFHOzs7Ozs7O3lDQU5jLHdCQUFLLFlBQVksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDOzs7O0FBQTFDLGNBQU0sUUFBTixNQUFNOzRDQUNKLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDOzs7Ozs7Y0FFNUIsZUFBSSxPQUFPLENBQUMsT0FBTyxvQ0FBa0MsS0FBSyxDQUFDLENBQUMsQ0FBQTs7Ozs7Ozs7QUFHNUQsV0FBRyxHQUFHLHVJQUNpRSw4QkFDdkM7O0FBQ3BDLDRCQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQzs0Q0FDUCxFQUFFOzs7Ozs7O0NBRVo7O0FBRUQsU0FBZSxlQUFlLENBQUUsTUFBTSxFQUFFLElBQUk7TUFFcEMsUUFBUTs7OztjQURWLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQTs7Ozs7QUFDN0IsZ0JBQVEsR0FBRyxJQUFJLENBQUMsUUFBUTs7QUFDNUIsNEJBQUksS0FBSyw0REFBeUQsUUFBUSxTQUFLLENBQUM7O3lDQUNyRSxNQUFNLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQzs7Ozs7Ozs7QUFDckMsNEJBQUksS0FBSyxDQUFDLHlDQUF5QyxDQUFDLENBQUM7Ozs7Ozt5Q0FJL0MsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUM7Ozs7Ozs7Ozs7QUFFN0IsNEJBQUksS0FBSyx5QkFBc0IsUUFBUSxvQkFBZ0IsQ0FBQzs7OztBQUcxRCw0QkFBSSxLQUFLLGdCQUFhLFFBQVEsUUFBSSxDQUFDOzs7Ozs7O0NBRXRDOztBQUVELFNBQWUsa0JBQWtCLENBQUUsTUFBTSxFQUFFLElBQUk7Ozs7Y0FDekMsQ0FBQyxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUE7Ozs7O0FBQ2pDLDRCQUFJLEtBQUssQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDOztZQUMzQyxJQUFJLENBQUMsT0FBTzs7Ozs7O3lDQUNULGVBQWUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDOzs7Ozs7O0FBR3JDLDRCQUFJLEtBQUssQ0FBQywyQkFBMkIsQ0FBQyxDQUFDOzs7Ozs7O0NBRTFDOztRQUVRLG1CQUFtQixHQUFuQixtQkFBbUI7UUFBRSxrQkFBa0IsR0FBbEIsa0JBQWtCIiwiZmlsZSI6ImxpYi9yZWFsLWRldmljZS1tYW5hZ2VtZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZXhlYyB9IGZyb20gJ3RlZW5fcHJvY2Vzcyc7XG5pbXBvcnQgbG9nIGZyb20gJy4vbG9nZ2VyJztcblxuXG5hc3luYyBmdW5jdGlvbiBnZXRDb25uZWN0ZWREZXZpY2VzICgpIHtcbiAgdHJ5IHtcbiAgICBsZXQge3N0ZG91dH0gPSBhd2FpdCBleGVjKCdpZGV2aWNlX2lkJywgWyctbCddKTtcbiAgICByZXR1cm4gc3Rkb3V0LnRyaW0oKS5zcGxpdCgnXFxuJyk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGlmIChlcnIubWVzc2FnZS5pbmRleE9mKGBDb21tYW5kICdpZGV2aWNlX2lkJyBub3QgZm91bmRgKSA9PT0gLTEpIHtcbiAgICAgIHRocm93IGVycjtcbiAgICB9XG4gICAgbGV0IG1zZyA9IGBUaGUgJ2lkZXZpY2VfaWQnIHByb2dyYW0gaXMgbm90IGluc3RhbGxlZC4gSWYgeW91IGFyZSBydW5uaW5nIGAgK1xuICAgICAgICAgICAgICBgYSByZWFsIGRldmljZSB0ZXN0IGl0IGlzIG5lY2Vzc2FyeS4gSW5zdGFsbCB3aXRoICdicmV3IGluc3RhbGwgYCArXG4gICAgICAgICAgICAgIGBsaWJpbW9iaWxlZGV2aWNlIC0tSEVBRCdgO1xuICAgIGxvZy53YXJuKG1zZyk7XG4gICAgcmV0dXJuIFtdO1xuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHJlc2V0UmVhbERldmljZSAoZGV2aWNlLCBvcHRzKSB7XG4gIGlmIChvcHRzLmJ1bmRsZUlkICYmIG9wdHMuZnVsbFJlc2V0KSB7XG4gICAgbGV0IGJ1bmRsZUlkID0gb3B0cy5idW5kbGVJZDtcbiAgICBsb2cuZGVidWcoYEZ1bGwgcmVzZXQgcmVxdWVzdGVkLiBXaWxsIHRyeSB0byB1bmluc3RhbGwgdGhlIGFwcCAnJHtidW5kbGVJZH0nLmApO1xuICAgIGlmICghYXdhaXQgZGV2aWNlLmlzSW5zdGFsbGVkKGJ1bmRsZUlkKSkge1xuICAgICAgbG9nLmRlYnVnKCdBcHAgbm90IGluc3RhbGxlZC4gTm8gbmVlZCB0byB1bmluc3RhbGwnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IGRldmljZS5yZW1vdmUoYnVuZGxlSWQpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgbG9nLmVycm9yKGBDb3VsZCBub3QgcmVtb3ZlICcke2J1bmRsZUlkfScgZnJvbSBkZXZpY2VgKTtcbiAgICAgIHRocm93IGVycjtcbiAgICB9XG4gICAgbG9nLmRlYnVnKGBSZW1vdmVkICcke2J1bmRsZUlkfSdgKTtcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBydW5SZWFsRGV2aWNlUmVzZXQgKGRldmljZSwgb3B0cykge1xuICBpZiAoIW9wdHMubm9SZXNldCB8fCBvcHRzLmZ1bGxSZXNldCkge1xuICAgIGxvZy5kZWJ1ZygnUnVubmluZyBpb3MgcmVhbCBkZXZpY2UgcmVzZXQgZmxvdycpO1xuICAgIGlmICghb3B0cy5ub1Jlc2V0KSB7XG4gICAgICBhd2FpdCByZXNldFJlYWxEZXZpY2UoZGV2aWNlLCBvcHRzKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbG9nLmRlYnVnKFwiUmVzZXQgbm90IHNldCwgY29udGludWluZ1wiKTtcbiAgfVxufVxuXG5leHBvcnQgeyBnZXRDb25uZWN0ZWREZXZpY2VzLCBydW5SZWFsRGV2aWNlUmVzZXQgfTtcbiJdLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==

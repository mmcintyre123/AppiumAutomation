'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _appiumIosSimulator = require('appium-ios-simulator');

var _nodeSimctl = require('node-simctl');

var _asyncbox = require('asyncbox');

var _appiumSupport = require('appium-support');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var DEFAULT_SAFARI_URL = 'http://appium.io';

// returns true if sim is booted. false if not booted or doesnt exist
function simBooted(sim) {
  var stat;
  return _regeneratorRuntime.async(function simBooted$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(sim.stat());

      case 2:
        stat = context$1$0.sent;
        return context$1$0.abrupt('return', stat.state === 'Booted');

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

// returns sim for desired caps
function createSim(caps, sessionId) {
  var name, udid;
  return _regeneratorRuntime.async(function createSim$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        name = 'appiumTest-' + sessionId;
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap((0, _nodeSimctl.createDevice)(name, caps.deviceName, caps.platformVersion));

      case 3:
        udid = context$1$0.sent;
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap((0, _appiumIosSimulator.getSimulator)(udid));

      case 6:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 7:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function getExistingSim(deviceName, platformVersion) {
  var devices, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, device;

  return _regeneratorRuntime.async(function getExistingSim$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap((0, _nodeSimctl.getDevices)(platformVersion));

      case 2:
        devices = context$1$0.sent;
        _iteratorNormalCompletion = true;
        _didIteratorError = false;
        _iteratorError = undefined;
        context$1$0.prev = 6;
        _iterator = _getIterator(_lodash2['default'].values(devices));

      case 8:
        if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
          context$1$0.next = 17;
          break;
        }

        device = _step.value;

        if (!(device.name === deviceName)) {
          context$1$0.next = 14;
          break;
        }

        context$1$0.next = 13;
        return _regeneratorRuntime.awrap((0, _appiumIosSimulator.getSimulator)(device.udid));

      case 13:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 14:
        _iteratorNormalCompletion = true;
        context$1$0.next = 8;
        break;

      case 17:
        context$1$0.next = 23;
        break;

      case 19:
        context$1$0.prev = 19;
        context$1$0.t0 = context$1$0['catch'](6);
        _didIteratorError = true;
        _iteratorError = context$1$0.t0;

      case 23:
        context$1$0.prev = 23;
        context$1$0.prev = 24;

        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }

      case 26:
        context$1$0.prev = 26;

        if (!_didIteratorError) {
          context$1$0.next = 29;
          break;
        }

        throw _iteratorError;

      case 29:
        return context$1$0.finish(26);

      case 30:
        return context$1$0.finish(23);

      case 31:
        return context$1$0.abrupt('return', null);

      case 32:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[6, 19, 23, 31], [24,, 26, 30]]);
}

function systemLogExists(sim) {
  var TRIES, INTERVAL, logFile;
  return _regeneratorRuntime.async(function systemLogExists$(context$1$0) {
    var _this = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        TRIES = 500;
        INTERVAL = 200;
        logFile = _path2['default'].resolve(sim.getLogDir(), 'system.log');
        return context$1$0.abrupt('return', (0, _asyncbox.retryInterval)(TRIES, INTERVAL, function callee$1$0() {
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.next = 2;
                return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(logFile));

              case 2:
                if (context$2$0.sent) {
                  context$2$0.next = 4;
                  break;
                }

                throw new Error('system.log does not exist');

              case 4:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this);
        }));

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function launchSafariOnSim(initialUrl, sim) {
  return _regeneratorRuntime.async(function launchSafariOnSim$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!initialUrl) {
          initialUrl = DEFAULT_SAFARI_URL;
        }

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(sim.openUrl(initialUrl));

      case 3:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function runSimulatorReset(device, opts) {
  return _regeneratorRuntime.async(function runSimulatorReset$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!(opts.noReset && !opts.fullReset)) {
          context$1$0.next = 3;
          break;
        }

        _logger2['default'].debug('Reset not set, not ending sim');
        return context$1$0.abrupt('return');

      case 3:

        _logger2['default'].debug('Running iOS simulator reset flow');

        // The simulator process must be ended before we delete applications.
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(endSimulator(device));

      case 6:
        if (!opts.fullReset) {
          context$1$0.next = 12;
          break;
        }

        _logger2['default'].debug('Full reset is on. Cleaning simulator');
        context$1$0.next = 10;
        return _regeneratorRuntime.awrap(fullResetSimulator(device));

      case 10:
        context$1$0.next = 14;
        break;

      case 12:
        context$1$0.next = 14;
        return _regeneratorRuntime.awrap(resetSimulator(device, opts));

      case 14:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function fullResetSimulator(device) {
  return _regeneratorRuntime.async(function fullResetSimulator$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!device) {
          context$1$0.next = 3;
          break;
        }

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(device.clean());

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function resetSimulator(device, opts) {
  return _regeneratorRuntime.async(function resetSimulator$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (device) {
          context$1$0.next = 2;
          break;
        }

        return context$1$0.abrupt('return');

      case 2:

        _logger2['default'].debug('Cleaning simulator state.');
        context$1$0.prev = 3;
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(clearAppData(device, opts));

      case 6:
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(device.clean());

      case 8:
        context$1$0.next = 14;
        break;

      case 10:
        context$1$0.prev = 10;
        context$1$0.t0 = context$1$0['catch'](3);

        _logger2['default'].warn(context$1$0.t0);
        _logger2['default'].warn('Could not reset simulator. Leaving as is.');

      case 14:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[3, 10]]);
}

function endSimulator(device) {
  return _regeneratorRuntime.async(function endSimulator$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (device) {
          context$1$0.next = 2;
          break;
        }

        return context$1$0.abrupt('return');

      case 2:

        _logger2['default'].debug('Shutting down simulator');
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(device.shutdown());

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function clearAppData(device, opts) {
  return _regeneratorRuntime.async(function clearAppData$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!(opts.app && opts.bundleId)) {
          context$1$0.next = 3;
          break;
        }

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(device.cleanCustomApp(_path2['default'].basename(opts.app), opts.bundleId));

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function isolateSimulatorDevice(device) {
  var isolateSimDevice = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];
  return _regeneratorRuntime.async(function isolateSimulatorDevice$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!isolateSimDevice) {
          context$1$0.next = 3;
          break;
        }

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(device.isolateSim());

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

exports.simBooted = simBooted;
exports.createSim = createSim;
exports.systemLogExists = systemLogExists;
exports.launchSafariOnSim = launchSafariOnSim;
exports.getExistingSim = getExistingSim;
exports.runSimulatorReset = runSimulatorReset;
exports.isolateSimulatorDevice = isolateSimulatorDevice;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9zaW11bGF0b3ItbWFuYWdlbWVudC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7b0JBQWlCLE1BQU07Ozs7a0NBQ00sc0JBQXNCOzswQkFDVixhQUFhOzt3QkFDeEIsVUFBVTs7NkJBQ3JCLGdCQUFnQjs7c0JBQ3JCLFFBQVE7Ozs7c0JBQ04sVUFBVTs7OztBQUcxQixJQUFNLGtCQUFrQixHQUFHLGtCQUFrQixDQUFDOzs7QUFHOUMsU0FBZSxTQUFTLENBQUUsR0FBRztNQUN2QixJQUFJOzs7Ozt5Q0FBUyxHQUFHLENBQUMsSUFBSSxFQUFFOzs7QUFBdkIsWUFBSTs0Q0FDRCxJQUFJLENBQUMsS0FBSyxLQUFLLFFBQVE7Ozs7Ozs7Q0FDL0I7OztBQUdELFNBQWUsU0FBUyxDQUFFLElBQUksRUFBRSxTQUFTO01BQ25DLElBQUksRUFDSixJQUFJOzs7O0FBREosWUFBSSxtQkFBaUIsU0FBUzs7eUNBQ2pCLDhCQUFhLElBQUksRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxlQUFlLENBQUM7OztBQUF0RSxZQUFJOzt5Q0FDSyxzQ0FBYSxJQUFJLENBQUM7Ozs7Ozs7Ozs7Q0FDaEM7O0FBRUQsU0FBZSxjQUFjLENBQUUsVUFBVSxFQUFFLGVBQWU7TUFDcEQsT0FBTyxrRkFDRixNQUFNOzs7Ozs7eUNBREssNEJBQVcsZUFBZSxDQUFDOzs7QUFBM0MsZUFBTzs7Ozs7aUNBQ1Esb0JBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQzs7Ozs7Ozs7QUFBM0IsY0FBTTs7Y0FDVCxNQUFNLENBQUMsSUFBSSxLQUFLLFVBQVUsQ0FBQTs7Ozs7O3lDQUNmLHNDQUFhLE1BQU0sQ0FBQyxJQUFJLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs0Q0FHbkMsSUFBSTs7Ozs7OztDQUNaOztBQUVELFNBQWUsZUFBZSxDQUFFLEdBQUc7TUFDM0IsS0FBSyxFQUNMLFFBQVEsRUFFVixPQUFPOzs7Ozs7QUFITCxhQUFLLEdBQUcsR0FBRztBQUNYLGdCQUFRLEdBQUcsR0FBRztBQUVoQixlQUFPLEdBQUcsa0JBQUssT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsRUFBRSxZQUFZLENBQUM7NENBQ2xELDZCQUFjLEtBQUssRUFBRSxRQUFRLEVBQUU7Ozs7O2lEQUN6QixrQkFBRyxNQUFNLENBQUMsT0FBTyxDQUFDOzs7Ozs7OztzQkFDckIsSUFBSSxLQUFLLENBQUMsMkJBQTJCLENBQUM7Ozs7Ozs7U0FFL0MsQ0FBQzs7Ozs7OztDQUNIOztBQUVELFNBQWUsaUJBQWlCLENBQUUsVUFBVSxFQUFFLEdBQUc7Ozs7QUFDL0MsWUFBSSxDQUFDLFVBQVUsRUFBRTtBQUNmLG9CQUFVLEdBQUcsa0JBQWtCLENBQUM7U0FDakM7Ozt5Q0FFWSxHQUFHLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQzs7Ozs7Ozs7OztDQUNyQzs7QUFFRCxTQUFlLGlCQUFpQixDQUFFLE1BQU0sRUFBRSxJQUFJOzs7O2NBQ3hDLElBQUksQ0FBQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFBOzs7OztBQUNqQyw0QkFBSSxLQUFLLENBQUMsK0JBQStCLENBQUMsQ0FBQzs7Ozs7QUFJN0MsNEJBQUksS0FBSyxDQUFDLGtDQUFrQyxDQUFDLENBQUM7Ozs7eUNBR3hDLFlBQVksQ0FBQyxNQUFNLENBQUM7OzthQUV0QixJQUFJLENBQUMsU0FBUzs7Ozs7QUFDaEIsNEJBQUksS0FBSyxDQUFDLHNDQUFzQyxDQUFDLENBQUM7O3lDQUM1QyxrQkFBa0IsQ0FBQyxNQUFNLENBQUM7Ozs7Ozs7O3lDQUUxQixjQUFjLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQzs7Ozs7OztDQUVyQzs7QUFFRCxTQUFlLGtCQUFrQixDQUFFLE1BQU07Ozs7YUFDbkMsTUFBTTs7Ozs7O3lDQUNGLE1BQU0sQ0FBQyxLQUFLLEVBQUU7Ozs7Ozs7Q0FFdkI7O0FBRUQsU0FBZSxjQUFjLENBQUUsTUFBTSxFQUFFLElBQUk7Ozs7WUFDcEMsTUFBTTs7Ozs7Ozs7O0FBRVgsNEJBQUksS0FBSyxDQUFDLDJCQUEyQixDQUFDLENBQUM7Ozt5Q0FFL0IsWUFBWSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUM7Ozs7eUNBQzFCLE1BQU0sQ0FBQyxLQUFLLEVBQUU7Ozs7Ozs7Ozs7QUFFcEIsNEJBQUksSUFBSSxnQkFBSyxDQUFDO0FBQ2QsNEJBQUksSUFBSSxDQUFDLDJDQUEyQyxDQUFDLENBQUM7Ozs7Ozs7Q0FFekQ7O0FBRUQsU0FBZSxZQUFZLENBQUUsTUFBTTs7OztZQUM1QixNQUFNOzs7Ozs7Ozs7QUFFWCw0QkFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQzs7eUNBQy9CLE1BQU0sQ0FBQyxRQUFRLEVBQUU7Ozs7Ozs7Q0FDeEI7O0FBRUQsU0FBZSxZQUFZLENBQUcsTUFBTSxFQUFFLElBQUk7Ozs7Y0FDcEMsSUFBSSxDQUFDLEdBQUcsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFBOzs7Ozs7eUNBQ3JCLE1BQU0sQ0FBQyxjQUFjLENBQUMsa0JBQUssUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDOzs7Ozs7O0NBRXRFOztBQUVELFNBQWUsc0JBQXNCLENBQUUsTUFBTTtNQUFFLGdCQUFnQix5REFBRyxJQUFJOzs7O2FBQ2hFLGdCQUFnQjs7Ozs7O3lDQUNaLE1BQU0sQ0FBQyxVQUFVLEVBQUU7Ozs7Ozs7Q0FFNUI7O1FBR1EsU0FBUyxHQUFULFNBQVM7UUFBRSxTQUFTLEdBQVQsU0FBUztRQUFFLGVBQWUsR0FBZixlQUFlO1FBQUUsaUJBQWlCLEdBQWpCLGlCQUFpQjtRQUN4RCxjQUFjLEdBQWQsY0FBYztRQUFFLGlCQUFpQixHQUFqQixpQkFBaUI7UUFBRSxzQkFBc0IsR0FBdEIsc0JBQXNCIiwiZmlsZSI6ImxpYi9zaW11bGF0b3ItbWFuYWdlbWVudC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgZ2V0U2ltdWxhdG9yIH0gZnJvbSAnYXBwaXVtLWlvcy1zaW11bGF0b3InO1xuaW1wb3J0IHsgY3JlYXRlRGV2aWNlLCBnZXREZXZpY2VzIH0gZnJvbSAnbm9kZS1zaW1jdGwnO1xuaW1wb3J0IHsgcmV0cnlJbnRlcnZhbCB9IGZyb20gJ2FzeW5jYm94JztcbmltcG9ydCB7IGZzIH0gZnJvbSAnYXBwaXVtLXN1cHBvcnQnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBsb2cgZnJvbSAnLi9sb2dnZXInO1xuXG5cbmNvbnN0IERFRkFVTFRfU0FGQVJJX1VSTCA9ICdodHRwOi8vYXBwaXVtLmlvJztcblxuLy8gcmV0dXJucyB0cnVlIGlmIHNpbSBpcyBib290ZWQuIGZhbHNlIGlmIG5vdCBib290ZWQgb3IgZG9lc250IGV4aXN0XG5hc3luYyBmdW5jdGlvbiBzaW1Cb290ZWQgKHNpbSkge1xuICBsZXQgc3RhdCA9IGF3YWl0IHNpbS5zdGF0KCk7XG4gIHJldHVybiBzdGF0LnN0YXRlID09PSAnQm9vdGVkJztcbn1cblxuLy8gcmV0dXJucyBzaW0gZm9yIGRlc2lyZWQgY2Fwc1xuYXN5bmMgZnVuY3Rpb24gY3JlYXRlU2ltIChjYXBzLCBzZXNzaW9uSWQpIHtcbiAgbGV0IG5hbWUgPSBgYXBwaXVtVGVzdC0ke3Nlc3Npb25JZH1gO1xuICBsZXQgdWRpZCA9IGF3YWl0IGNyZWF0ZURldmljZShuYW1lLCBjYXBzLmRldmljZU5hbWUsIGNhcHMucGxhdGZvcm1WZXJzaW9uKTtcbiAgcmV0dXJuIGF3YWl0IGdldFNpbXVsYXRvcih1ZGlkKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0RXhpc3RpbmdTaW0gKGRldmljZU5hbWUsIHBsYXRmb3JtVmVyc2lvbikge1xuICBsZXQgZGV2aWNlcyA9IGF3YWl0IGdldERldmljZXMocGxhdGZvcm1WZXJzaW9uKTtcbiAgZm9yIChsZXQgZGV2aWNlIG9mIF8udmFsdWVzKGRldmljZXMpKSB7XG4gICAgaWYgKGRldmljZS5uYW1lID09PSBkZXZpY2VOYW1lKSB7XG4gICAgICByZXR1cm4gYXdhaXQgZ2V0U2ltdWxhdG9yKGRldmljZS51ZGlkKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHN5c3RlbUxvZ0V4aXN0cyAoc2ltKSB7XG4gIGNvbnN0IFRSSUVTID0gNTAwO1xuICBjb25zdCBJTlRFUlZBTCA9IDIwMDtcblxuICBsZXQgbG9nRmlsZSA9IHBhdGgucmVzb2x2ZShzaW0uZ2V0TG9nRGlyKCksICdzeXN0ZW0ubG9nJyk7XG4gIHJldHVybiByZXRyeUludGVydmFsKFRSSUVTLCBJTlRFUlZBTCwgYXN5bmMgKCkgPT4ge1xuICAgIGlmICghYXdhaXQgZnMuZXhpc3RzKGxvZ0ZpbGUpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3N5c3RlbS5sb2cgZG9lcyBub3QgZXhpc3QnKTtcbiAgICB9XG4gIH0pO1xufVxuXG5hc3luYyBmdW5jdGlvbiBsYXVuY2hTYWZhcmlPblNpbSAoaW5pdGlhbFVybCwgc2ltKSB7XG4gIGlmICghaW5pdGlhbFVybCkge1xuICAgIGluaXRpYWxVcmwgPSBERUZBVUxUX1NBRkFSSV9VUkw7XG4gIH1cblxuICByZXR1cm4gYXdhaXQgc2ltLm9wZW5VcmwoaW5pdGlhbFVybCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHJ1blNpbXVsYXRvclJlc2V0IChkZXZpY2UsIG9wdHMpIHtcbiAgaWYgKG9wdHMubm9SZXNldCAmJiAhb3B0cy5mdWxsUmVzZXQpIHtcbiAgICBsb2cuZGVidWcoJ1Jlc2V0IG5vdCBzZXQsIG5vdCBlbmRpbmcgc2ltJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbG9nLmRlYnVnKCdSdW5uaW5nIGlPUyBzaW11bGF0b3IgcmVzZXQgZmxvdycpO1xuXG4gIC8vIFRoZSBzaW11bGF0b3IgcHJvY2VzcyBtdXN0IGJlIGVuZGVkIGJlZm9yZSB3ZSBkZWxldGUgYXBwbGljYXRpb25zLlxuICBhd2FpdCBlbmRTaW11bGF0b3IoZGV2aWNlKTtcblxuICBpZiAob3B0cy5mdWxsUmVzZXQpIHtcbiAgICBsb2cuZGVidWcoJ0Z1bGwgcmVzZXQgaXMgb24uIENsZWFuaW5nIHNpbXVsYXRvcicpO1xuICAgIGF3YWl0IGZ1bGxSZXNldFNpbXVsYXRvcihkZXZpY2UpO1xuICB9IGVsc2Uge1xuICAgIGF3YWl0IHJlc2V0U2ltdWxhdG9yKGRldmljZSwgb3B0cyk7XG4gIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gZnVsbFJlc2V0U2ltdWxhdG9yIChkZXZpY2UpIHtcbiAgaWYgKGRldmljZSkge1xuICAgIGF3YWl0IGRldmljZS5jbGVhbigpO1xuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHJlc2V0U2ltdWxhdG9yIChkZXZpY2UsIG9wdHMpIHtcbiAgaWYgKCFkZXZpY2UpIHJldHVybjtcblxuICBsb2cuZGVidWcoJ0NsZWFuaW5nIHNpbXVsYXRvciBzdGF0ZS4nKTtcbiAgdHJ5IHtcbiAgICBhd2FpdCBjbGVhckFwcERhdGEoZGV2aWNlLCBvcHRzKTtcbiAgICBhd2FpdCBkZXZpY2UuY2xlYW4oKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgbG9nLndhcm4oZXJyKTtcbiAgICBsb2cud2FybignQ291bGQgbm90IHJlc2V0IHNpbXVsYXRvci4gTGVhdmluZyBhcyBpcy4nKTtcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBlbmRTaW11bGF0b3IgKGRldmljZSkge1xuICBpZiAoIWRldmljZSkgcmV0dXJuO1xuXG4gIGxvZy5kZWJ1ZygnU2h1dHRpbmcgZG93biBzaW11bGF0b3InKTtcbiAgYXdhaXQgZGV2aWNlLnNodXRkb3duKCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGNsZWFyQXBwRGF0YSAgKGRldmljZSwgb3B0cykge1xuICBpZiAob3B0cy5hcHAgJiYgb3B0cy5idW5kbGVJZCkge1xuICAgIGF3YWl0IGRldmljZS5jbGVhbkN1c3RvbUFwcChwYXRoLmJhc2VuYW1lKG9wdHMuYXBwKSwgb3B0cy5idW5kbGVJZCk7XG4gIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gaXNvbGF0ZVNpbXVsYXRvckRldmljZSAoZGV2aWNlLCBpc29sYXRlU2ltRGV2aWNlID0gdHJ1ZSkge1xuICBpZiAoaXNvbGF0ZVNpbURldmljZSkge1xuICAgIGF3YWl0IGRldmljZS5pc29sYXRlU2ltKCk7XG4gIH1cbn1cblxuXG5leHBvcnQgeyBzaW1Cb290ZWQsIGNyZWF0ZVNpbSwgc3lzdGVtTG9nRXhpc3RzLCBsYXVuY2hTYWZhcmlPblNpbSxcbiAgICAgICAgIGdldEV4aXN0aW5nU2ltLCBydW5TaW11bGF0b3JSZXNldCwgaXNvbGF0ZVNpbXVsYXRvckRldmljZSB9O1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLiJ9

'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _url2 = require('url');

var _url3 = _interopRequireDefault(_url2);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _asyncbox = require('asyncbox');

var _teen_process = require('teen_process');

var _appiumBaseDriver = require('appium-base-driver');

var _appiumSupport = require('appium-support');

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _appiumLogger = require('appium-logger');

var _utilsJs = require('./utils.js');

var _requestPromise = require('request-promise');

var _requestPromise2 = _interopRequireDefault(_requestPromise);

var xcodeLog = (0, _appiumLogger.getLogger)('Xcode');
var iproxyLog = (0, _appiumLogger.getLogger)('iProxy');

var BOOTSTRAP_PATH = _path2['default'].resolve(__dirname, '..', '..', 'WebDriverAgent');
var WDA_BUNDLE_ID = 'com.apple.test.WebDriverAgentRunner-Runner';
var DEFAULT_SIGNING_ID = "iPhone Developer";
var WDA_LAUNCH_TIMEOUT = 60 * 1000;
var IPROXY_TIMEOUT = 5000;
var WDA_AGENT_PORT = 8100;
var WDA_BASE_URL = 'http://localhost';

var WebDriverAgent = (function () {

  // agentPath (optional): Path to WebdriverAgent Executable (inside WebDriverAgent.app)

  function WebDriverAgent(xcodeVersion) {
    var args = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    _classCallCheck(this, WebDriverAgent);

    this.xcodeVersion = xcodeVersion;

    this.device = args.device;
    this.platformVersion = args.platformVersion;
    this.host = args.host;
    this.realDevice = !!args.realDevice;

    this.setWDAPaths(args.bootstrapPath, args.agentPath);

    this.wdaLocalPort = args.wdaLocalPort;
    this.showXcodeLog = !!args.showXcodeLog;
    this.xcodeConfigFile = args.xcodeConfigFile;
    this.xcodeOrgId = args.xcodeOrgId;
    this.xcodeSigningId = args.xcodeSigningId || DEFAULT_SIGNING_ID;
    this.keychainPath = args.keychainPath;
    this.keychainPassword = args.keychainPassword;

    this.usePrebuiltWDA = args.usePrebuiltWDA;
    this.webDriverAgentUrl = args.webDriverAgentUrl;

    this.expectIProxyErrors = true;

    this.wdaLaunchTimeout = args.wdaLaunchTimeout || WDA_LAUNCH_TIMEOUT;
    this.wdaConnectionTimeout = args.wdaConnectionTimeout;
  }

  _createClass(WebDriverAgent, [{
    key: 'setWDAPaths',
    value: function setWDAPaths(bootstrapPath, agentPath) {
      // allow the user to specify a place for WDA. This is undocumented and
      // only here for the purposes of testing development of WDA
      this.bootstrapPath = bootstrapPath || BOOTSTRAP_PATH;
      _logger2['default'].info('Using WDA path: \'' + this.bootstrapPath + '\'');

      // for backward compatibility we need to be able to specify agentPath too
      this.agentPath = agentPath || _path2['default'].resolve(this.bootstrapPath, 'WebDriverAgent.xcodeproj');
      _logger2['default'].info('Using WDA agent: \'' + this.agentPath + '\'');
    }
  }, {
    key: 'uninstall',
    value: function uninstall() {
      return _regeneratorRuntime.async(function uninstall$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug('Removing WDA application from device');
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(this.device.removeApp(WDA_BUNDLE_ID));

          case 3:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'launch',
    value: function launch(sessionId) {
      return _regeneratorRuntime.async(function launch$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!this.webDriverAgentUrl) {
              context$2$0.next = 5;
              break;
            }

            _logger2['default'].info('Using provided WebdriverAgent at \'' + this.webDriverAgentUrl + '\'');
            this.url = this.webDriverAgentUrl;
            this.setupProxy(sessionId);
            return context$2$0.abrupt('return', this.webDriverAgentUrl);

          case 5:

            _logger2['default'].info('Launching WebDriverAgent on the device');

            context$2$0.next = 8;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(this.agentPath));

          case 8:
            if (context$2$0.sent) {
              context$2$0.next = 10;
              break;
            }

            throw new Error('Trying to use WebDriverAgent project at \'' + this.agentPath + '\' but the ' + 'file does not exist');

          case 10:
            context$2$0.next = 12;
            return _regeneratorRuntime.awrap(this.checkForDependencies());

          case 12:
            context$2$0.next = 14;
            return _regeneratorRuntime.awrap(this.killHangingProcesses());

          case 14:
            context$2$0.next = 16;
            return _regeneratorRuntime.awrap(this.createXcodeBuildSubProcess());

          case 16:
            this.xcodebuild = context$2$0.sent;

            if (!this.realDevice) {
              context$2$0.next = 21;
              break;
            }

            this.iproxy = this.createiProxySubProcess(this.url.port, WDA_AGENT_PORT);
            context$2$0.next = 21;
            return _regeneratorRuntime.awrap(this.startiproxy());

          case 21:

            this.setupProxy(sessionId);

            // start the xcodebuild process
            context$2$0.next = 24;
            return _regeneratorRuntime.awrap(this.startXcodebuild());

          case 24:
            return context$2$0.abrupt('return');

          case 25:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'setupProxy',
    value: function setupProxy(sessionId) {
      this.jwproxy = new _appiumBaseDriver.JWProxy({
        server: this.url.hostname,
        port: this.url.port,
        base: '',
        timeout: this.wdaConnectionTimeout
      });
      this.jwproxy.sessionId = sessionId;
      this.proxyReqRes = this.jwproxy.proxyReqRes.bind(this.jwproxy);
    }
  }, {
    key: 'checkForDependencies',
    value: function checkForDependencies() {
      var carthagePath;
      return _regeneratorRuntime.async(function checkForDependencies$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.prev = 0;
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.which('carthage'));

          case 3:
            carthagePath = context$2$0.sent;

            _logger2['default'].debug('Carthage found: ' + carthagePath);
            context$2$0.next = 10;
            break;

          case 7:
            context$2$0.prev = 7;
            context$2$0.t0 = context$2$0['catch'](0);

            _logger2['default'].warn('Carthage not found. Install using `brew install carthage`');

          case 10:
            context$2$0.next = 12;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.hasAccess(this.bootstrapPath + '/Carthage'));

          case 12:
            if (context$2$0.sent) {
              context$2$0.next = 16;
              break;
            }

            _logger2['default'].debug('Running WebDriverAgent bootstrap script to install dependencies');
            context$2$0.next = 16;
            return _regeneratorRuntime.awrap((0, _teen_process.exec)('/bin/bash', ['Scripts/bootstrap.sh', '-d'], { cwd: this.bootstrapPath }));

          case 16:
            context$2$0.next = 18;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.hasAccess(this.bootstrapPath + '/Resources'));

          case 18:
            if (context$2$0.sent) {
              context$2$0.next = 22;
              break;
            }

            _logger2['default'].debug('Creating WebDriverAgent resources directory');
            context$2$0.next = 22;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.mkdir(this.bootstrapPath + '/Resources'));

          case 22:
            context$2$0.next = 24;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.hasAccess(this.bootstrapPath + '/Resources/WebDriverAgent.bundle'));

          case 24:
            if (context$2$0.sent) {
              context$2$0.next = 28;
              break;
            }

            _logger2['default'].debug('Creating WebDriverAgent resource bundle directory');
            context$2$0.next = 28;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.mkdir(this.bootstrapPath + '/Resources/WebDriverAgent.bundle'));

          case 28:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[0, 7]]);
    }
  }, {
    key: 'getXcodeBuildCommand',
    value: function getXcodeBuildCommand() {
      var _args;

      var cmd = 'xcodebuild';
      var args = undefined;

      // figure out the targets for xcodebuild
      if (this.xcodeVersion.major < 8) {
        if (this.usePrebuiltWDA) {
          var msg = '\'usePrebuiltWDA\' set, but on Xcode ' + ('\'' + this.xcodeVersion.versionString + '\', so skipping, as it ') + 'needs a version >= 8';
          _logger2['default'].warn(msg);
        }
        args = ['build', 'test'];
      } else {
        args = this.usePrebuiltWDA ? ['test-without-building'] : ['build-for-testing', 'test-without-building'];
      }

      // add the rest of the arguments for the xcodebuild command
      var genericArgs = ['-project', this.agentPath, '-scheme', 'WebDriverAgentRunner', '-destination', 'id=' + this.device.udid, '-configuration', 'Debug'];
      (_args = args).push.apply(_args, genericArgs);

      if (this.realDevice && this.xcodeConfigFile) {
        _logger2['default'].debug('Using Xcode configuration file: \'' + this.xcodeConfigFile + '\'');
        args.push('-xcconfig', this.xcodeConfigFile);
      }

      return { cmd: cmd, args: args };
    }
  }, {
    key: 'setRealDeviceSecurity',
    value: function setRealDeviceSecurity(keychainPath, keychainPassword) {
      return _regeneratorRuntime.async(function setRealDeviceSecurity$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug('Setting security for iOS device');
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap((0, _teen_process.exec)('security', ['-v', 'list-keychains', '-s', keychainPath]));

          case 3:
            context$2$0.next = 5;
            return _regeneratorRuntime.awrap((0, _teen_process.exec)('security', ['-v', 'unlock-keychain', '-p', keychainPassword, keychainPath]));

          case 5:
            context$2$0.next = 7;
            return _regeneratorRuntime.awrap((0, _teen_process.exec)('security', ['set-keychain-settings', '-t', '3600', '-l', keychainPath]));

          case 7:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'createXcodeBuildSubProcess',
    value: function createXcodeBuildSubProcess() {
      var _getXcodeBuildCommand, cmd, args, xcodebuild, logXcodeOutput;

      return _regeneratorRuntime.async(function createXcodeBuildSubProcess$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!this.realDevice) {
              context$2$0.next = 8;
              break;
            }

            if (!(this.keychainPath && this.keychainPassword)) {
              context$2$0.next = 4;
              break;
            }

            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this.setRealDeviceSecurity(this.keychainPath, this.keychainPassword));

          case 4:
            if (!(this.xcodeOrgId && this.xcodeSigningId && !this.xcodeConfigFile)) {
              context$2$0.next = 8;
              break;
            }

            context$2$0.next = 7;
            return _regeneratorRuntime.awrap((0, _utilsJs.generateXcodeConfigFile)(this.xcodeOrgId, this.xcodeSigningId));

          case 7:
            this.xcodeConfigFile = context$2$0.sent;

          case 8:
            _getXcodeBuildCommand = this.getXcodeBuildCommand();
            cmd = _getXcodeBuildCommand.cmd;
            args = _getXcodeBuildCommand.args;

            _logger2['default'].debug('Beginning test with command \'' + cmd + ' ' + args.join(' ') + '\' ' + ('in directory \'' + this.bootstrapPath + '\''));
            xcodebuild = new _teen_process.SubProcess(cmd, args, { cwd: this.bootstrapPath });
            logXcodeOutput = this.showXcodeLog;

            xcodebuild.on('output', function (stdout, stderr) {
              var out = stdout || stderr;
              // we want to pull out the log file that is created, and highlight it
              // for diagnostic purposes
              if (out.indexOf('Writing diagnostic log for test session to') !== -1) {
                // pull out the first line that begins with the path separator
                // which *should* be the line indicating the log file generated
                var logLocation = _lodash2['default'].first(_lodash2['default'].remove(out.trim().split('\n'), function (v) {
                  return v.indexOf(_path2['default'].sep) === 0;
                }));
                _logger2['default'].debug('Log file for xcodebuild test: ' + logLocation);
              }

              // if we have an error we want to output the logs
              // otherwise the failure is inscrutible
              // but do not log permission errors from trying to write to attachments folder
              if (out.indexOf('Error Domain=') !== -1 && out.indexOf('Error writing attachment data to file') === -1) {
                logXcodeOutput = true;

                // terrible hack to handle case where xcode return 0 but is failing
                xcodebuild._wda_error_occurred = true;
              }

              if (logXcodeOutput) {
                xcodeLog.info(out);
              }
            });

            return context$2$0.abrupt('return', xcodebuild);

          case 16:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'createiProxySubProcess',
    value: function createiProxySubProcess(localport, deviceport) {
      _logger2['default'].debug('Starting iproxy to forward traffic from local port ' + localport + ' to device port ' + deviceport + ' over USB');
      return new _teen_process.SubProcess('iproxy', [localport, deviceport, this.device.udid]);
    }
  }, {
    key: 'startXcodebuild',
    value: function startXcodebuild() {
      return _regeneratorRuntime.async(function startXcodebuild$(context$2$0) {
        var _this = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(new _bluebird2['default'](function (resolve, reject) {
              _this.xcodebuild.on('exit', function (code, signal) {
                _logger2['default'].info('xcodebuild exited with code \'' + code + '\' and signal \'' + signal + '\'');
                _this.xcodebuild.processExited = true;
                if (_this.xcodebuild._wda_error_occurred || !signal && code !== 0) {
                  return reject(new Error('xcodebuild failed with code ' + code));
                }
              });

              return (function callee$3$0() {
                var startTime, msg;
                return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                  while (1) switch (context$4$0.prev = context$4$0.next) {
                    case 0:
                      context$4$0.prev = 0;
                      startTime = process.hrtime();
                      context$4$0.next = 4;
                      return _regeneratorRuntime.awrap(this.xcodebuild.start());

                    case 4:
                      context$4$0.next = 6;
                      return _regeneratorRuntime.awrap(this.waitForStart(startTime));

                    case 6:
                      resolve();
                      context$4$0.next = 14;
                      break;

                    case 9:
                      context$4$0.prev = 9;
                      context$4$0.t0 = context$4$0['catch'](0);
                      msg = 'Unable to start WebDriverAgent: ' + context$4$0.t0;

                      _logger2['default'].error(msg);
                      reject(new Error(msg));

                    case 14:
                    case 'end':
                      return context$4$0.stop();
                  }
                }, null, _this, [[0, 9]]);
              })();
            }));

          case 2:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 3:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'waitForStart',
    value: function waitForStart(startTime) {
      var retries, endTime, startupTime;
      return _regeneratorRuntime.async(function waitForStart$(context$2$0) {
        var _this2 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            // try to connect once every 0.5 seconds, until `wdaLaunchTimeout` is up
            _logger2['default'].debug('Waiting up to ' + this.wdaLaunchTimeout + 'ms for WebDriverAgent to start');
            context$2$0.prev = 1;
            retries = parseInt(this.wdaLaunchTimeout / 500, 10);
            context$2$0.next = 5;
            return _regeneratorRuntime.awrap((0, _asyncbox.retryInterval)(retries, 500, function callee$2$0() {
              var opts, res;
              return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    if (!this.xcodebuild.processExited) {
                      context$3$0.next = 2;
                      break;
                    }

                    return context$3$0.abrupt('return');

                  case 2:
                    context$3$0.prev = 2;
                    opts = {
                      method: 'GET',
                      uri: this.url.href + 'status',
                      headers: 'Content-Type: application/json;charset=UTF-8, accept: application/json',
                      forever: true,
                      json: true
                    };
                    context$3$0.next = 6;
                    return _regeneratorRuntime.awrap((0, _requestPromise2['default'])(opts));

                  case 6:
                    res = context$3$0.sent;

                    if (!(res.status !== 0)) {
                      context$3$0.next = 9;
                      break;
                    }

                    throw new Error('Received non-zero status code from WDA server: \'' + res.status + '\'');

                  case 9:
                    if (res.value && res.value.ios && res.value.ios.ip) {
                      this.agentUrl = res.value.ios.ip;
                      _logger2['default'].debug('WebDriverAgent running on ip \'' + this.agentUrl + '\'');
                    }
                    context$3$0.next = 15;
                    break;

                  case 12:
                    context$3$0.prev = 12;
                    context$3$0.t0 = context$3$0['catch'](2);
                    throw new Error('Unable to connect to running WebDriverAgent: ' + context$3$0.t0.message);

                  case 15:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this2, [[2, 12]]);
            }));

          case 5:
            endTime = process.hrtime(startTime);
            startupTime = parseInt((endTime[0] * 1e9 + endTime[1]) / 1e6, 10);

            _logger2['default'].debug('WebDriverAgent successfully started after ' + startupTime + 'ms');
            context$2$0.next = 14;
            break;

          case 10:
            context$2$0.prev = 10;
            context$2$0.t0 = context$2$0['catch'](1);

            // at this point, if we have not had any errors from xcode itself (reported
            // elsewhere), we can let this go through and try to create the session
            _logger2['default'].debug(context$2$0.t0.message);
            _logger2['default'].warn('Getting status of WebDriverAgent on device timed out. Continuing');

          case 14:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[1, 10]]);
    }
  }, {
    key: 'startiproxy',
    value: function startiproxy() {
      return _regeneratorRuntime.async(function startiproxy$(context$2$0) {
        var _this3 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(new _bluebird2['default'](function (resolve, reject) {
              _this3.iproxy.on('exit', function (code) {
                _logger2['default'].debug('iproxy exited with code \'' + code + '\'');
                if (code) {
                  return reject(new Error('iproxy exited with code \'' + code + '\''));
                }
              });
              _this3.iproxy.on('output', function (stdout, stderr) {
                // do nothing if we expect errors
                if (_this3.expectIProxyErrors) return;

                var out = stdout || stderr;
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                  for (var _iterator = _getIterator(out.split('\n')), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var line = _step.value;

                    if (!line.length) continue;

                    if (line.indexOf('Resource temporarily unavailable') !== -1) {
                      // this generally happens when WDA does not respond,
                      // so print a more useful message
                      _logger2['default'].debug('Connection to WDA timed out');
                    } else {
                      iproxyLog.debug(line);
                    }
                  }
                } catch (err) {
                  _didIteratorError = true;
                  _iteratorError = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion && _iterator['return']) {
                      _iterator['return']();
                    }
                  } finally {
                    if (_didIteratorError) {
                      throw _iteratorError;
                    }
                  }
                }
              });

              return (function callee$3$0() {
                return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                  while (1) switch (context$4$0.prev = context$4$0.next) {
                    case 0:
                      context$4$0.prev = 0;
                      context$4$0.next = 3;
                      return _regeneratorRuntime.awrap(this.iproxy.start(IPROXY_TIMEOUT));

                    case 3:
                      resolve();
                      context$4$0.next = 10;
                      break;

                    case 6:
                      context$4$0.prev = 6;
                      context$4$0.t0 = context$4$0['catch'](0);

                      _logger2['default'].error('Error starting iproxy: \'' + context$4$0.t0.message + '\'');
                      reject(new Error('Unable to start iproxy. Is it installed?'));

                    case 10:
                    case 'end':
                      return context$4$0.stop();
                  }
                }, null, _this3, [[0, 6]]);
              })();
            }));

          case 2:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 3:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'killHangingProcesses',
    value: function killHangingProcesses() {
      var procNames, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, proc;

      return _regeneratorRuntime.async(function killHangingProcesses$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug('Killing hanging processes');
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap((0, _utilsJs.killAppUsingAppName)(this.device.udid, 'xcodebuild'));

          case 3:
            procNames = this.realDevice ? ['iproxy'] : ['XCTRunner'];
            _iteratorNormalCompletion2 = true;
            _didIteratorError2 = false;
            _iteratorError2 = undefined;
            context$2$0.prev = 7;
            _iterator2 = _getIterator(procNames);

          case 9:
            if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
              context$2$0.next = 16;
              break;
            }

            proc = _step2.value;
            context$2$0.next = 13;
            return _regeneratorRuntime.awrap((0, _utilsJs.killAppUsingAppName)(this.device.udid, proc));

          case 13:
            _iteratorNormalCompletion2 = true;
            context$2$0.next = 9;
            break;

          case 16:
            context$2$0.next = 22;
            break;

          case 18:
            context$2$0.prev = 18;
            context$2$0.t0 = context$2$0['catch'](7);
            _didIteratorError2 = true;
            _iteratorError2 = context$2$0.t0;

          case 22:
            context$2$0.prev = 22;
            context$2$0.prev = 23;

            if (!_iteratorNormalCompletion2 && _iterator2['return']) {
              _iterator2['return']();
            }

          case 25:
            context$2$0.prev = 25;

            if (!_didIteratorError2) {
              context$2$0.next = 28;
              break;
            }

            throw _iteratorError2;

          case 28:
            return context$2$0.finish(25);

          case 29:
            return context$2$0.finish(22);

          case 30:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[7, 18, 22, 30], [23,, 25, 29]]);
    }
  }, {
    key: 'quit',
    value: function quit() {
      var killProcess;
      return _regeneratorRuntime.async(function quit$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            killProcess = function killProcess(name, proc) {
              return _regeneratorRuntime.async(function killProcess$(context$3$0) {
                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    if (!(proc && proc.proc)) {
                      context$3$0.next = 22;
                      break;
                    }

                    _logger2['default'].info('Shutting down ' + name + ' process (pid ' + proc.proc.pid + ')');
                    context$3$0.prev = 2;
                    context$3$0.next = 5;
                    return _regeneratorRuntime.awrap(proc.stop('SIGTERM'));

                  case 5:
                    context$3$0.next = 22;
                    break;

                  case 7:
                    context$3$0.prev = 7;
                    context$3$0.t0 = context$3$0['catch'](2);

                    if (!(context$3$0.t0.message.indexOf('Process didn\'t end after') === -1)) {
                      context$3$0.next = 11;
                      break;
                    }

                    throw context$3$0.t0;

                  case 11:
                    _logger2['default'].debug(name + ' process did not end in a timely fashion: \'' + context$3$0.t0.message + '\'. ' + 'Sending \'SIGKILL\'...');
                    context$3$0.prev = 12;
                    context$3$0.next = 15;
                    return _regeneratorRuntime.awrap(proc.stop('SIGKILL'));

                  case 15:
                    context$3$0.next = 22;
                    break;

                  case 17:
                    context$3$0.prev = 17;
                    context$3$0.t1 = context$3$0['catch'](12);

                    if (!(context$3$0.t1.message.indexOf('not currently running') !== -1)) {
                      context$3$0.next = 21;
                      break;
                    }

                    return context$3$0.abrupt('return');

                  case 21:
                    throw context$3$0.t1;

                  case 22:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, this, [[2, 7], [12, 17]]);
            };

            _logger2['default'].info('Shutting down sub-processes');

            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(killProcess('xcodebuild', this.xcodebuild));

          case 4:
            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(killProcess('iproxy', this.iproxy));

          case 6:

            if (this.jwproxy) {
              this.jwproxy.sessionId = null;
            }

            this.expectIProxyErrors = true;

          case 8:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'url',
    get: function get() {
      if (!this._url) {
        if (this.realDevice && this.wdaLocalPort) {
          this._url = _url3['default'].parse(WDA_BASE_URL + ':' + this.wdaLocalPort);
        } else {
          this._url = _url3['default'].parse(WDA_BASE_URL + ':' + WDA_AGENT_PORT);
        }
      }
      return this._url;
    },
    set: function set(_url) {
      this._url = _url3['default'].parse(_url);
    }
  }, {
    key: 'fullyStarted',
    get: function get() {
      return this.expectIProxyErrors;
    },
    set: function set() {
      var started = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];

      this.expectIProxyErrors = started;
    }
  }]);

  return WebDriverAgent;
})();

exports['default'] = WebDriverAgent;
exports.WebDriverAgent = WebDriverAgent;
exports.WDA_BUNDLE_ID = WDA_BUNDLE_ID;
exports.BOOTSTRAP_PATH = BOOTSTRAP_PATH;

// make sure that the WDA library has been built

//kill all hanging processes

// wrap the start procedure in a promise so that we can catch, and report,
// any startup errors that are thrown as events

// there has been an error elsewhere and we need to short-circuit

// must get [s, ns] array into ms

// the process ended but for some reason we were not informed
//# sourceMappingURL=data:application/json;charset=utf8;base64,

require('source-map-support').install();

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _ = require('../..');

var _libLogger = require('../../lib/logger');

var _libLogger2 = _interopRequireDefault(_libLogger);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _appiumSupport = require('appium-support');

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _sinonChai = require('sinon-chai');

var _sinonChai2 = _interopRequireDefault(_sinonChai);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

_chai2['default'].should();
_chai2['default'].use(_sinonChai2['default']);

describe('dynamic bootstrap', function () {
  var _this = this;

  function envFromCode(code) {
    // let's pick out the dynamic env from the new bootsrap file with this
    // regex so we can be sure it matches what we expect
    var envRe = /^bootstrap\((\{[^]+})\);$/m;
    var envStr = envRe.exec(code)[1];
    var env = JSON.parse(envStr);
    return env;
  }

  function checkCode(code) {
    var env;
    return _regeneratorRuntime.async(function checkCode$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          env = envFromCode(code);

          env.nodePath.should.equal(process.execPath);
          env.commandProxyClientPath.should.exist;
          env.instrumentsSock.should.exist;
          context$2$0.next = 6;
          return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(env.commandProxyClientPath));

        case 6:
          context$2$0.sent.should.be['true'];
          return context$2$0.abrupt('return', env);

        case 8:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  }

  before(function () {
    _sinon2['default'].spy(_libLogger2['default'], 'debug');
  });

  after(function () {
    _libLogger2['default'].debug.restore();
  });

  it('should generate dynamic bootstrap', function callee$1$0() {
    var bootstrapFile, code, env;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          process.env.APPIUM_BOOTSTRAP_DIR = _path2['default'].resolve('/', 'tmp', 'appium-uiauto', 'test', 'unit', 'bootstrap');
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(process.env.APPIUM_BOOTSTRAP_DIR));

        case 3:
          if (!context$2$0.sent) {
            context$2$0.next = 6;
            break;
          }

          context$2$0.next = 6;
          return _regeneratorRuntime.awrap(_appiumSupport.fs.rimraf(process.env.APPIUM_BOOTSTRAP_DIR));

        case 6:
          context$2$0.next = 8;
          return _regeneratorRuntime.awrap((0, _.prepareBootstrap)());

        case 8:
          bootstrapFile = context$2$0.sent;

          bootstrapFile.should.match(/\/tmp\/appium-uiauto\/test\/unit\/bootstrap\/bootstrap\-.*\.js/);
          context$2$0.next = 12;
          return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(bootstrapFile, 'utf8'));

        case 12:
          code = context$2$0.sent;
          context$2$0.next = 15;
          return _regeneratorRuntime.awrap(checkCode(code));

        case 15:
          _libLogger2['default'].debug.calledWithMatch(/Creating or overwriting dynamic bootstrap/).should.be['true'];
          _libLogger2['default'].debug.reset();

          // second call: should reuse bootstrap file
          context$2$0.next = 19;
          return _regeneratorRuntime.awrap((0, _.prepareBootstrap)());

        case 19:
          bootstrapFile = context$2$0.sent;

          bootstrapFile.should.match(/\/tmp\/appium-uiauto\/test\/unit\/bootstrap\/bootstrap\-.*\.js/);
          context$2$0.next = 23;
          return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(bootstrapFile, 'utf8'));

        case 23:
          code = context$2$0.sent;
          context$2$0.next = 26;
          return _regeneratorRuntime.awrap(checkCode(code));

        case 26:
          _libLogger2['default'].debug.calledWithMatch(/Reusing dynamic bootstrap/).should.be['true'];
          _libLogger2['default'].debug.reset();

          // third call using custom socket path: should create different bootstrap file
          context$2$0.next = 30;
          return _regeneratorRuntime.awrap((0, _.prepareBootstrap)({ sock: '/tmp/abcd/sock' }));

        case 30:
          bootstrapFile = context$2$0.sent;

          bootstrapFile.should.match(/\/tmp\/appium-uiauto\/test\/unit\/bootstrap\/bootstrap\-.*\.js/);
          context$2$0.next = 34;
          return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(bootstrapFile, 'utf8'));

        case 34:
          code = context$2$0.sent;
          context$2$0.next = 37;
          return _regeneratorRuntime.awrap(checkCode(code, { isVerbose: true, gracePeriod: 5 }));

        case 37:
          env = context$2$0.sent;

          env.instrumentsSock.should.equal('/tmp/abcd/sock');
          _libLogger2['default'].debug.calledWithMatch(/Creating or overwriting dynamic bootstrap/).should.be.ok;
          _libLogger2['default'].debug.reset();

        case 41:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
});

// first call: should create new bootstrap file
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvdW5pdC9keW5hbWljLWJvb3RzdHJhcC1zcGVjcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OztnQkFFaUMsT0FBTzs7eUJBQ3hCLGtCQUFrQjs7OztvQkFDakIsTUFBTTs7Ozs2QkFDSixnQkFBZ0I7O3FCQUNqQixPQUFPOzs7O3lCQUNILFlBQVk7Ozs7b0JBQ2pCLE1BQU07Ozs7QUFHdkIsa0JBQUssTUFBTSxFQUFFLENBQUM7QUFDZCxrQkFBSyxHQUFHLHdCQUFXLENBQUM7O0FBRXBCLFFBQVEsQ0FBQyxtQkFBbUIsRUFBRSxZQUFZOzs7QUFDeEMsV0FBUyxXQUFXLENBQUMsSUFBSSxFQUFFOzs7QUFHekIsUUFBSSxLQUFLLEdBQUcsNEJBQTRCLENBQUM7QUFDekMsUUFBSSxNQUFNLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNqQyxRQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzdCLFdBQU8sR0FBRyxDQUFDO0dBQ1o7O0FBRUQsV0FBZSxTQUFTLENBQUUsSUFBSTtRQUN4QixHQUFHOzs7O0FBQUgsYUFBRyxHQUFHLFdBQVcsQ0FBQyxJQUFJLENBQUM7O0FBQzNCLGFBQUcsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDNUMsYUFBRyxDQUFDLHNCQUFzQixDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7QUFDeEMsYUFBRyxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDOzsyQ0FDMUIsa0JBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsQ0FBQzs7OzJCQUFFLE1BQU0sQ0FBQyxFQUFFOzhDQUNoRCxHQUFHOzs7Ozs7O0dBQ1g7O0FBRUQsUUFBTSxDQUFDLFlBQVk7QUFDakIsdUJBQU0sR0FBRyx5QkFBTSxPQUFPLENBQUMsQ0FBQztHQUN6QixDQUFDLENBQUM7O0FBRUgsT0FBSyxDQUFDLFlBQVk7QUFDaEIsMkJBQUksS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO0dBQ3JCLENBQUMsQ0FBQzs7QUFFSCxJQUFFLENBQUMsbUNBQW1DLEVBQUU7UUFPbEMsYUFBYSxFQUViLElBQUksRUFpQkosR0FBRzs7OztBQXpCUCxpQkFBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsR0FBRyxrQkFBSyxPQUFPLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxlQUFlLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxXQUFXLENBQUMsQ0FBQzs7MkNBQ2hHLGtCQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDOzs7Ozs7Ozs7MkNBQzdDLGtCQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDOzs7OzJDQUl6Qix5QkFBa0I7OztBQUF4Qyx1QkFBYTs7QUFDakIsdUJBQWEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLGdFQUFnRSxDQUFDLENBQUM7OzJDQUM1RSxrQkFBRyxRQUFRLENBQUMsYUFBYSxFQUFFLE1BQU0sQ0FBQzs7O0FBQS9DLGNBQUk7OzJDQUNGLFNBQVMsQ0FBQyxJQUFJLENBQUM7OztBQUNyQixpQ0FBSSxLQUFLLENBQUMsZUFBZSxDQUFDLDJDQUEyQyxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsUUFBSyxDQUFDO0FBQ3RGLGlDQUFJLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQzs7OzsyQ0FHSSx5QkFBa0I7OztBQUF4Qyx1QkFBYTs7QUFDYix1QkFBYSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsZ0VBQWdFLENBQUMsQ0FBQzs7MkNBQ2hGLGtCQUFHLFFBQVEsQ0FBQyxhQUFhLEVBQUUsTUFBTSxDQUFDOzs7QUFBL0MsY0FBSTs7MkNBQ0UsU0FBUyxDQUFDLElBQUksQ0FBQzs7O0FBQ3JCLGlDQUFJLEtBQUssQ0FBQyxlQUFlLENBQUMsMkJBQTJCLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxRQUFLLENBQUM7QUFDdEUsaUNBQUksS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDOzs7OzJDQUdJLHdCQUFpQixFQUFDLElBQUksRUFBRSxnQkFBZ0IsRUFBQyxDQUFDOzs7QUFBaEUsdUJBQWE7O0FBQ2IsdUJBQWEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLGdFQUFnRSxDQUFDLENBQUM7OzJDQUNoRixrQkFBRyxRQUFRLENBQUMsYUFBYSxFQUFFLE1BQU0sQ0FBQzs7O0FBQS9DLGNBQUk7OzJDQUNZLFNBQVMsQ0FBQyxJQUFJLEVBQUUsRUFBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxDQUFDLEVBQUMsQ0FBQzs7O0FBQTlELGFBQUc7O0FBQ1AsYUFBRyxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUM7QUFDbkQsaUNBQUksS0FBSyxDQUFDLGVBQWUsQ0FBQywyQ0FBMkMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO0FBQ3BGLGlDQUFJLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQzs7Ozs7OztHQUNuQixDQUFDLENBQUM7Q0FDSixDQUFDLENBQUMiLCJmaWxlIjoidGVzdC91bml0L2R5bmFtaWMtYm9vdHN0cmFwLXNwZWNzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdHJhbnNwaWxlOm1vY2hhXG5cbmltcG9ydCB7IHByZXBhcmVCb290c3RyYXAgfSBmcm9tICcuLi8uLic7XG5pbXBvcnQgbG9nIGZyb20gJy4uLy4uL2xpYi9sb2dnZXInO1xuaW1wb3J0IGNoYWkgZnJvbSAnY2hhaSc7XG5pbXBvcnQgeyBmcyB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcbmltcG9ydCBzaW5vbiBmcm9tICdzaW5vbic7XG5pbXBvcnQgc2lub25DaGFpIGZyb20gJ3Npbm9uLWNoYWknO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5cblxuY2hhaS5zaG91bGQoKTtcbmNoYWkudXNlKHNpbm9uQ2hhaSk7XG5cbmRlc2NyaWJlKCdkeW5hbWljIGJvb3RzdHJhcCcsIGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gZW52RnJvbUNvZGUoY29kZSkge1xuICAgIC8vIGxldCdzIHBpY2sgb3V0IHRoZSBkeW5hbWljIGVudiBmcm9tIHRoZSBuZXcgYm9vdHNyYXAgZmlsZSB3aXRoIHRoaXNcbiAgICAvLyByZWdleCBzbyB3ZSBjYW4gYmUgc3VyZSBpdCBtYXRjaGVzIHdoYXQgd2UgZXhwZWN0XG4gICAgdmFyIGVudlJlID0gL15ib290c3RyYXBcXCgoXFx7W15dK30pXFwpOyQvbTtcbiAgICB2YXIgZW52U3RyID0gZW52UmUuZXhlYyhjb2RlKVsxXTtcbiAgICB2YXIgZW52ID0gSlNPTi5wYXJzZShlbnZTdHIpO1xuICAgIHJldHVybiBlbnY7XG4gIH1cblxuICBhc3luYyBmdW5jdGlvbiBjaGVja0NvZGUgKGNvZGUpIHtcbiAgICB2YXIgZW52ID0gZW52RnJvbUNvZGUoY29kZSk7XG4gICAgZW52Lm5vZGVQYXRoLnNob3VsZC5lcXVhbChwcm9jZXNzLmV4ZWNQYXRoKTtcbiAgICBlbnYuY29tbWFuZFByb3h5Q2xpZW50UGF0aC5zaG91bGQuZXhpc3Q7XG4gICAgZW52Lmluc3RydW1lbnRzU29jay5zaG91bGQuZXhpc3Q7XG4gICAgKGF3YWl0IGZzLmV4aXN0cyhlbnYuY29tbWFuZFByb3h5Q2xpZW50UGF0aCkpLnNob3VsZC5iZS50cnVlO1xuICAgIHJldHVybiBlbnY7XG4gIH1cblxuICBiZWZvcmUoZnVuY3Rpb24gKCkge1xuICAgIHNpbm9uLnNweShsb2csICdkZWJ1ZycpO1xuICB9KTtcblxuICBhZnRlcihmdW5jdGlvbiAoKSB7XG4gICAgbG9nLmRlYnVnLnJlc3RvcmUoKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBnZW5lcmF0ZSBkeW5hbWljIGJvb3RzdHJhcCcsIGFzeW5jICgpID0+IHtcbiAgICBwcm9jZXNzLmVudi5BUFBJVU1fQk9PVFNUUkFQX0RJUiA9IHBhdGgucmVzb2x2ZSgnLycsICd0bXAnLCAnYXBwaXVtLXVpYXV0bycsICd0ZXN0JywgJ3VuaXQnLCAnYm9vdHN0cmFwJyk7XG4gICAgaWYgKGF3YWl0IGZzLmV4aXN0cyhwcm9jZXNzLmVudi5BUFBJVU1fQk9PVFNUUkFQX0RJUikpIHtcbiAgICAgIGF3YWl0IGZzLnJpbXJhZihwcm9jZXNzLmVudi5BUFBJVU1fQk9PVFNUUkFQX0RJUik7XG4gICAgfVxuXG4gICAgICAvLyBmaXJzdCBjYWxsOiBzaG91bGQgY3JlYXRlIG5ldyBib290c3RyYXAgZmlsZVxuICAgIGxldCBib290c3RyYXBGaWxlID0gYXdhaXQgcHJlcGFyZUJvb3RzdHJhcCgpO1xuICAgIGJvb3RzdHJhcEZpbGUuc2hvdWxkLm1hdGNoKC9cXC90bXBcXC9hcHBpdW0tdWlhdXRvXFwvdGVzdFxcL3VuaXRcXC9ib290c3RyYXBcXC9ib290c3RyYXBcXC0uKlxcLmpzLyk7XG4gICAgbGV0IGNvZGUgPSBhd2FpdCBmcy5yZWFkRmlsZShib290c3RyYXBGaWxlLCAndXRmOCcpO1xuICAgIGF3YWl0IGNoZWNrQ29kZShjb2RlKTtcbiAgICBsb2cuZGVidWcuY2FsbGVkV2l0aE1hdGNoKC9DcmVhdGluZyBvciBvdmVyd3JpdGluZyBkeW5hbWljIGJvb3RzdHJhcC8pLnNob3VsZC5iZS50cnVlO1xuICAgIGxvZy5kZWJ1Zy5yZXNldCgpO1xuXG4gICAgLy8gc2Vjb25kIGNhbGw6IHNob3VsZCByZXVzZSBib290c3RyYXAgZmlsZVxuICAgIGJvb3RzdHJhcEZpbGUgPSBhd2FpdCBwcmVwYXJlQm9vdHN0cmFwKCk7XG4gICAgYm9vdHN0cmFwRmlsZS5zaG91bGQubWF0Y2goL1xcL3RtcFxcL2FwcGl1bS11aWF1dG9cXC90ZXN0XFwvdW5pdFxcL2Jvb3RzdHJhcFxcL2Jvb3RzdHJhcFxcLS4qXFwuanMvKTtcbiAgICBjb2RlID0gYXdhaXQgZnMucmVhZEZpbGUoYm9vdHN0cmFwRmlsZSwgJ3V0ZjgnKTtcbiAgICBhd2FpdCBjaGVja0NvZGUoY29kZSk7XG4gICAgbG9nLmRlYnVnLmNhbGxlZFdpdGhNYXRjaCgvUmV1c2luZyBkeW5hbWljIGJvb3RzdHJhcC8pLnNob3VsZC5iZS50cnVlO1xuICAgIGxvZy5kZWJ1Zy5yZXNldCgpO1xuXG4gICAgLy8gdGhpcmQgY2FsbCB1c2luZyBjdXN0b20gc29ja2V0IHBhdGg6IHNob3VsZCBjcmVhdGUgZGlmZmVyZW50IGJvb3RzdHJhcCBmaWxlXG4gICAgYm9vdHN0cmFwRmlsZSA9IGF3YWl0IHByZXBhcmVCb290c3RyYXAoe3NvY2s6ICcvdG1wL2FiY2Qvc29jayd9KTtcbiAgICBib290c3RyYXBGaWxlLnNob3VsZC5tYXRjaCgvXFwvdG1wXFwvYXBwaXVtLXVpYXV0b1xcL3Rlc3RcXC91bml0XFwvYm9vdHN0cmFwXFwvYm9vdHN0cmFwXFwtLipcXC5qcy8pO1xuICAgIGNvZGUgPSBhd2FpdCBmcy5yZWFkRmlsZShib290c3RyYXBGaWxlLCAndXRmOCcpO1xuICAgIGxldCBlbnYgPSBhd2FpdCBjaGVja0NvZGUoY29kZSwge2lzVmVyYm9zZTogdHJ1ZSwgZ3JhY2VQZXJpb2Q6IDV9KTtcbiAgICBlbnYuaW5zdHJ1bWVudHNTb2NrLnNob3VsZC5lcXVhbCgnL3RtcC9hYmNkL3NvY2snKTtcbiAgICBsb2cuZGVidWcuY2FsbGVkV2l0aE1hdGNoKC9DcmVhdGluZyBvciBvdmVyd3JpdGluZyBkeW5hbWljIGJvb3RzdHJhcC8pLnNob3VsZC5iZS5vaztcbiAgICBsb2cuZGVidWcucmVzZXQoKTtcbiAgfSk7XG59KTtcbiJdfQ==
require('source-map-support').install();

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _base = require('./base');

describe('bootstrap', function () {
  describe('basic test bootstrap', function () {
    var _this = this;

    (0, _base.globalInit)(this, { bootstrap: 'basic' });
    var ctx = undefined;
    before(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _base.instrumentsInstanceInit)());

          case 2:
            ctx = context$3$0.sent;

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    after(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _base.killAll)(ctx));

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    it('should start and execute one command', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(ctx.sendCommand("'123'"));

          case 2:
            context$3$0.sent.should.equal('123');
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(ctx.sendCommand('typeof $.lookup'));

          case 5:
            context$3$0.sent.should.equal('undefined');
            context$3$0.next = 8;
            return _regeneratorRuntime.awrap(ctx.sendCommand('typeof chai'));

          case 8:
            context$3$0.sent.should.equal('object');

          case 9:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  });

  describe('regular bootstrap without chai', function () {
    var _this2 = this;

    (0, _base.globalInit)(this);
    var ctx = undefined;
    before(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _base.instrumentsInstanceInit)());

          case 2:
            ctx = context$3$0.sent;

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    after(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            if (!ctx) {
              context$3$0.next = 3;
              break;
            }

            context$3$0.next = 3;
            return _regeneratorRuntime.awrap((0, _base.killAll)(ctx));

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this2);
    });

    it('should start and execute one command', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(ctx.sendCommand("'123'"));

          case 2:
            context$3$0.sent.should.equal('123');
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(ctx.sendCommand('typeof chai'));

          case 5:
            context$3$0.sent.should.equal('undefined');

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this2);
    });
  });

  describe("regular bootstrap with chai", function () {
    var _this3 = this;

    (0, _base.globalInit)(this, { bootstrap: 'basic' });
    var ctx = undefined;
    before(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _base.instrumentsInstanceInit)());

          case 2:
            ctx = context$3$0.sent;

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    after(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _base.killAll)(ctx));

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this3);
    });

    it('should start and execute one command', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(ctx.sendCommand("'123'"));

          case 2:
            context$3$0.sent.should.equal('123');
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(ctx.sendCommand('typeof chai'));

          case 5:
            context$3$0.sent.should.equal('object');

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this3);
    });
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvdWlhdXRvL2Jvb3RzdHJhcC1zcGVjcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7b0JBRTZELFFBQVE7O0FBR3JFLFFBQVEsQ0FBQyxXQUFXLEVBQUUsWUFBWTtBQUNoQyxVQUFRLENBQUMsc0JBQXNCLEVBQUUsWUFBWTs7O0FBQzNDLDBCQUFXLElBQUksRUFBRSxFQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBQ3ZDLFFBQUksR0FBRyxZQUFBLENBQUM7QUFDUixVQUFNLENBQUM7Ozs7OzZDQUNPLG9DQUF5Qjs7O0FBQXJDLGVBQUc7Ozs7Ozs7S0FDSixDQUFDLENBQUM7QUFDSCxTQUFLLENBQUM7Ozs7OzZDQUNFLG1CQUFRLEdBQUcsQ0FBQzs7Ozs7OztLQUNuQixDQUFDLENBQUM7O0FBRUgsTUFBRSxDQUFDLHNDQUFzQyxFQUFFOzs7Ozs2Q0FDbEMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUM7Ozs2QkFBRSxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUs7OzZDQUM1QyxHQUFHLENBQUMsV0FBVyxDQUFDLGlCQUFpQixDQUFDOzs7NkJBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxXQUFXOzs2Q0FDNUQsR0FBRyxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUM7Ozs2QkFBRSxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVE7Ozs7Ozs7S0FDN0QsQ0FBQyxDQUFDO0dBQ0osQ0FBQyxDQUFDOztBQUVILFVBQVEsQ0FBQyxnQ0FBZ0MsRUFBRSxZQUFZOzs7QUFDckQsMEJBQVcsSUFBSSxDQUFDLENBQUM7QUFDakIsUUFBSSxHQUFHLFlBQUEsQ0FBQztBQUNSLFVBQU0sQ0FBQzs7Ozs7NkNBQ08sb0NBQXlCOzs7QUFBckMsZUFBRzs7Ozs7OztLQUNKLENBQUMsQ0FBQztBQUNILFNBQUssQ0FBQzs7OztpQkFDQSxHQUFHOzs7Ozs7NkNBQ0MsbUJBQVEsR0FBRyxDQUFDOzs7Ozs7O0tBRXJCLENBQUMsQ0FBQzs7QUFFSCxNQUFFLENBQUMsc0NBQXNDLEVBQUU7Ozs7OzZDQUNsQyxHQUFHLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQzs7OzZCQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSzs7NkNBQzVDLEdBQUcsQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDOzs7NkJBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxXQUFXOzs7Ozs7O0tBQ2hFLENBQUMsQ0FBQztHQUNKLENBQUMsQ0FBQzs7QUFFSCxVQUFRLENBQUMsNkJBQTZCLEVBQUUsWUFBWTs7O0FBQ2xELDBCQUFXLElBQUksRUFBRSxFQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBQ3ZDLFFBQUksR0FBRyxZQUFBLENBQUM7QUFDUixVQUFNLENBQUM7Ozs7OzZDQUNPLG9DQUF5Qjs7O0FBQXJDLGVBQUc7Ozs7Ozs7S0FDSixDQUFDLENBQUM7QUFDSCxTQUFLLENBQUM7Ozs7OzZDQUNFLG1CQUFRLEdBQUcsQ0FDZDs7Ozs7OztLQUNKLENBQUMsQ0FBQzs7QUFFSCxNQUFFLENBQUMsc0NBQXNDLEVBQUU7Ozs7OzZDQUNsQyxHQUFHLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQzs7OzZCQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSzs7NkNBQzVDLEdBQUcsQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDOzs7NkJBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxRQUFROzs7Ozs7O0tBQzdELENBQUMsQ0FBQztHQUNKLENBQUMsQ0FBQztDQUVKLENBQUMsQ0FBQyIsImZpbGUiOiJ0ZXN0L3VpYXV0by9ib290c3RyYXAtc3BlY3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0cmFuc3BpbGU6bW9jaGFcblxuaW1wb3J0IHsgaW5zdHJ1bWVudHNJbnN0YW5jZUluaXQsIGdsb2JhbEluaXQsIGtpbGxBbGwgfSBmcm9tICcuL2Jhc2UnO1xuXG5cbmRlc2NyaWJlKCdib290c3RyYXAnLCBmdW5jdGlvbiAoKSB7XG4gIGRlc2NyaWJlKCdiYXNpYyB0ZXN0IGJvb3RzdHJhcCcsIGZ1bmN0aW9uICgpIHtcbiAgICBnbG9iYWxJbml0KHRoaXMsIHtib290c3RyYXA6ICdiYXNpYyd9KTtcbiAgICBsZXQgY3R4O1xuICAgIGJlZm9yZShhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBjdHggPSBhd2FpdCBpbnN0cnVtZW50c0luc3RhbmNlSW5pdCgpO1xuICAgIH0pO1xuICAgIGFmdGVyKGFzeW5jICgpID0+IHtcbiAgICAgIGF3YWl0IGtpbGxBbGwoY3R4KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgc3RhcnQgYW5kIGV4ZWN1dGUgb25lIGNvbW1hbmQnLCBhc3luYyAoKSA9PiB7XG4gICAgICAoYXdhaXQgY3R4LnNlbmRDb21tYW5kKFwiJzEyMydcIikpLnNob3VsZC5lcXVhbCgnMTIzJyk7XG4gICAgICAoYXdhaXQgY3R4LnNlbmRDb21tYW5kKCd0eXBlb2YgJC5sb29rdXAnKSkuc2hvdWxkLmVxdWFsKCd1bmRlZmluZWQnKTtcbiAgICAgIChhd2FpdCBjdHguc2VuZENvbW1hbmQoJ3R5cGVvZiBjaGFpJykpLnNob3VsZC5lcXVhbCgnb2JqZWN0Jyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdyZWd1bGFyIGJvb3RzdHJhcCB3aXRob3V0IGNoYWknLCBmdW5jdGlvbiAoKSB7XG4gICAgZ2xvYmFsSW5pdCh0aGlzKTtcbiAgICBsZXQgY3R4O1xuICAgIGJlZm9yZShhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBjdHggPSBhd2FpdCBpbnN0cnVtZW50c0luc3RhbmNlSW5pdCgpO1xuICAgIH0pO1xuICAgIGFmdGVyKGFzeW5jICgpID0+IHtcbiAgICAgIGlmIChjdHgpIHtcbiAgICAgICAgYXdhaXQga2lsbEFsbChjdHgpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBzdGFydCBhbmQgZXhlY3V0ZSBvbmUgY29tbWFuZCcsIGFzeW5jICgpID0+IHtcbiAgICAgIChhd2FpdCBjdHguc2VuZENvbW1hbmQoXCInMTIzJ1wiKSkuc2hvdWxkLmVxdWFsKCcxMjMnKTtcbiAgICAgIChhd2FpdCBjdHguc2VuZENvbW1hbmQoJ3R5cGVvZiBjaGFpJykpLnNob3VsZC5lcXVhbCgndW5kZWZpbmVkJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKFwicmVndWxhciBib290c3RyYXAgd2l0aCBjaGFpXCIsIGZ1bmN0aW9uICgpIHtcbiAgICBnbG9iYWxJbml0KHRoaXMsIHtib290c3RyYXA6ICdiYXNpYyd9KTtcbiAgICBsZXQgY3R4O1xuICAgIGJlZm9yZShhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBjdHggPSBhd2FpdCBpbnN0cnVtZW50c0luc3RhbmNlSW5pdCgpO1xuICAgIH0pO1xuICAgIGFmdGVyKGFzeW5jICgpID0+IHtcbiAgICAgIGF3YWl0IGtpbGxBbGwoY3R4XG4gICAgICAgICk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHN0YXJ0IGFuZCBleGVjdXRlIG9uZSBjb21tYW5kJywgYXN5bmMgKCkgPT4ge1xuICAgICAgKGF3YWl0IGN0eC5zZW5kQ29tbWFuZChcIicxMjMnXCIpKS5zaG91bGQuZXF1YWwoJzEyMycpO1xuICAgICAgKGF3YWl0IGN0eC5zZW5kQ29tbWFuZCgndHlwZW9mIGNoYWknKSkuc2hvdWxkLmVxdWFsKCdvYmplY3QnKTtcbiAgICB9KTtcbiAgfSk7XG5cbn0pO1xuIl19
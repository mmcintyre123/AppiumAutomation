require('source-map-support').install();

/* globals $, env */

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _base = require('./base');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

describe('sendKey', function () {
  var _this = this;

  var imports = { post: ['uiauto/lib/mechanic-ext/keyboard-ext.js', 'uiauto/lib/element-patch/helper-patch.js'] };
  (0, _base.globalInit)(this, { imports: imports, bootstrap: 'basic' });

  /* globals rootPage: true */
  var ctx = undefined;
  before(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap((0, _base.instrumentsInstanceInit)());

        case 2:
          ctx = context$2$0.sent;

        case 3:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });
  after(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap((0, _base.killAll)(ctx));

        case 2:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  afterEach(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(ctx.execFunc(function () {
            $('#UICatalog').first().tap();
            $.delay(1000);
          }));

        case 2:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  var keyStrategies = [undefined, 'oneByOne', 'grouped', 'setValue'];
  _lodash2['default'].each(keyStrategies, function (sendKeyStrategy) {
    var _this2 = this;

    it('should work with strategy: ' + sendKeyStrategy, function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(ctx.execFunc(function (sendKeyStrategy) {
              env.sendKeyStrategy = sendKeyStrategy;
              $.delay(1000);
              rootPage.clickMenuItem('Text Fields');
              $.delay(1000);
              var textfield = $('textfield').first()[0];
              textfield.setValue('');
              $.delay(3000);
              $('textfield').first()[0].setValueByType('Hello World');
              $.delay(3000);
            }, [sendKeyStrategy]));

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this2);
    });
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvdWlhdXRvL3NlbmRrZXktc3BlY3MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O29CQUc2RCxRQUFROztzQkFDdkQsUUFBUTs7OztBQUV0QixRQUFRLENBQUMsU0FBUyxFQUFFLFlBQVk7OztBQUM5QixNQUFJLE9BQU8sR0FBRyxFQUFFLElBQUksRUFBRSxDQUNuQix5Q0FBeUMsRUFDMUMsMENBQTBDLENBQzNDLEVBQUMsQ0FBQztBQUNILHdCQUFXLElBQUksRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7OztBQUd6RCxNQUFJLEdBQUcsWUFBQSxDQUFDO0FBQ1IsUUFBTSxDQUFDOzs7OzsyQ0FDTyxvQ0FBeUI7OztBQUFyQyxhQUFHOzs7Ozs7O0dBQ0osQ0FBQyxDQUFDO0FBQ0gsT0FBSyxDQUFDOzs7OzsyQ0FDRSxtQkFBUSxHQUFHLENBQUM7Ozs7Ozs7R0FDbkIsQ0FBQyxDQUFDOztBQUVILFdBQVMsQ0FBQzs7Ozs7MkNBQ0YsR0FBRyxDQUFDLFFBQVEsQ0FDaEIsWUFBWTtBQUNWLGFBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUM5QixhQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1dBQ2YsQ0FDRjs7Ozs7OztHQUNGLENBQUMsQ0FBQzs7QUFFSCxNQUFJLGFBQWEsR0FBRyxDQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQ25FLHNCQUFFLElBQUksQ0FBQyxhQUFhLEVBQUUsVUFBVSxlQUFlLEVBQUU7OztBQUMvQyxNQUFFLGlDQUErQixlQUFlLEVBQUk7Ozs7OzZDQUM1QyxHQUFHLENBQUMsUUFBUSxDQUNoQixVQUFVLGVBQWUsRUFBRTtBQUN6QixpQkFBRyxDQUFDLGVBQWUsR0FBRyxlQUFlLENBQUM7QUFDdEMsZUFBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNkLHNCQUFRLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQ3RDLGVBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDZCxrQkFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzFDLHVCQUFTLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3ZCLGVBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDZCxlQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQ3hELGVBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDZixFQUFFLENBQUMsZUFBZSxDQUFDLENBQ3JCOzs7Ozs7O0tBQ0YsQ0FBQyxDQUFDO0dBQ0osQ0FBQyxDQUFDO0NBQ0osQ0FBQyxDQUFDIiwiZmlsZSI6InRlc3QvdWlhdXRvL3NlbmRrZXktc3BlY3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0cmFuc3BpbGU6bW9jaGFcbi8qIGdsb2JhbHMgJCwgZW52ICovXG5cbmltcG9ydCB7IGluc3RydW1lbnRzSW5zdGFuY2VJbml0LCBnbG9iYWxJbml0LCBraWxsQWxsIH0gZnJvbSAnLi9iYXNlJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5cbmRlc2NyaWJlKCdzZW5kS2V5JywgZnVuY3Rpb24gKCkge1xuICBsZXQgaW1wb3J0cyA9IHsgcG9zdDogW1xuICAgICAndWlhdXRvL2xpYi9tZWNoYW5pYy1leHQva2V5Ym9hcmQtZXh0LmpzJyxcbiAgICAndWlhdXRvL2xpYi9lbGVtZW50LXBhdGNoL2hlbHBlci1wYXRjaC5qcydcbiAgXX07XG4gIGdsb2JhbEluaXQodGhpcywge2ltcG9ydHM6IGltcG9ydHMsIGJvb3RzdHJhcDogJ2Jhc2ljJ30pO1xuXG4gIC8qIGdsb2JhbHMgcm9vdFBhZ2U6IHRydWUgKi9cbiAgbGV0IGN0eDtcbiAgYmVmb3JlKGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICBjdHggPSBhd2FpdCBpbnN0cnVtZW50c0luc3RhbmNlSW5pdCgpO1xuICB9KTtcbiAgYWZ0ZXIoYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IGtpbGxBbGwoY3R4KTtcbiAgfSk7XG5cbiAgYWZ0ZXJFYWNoKGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBjdHguZXhlY0Z1bmMoXG4gICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICQoJyNVSUNhdGFsb2cnKS5maXJzdCgpLnRhcCgpO1xuICAgICAgICAkLmRlbGF5KDEwMDApO1xuICAgICAgfVxuICAgICk7XG4gIH0pO1xuXG4gIGxldCBrZXlTdHJhdGVnaWVzID0gW3VuZGVmaW5lZCwgJ29uZUJ5T25lJywgJ2dyb3VwZWQnLCAnc2V0VmFsdWUnXTtcbiAgXy5lYWNoKGtleVN0cmF0ZWdpZXMsIGZ1bmN0aW9uIChzZW5kS2V5U3RyYXRlZ3kpIHtcbiAgICBpdChgc2hvdWxkIHdvcmsgd2l0aCBzdHJhdGVneTogJHtzZW5kS2V5U3RyYXRlZ3l9YCwgYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgY3R4LmV4ZWNGdW5jKFxuICAgICAgICBmdW5jdGlvbiAoc2VuZEtleVN0cmF0ZWd5KSB7XG4gICAgICAgICAgZW52LnNlbmRLZXlTdHJhdGVneSA9IHNlbmRLZXlTdHJhdGVneTtcbiAgICAgICAgICAkLmRlbGF5KDEwMDApO1xuICAgICAgICAgIHJvb3RQYWdlLmNsaWNrTWVudUl0ZW0oJ1RleHQgRmllbGRzJyk7XG4gICAgICAgICAgJC5kZWxheSgxMDAwKTtcbiAgICAgICAgICB2YXIgdGV4dGZpZWxkID0gJCgndGV4dGZpZWxkJykuZmlyc3QoKVswXTtcbiAgICAgICAgICB0ZXh0ZmllbGQuc2V0VmFsdWUoJycpO1xuICAgICAgICAgICQuZGVsYXkoMzAwMCk7XG4gICAgICAgICAgJCgndGV4dGZpZWxkJykuZmlyc3QoKVswXS5zZXRWYWx1ZUJ5VHlwZSgnSGVsbG8gV29ybGQnKTtcbiAgICAgICAgICAkLmRlbGF5KDMwMDApO1xuICAgICAgICB9LCBbc2VuZEtleVN0cmF0ZWd5XVxuICAgICAgKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdfQ==
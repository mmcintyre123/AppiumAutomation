require('source-map-support').install();

/* globals $ */

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _base = require('./base');

var _appiumXcode = require('appium-xcode');

describe('grace period', function () {
  var imports = { post: ['uiauto/lib/mechanic-ext/gesture-ext.js', 'uiauto/lib/mechanic-ext/keyboard-ext.js'] };
  (0, _base.globalInit)(this, { imports: imports, bootstrap: 'basic' });

  describe('looking for non-existant object', function () {
    var _this = this;

    var expectedTime = 2000;
    var ctx = undefined;
    before(function callee$2$0() {
      var xcodeVersion;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _base.instrumentsInstanceInit)());

          case 2:
            ctx = context$3$0.sent;
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap((0, _appiumXcode.getVersion)());

          case 5:
            xcodeVersion = context$3$0.sent;

            if (xcodeVersion[0] >= 7) {
              expectedTime = 4000;
            }

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    after(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _base.killAll)(ctx));

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    it('should be quick when grace period is not set', function callee$2$0() {
      var refMs, res;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            refMs = Date.now();
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(ctx.execFunc(function () {
              return $('#not exist');
            }));

          case 3:
            res = context$3$0.sent;

            (Date.now() - refMs).should.be.below(expectedTime);
            res.should.have.length(0);

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    it('should be quick when pushing and popping 0 timeout', function callee$2$0() {
      var refMs, res;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            refMs = Date.now();
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(ctx.execFunc(function () {
              $.target().pushTimeout(0);
              var res = $('#not exist');
              $.target().popTimeout();
              return res;
            }));

          case 3:
            res = context$3$0.sent;

            res.should.have.length(0);
            (Date.now() - refMs).should.be.below(expectedTime);

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    // Skipping because of bug, it takes more than 25 second!
    it.skip('should be quick when grace period is set to 1', function callee$2$0() {
      var refMs, res;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            refMs = Date.now();
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(ctx.execFunc(function () {
              $.target().setTimeout(1);
              $.warn('lookup starting');
              var res = $('#not exist');
              $.warn('lookup finished');
              return res;
            }));

          case 3:
            res = context$3$0.sent;

            res.should.have.length(0)(Date.now() - refMs).should.be.below(5000);

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  });
});

// xcode 7 is a bit slow.
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvdWlhdXRvL2dyYWNlLXBlcmlvZC1zcGVjcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O29CQUc2RCxRQUFROzsyQkFDMUMsY0FBYzs7QUFHekMsUUFBUSxDQUFDLGNBQWMsRUFBRSxZQUFZO0FBQ25DLE1BQUksT0FBTyxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQ3BCLHdDQUF3QyxFQUN4Qyx5Q0FBeUMsQ0FDMUMsRUFBQyxDQUFDO0FBQ0gsd0JBQVcsSUFBSSxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFDLENBQUMsQ0FBQzs7QUFFekQsVUFBUSxDQUFDLGlDQUFpQyxFQUFFLFlBQVk7OztBQUN0RCxRQUFJLFlBQVksR0FBRyxJQUFJLENBQUM7QUFDeEIsUUFBSSxHQUFHLFlBQUEsQ0FBQztBQUNSLFVBQU0sQ0FBQztVQUlELFlBQVk7Ozs7OzZDQUhKLG9DQUF5Qjs7O0FBQXJDLGVBQUc7OzZDQUdzQiw4QkFBWTs7O0FBQWpDLHdCQUFZOztBQUNoQixnQkFBSSxZQUFZLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFO0FBQ3hCLDBCQUFZLEdBQUcsSUFBSSxDQUFDO2FBQ3JCOzs7Ozs7O0tBQ0YsQ0FBQyxDQUFDO0FBQ0gsU0FBSyxDQUFDOzs7Ozs2Q0FDRSxtQkFBUSxHQUFHLENBQUM7Ozs7Ozs7S0FDbkIsQ0FBQyxDQUFDOztBQUVILE1BQUUsQ0FBQyw4Q0FBOEMsRUFBRTtVQUM3QyxLQUFLLEVBQ0wsR0FBRzs7OztBQURILGlCQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRTs7NkNBQ04sR0FBRyxDQUFDLFFBQVEsQ0FDMUIsWUFBWTtBQUNWLHFCQUFPLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQzthQUN4QixDQUNGOzs7QUFKRyxlQUFHOztBQUtQLGFBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLEtBQUssQ0FBQSxDQUFFLE1BQU0sQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQ25ELGVBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQzs7Ozs7OztLQUMzQixDQUFDLENBQUM7O0FBRUgsTUFBRSxDQUFDLG9EQUFvRCxFQUFFO1VBQ25ELEtBQUssRUFDTCxHQUFHOzs7O0FBREgsaUJBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFOzs2Q0FDTixHQUFHLENBQUMsUUFBUSxDQUMxQixZQUFZO0FBQ1YsZUFBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMxQixrQkFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQzFCLGVBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQztBQUN4QixxQkFBTyxHQUFHLENBQUM7YUFDWixDQUNGOzs7QUFQRyxlQUFHOztBQVFQLGVBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMxQixhQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxLQUFLLENBQUEsQ0FBRSxNQUFNLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQzs7Ozs7OztLQUNwRCxDQUFDLENBQUM7OztBQUdILE1BQUUsQ0FBQyxJQUFJLENBQUMsK0NBQStDLEVBQUU7VUFDbkQsS0FBSyxFQUNMLEdBQUc7Ozs7QUFESCxpQkFBSyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUU7OzZDQUNOLEdBQUcsQ0FBQyxRQUFRLENBQzFCLFlBQVk7QUFDVixlQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3pCLGVBQUMsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQUMxQixrQkFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQzFCLGVBQUMsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQUMxQixxQkFBTyxHQUFHLENBQUM7YUFDWixDQUNGOzs7QUFSRyxlQUFHOztBQVNQLGVBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FDeEIsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDOzs7Ozs7O0tBQzVDLENBQUMsQ0FBQztHQUNKLENBQUMsQ0FBQztDQUNKLENBQUMsQ0FBQyIsImZpbGUiOiJ0ZXN0L3VpYXV0by9ncmFjZS1wZXJpb2Qtc3BlY3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0cmFuc3BpbGU6bW9jaGFcbi8qIGdsb2JhbHMgJCAqL1xuXG5pbXBvcnQgeyBpbnN0cnVtZW50c0luc3RhbmNlSW5pdCwgZ2xvYmFsSW5pdCwga2lsbEFsbCB9IGZyb20gJy4vYmFzZSc7XG5pbXBvcnQgeyBnZXRWZXJzaW9uIH0gZnJvbSAnYXBwaXVtLXhjb2RlJztcblxuXG5kZXNjcmliZSgnZ3JhY2UgcGVyaW9kJywgZnVuY3Rpb24gKCkge1xuICBsZXQgaW1wb3J0cyA9IHsgcG9zdDogW1xuICAgICd1aWF1dG8vbGliL21lY2hhbmljLWV4dC9nZXN0dXJlLWV4dC5qcycsXG4gICAgJ3VpYXV0by9saWIvbWVjaGFuaWMtZXh0L2tleWJvYXJkLWV4dC5qcycsXG4gIF19O1xuICBnbG9iYWxJbml0KHRoaXMsIHtpbXBvcnRzOiBpbXBvcnRzLCBib290c3RyYXA6ICdiYXNpYyd9KTtcblxuICBkZXNjcmliZSgnbG9va2luZyBmb3Igbm9uLWV4aXN0YW50IG9iamVjdCcsIGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgZXhwZWN0ZWRUaW1lID0gMjAwMDtcbiAgICBsZXQgY3R4O1xuICAgIGJlZm9yZShhc3luYyAoKSA9PiB7XG4gICAgICBjdHggPSBhd2FpdCBpbnN0cnVtZW50c0luc3RhbmNlSW5pdCgpO1xuXG4gICAgICAvLyB4Y29kZSA3IGlzIGEgYml0IHNsb3cuXG4gICAgICBsZXQgeGNvZGVWZXJzaW9uID0gYXdhaXQgZ2V0VmVyc2lvbigpO1xuICAgICAgaWYgKHhjb2RlVmVyc2lvblswXSA+PSA3KSB7XG4gICAgICAgIGV4cGVjdGVkVGltZSA9IDQwMDA7XG4gICAgICB9XG4gICAgfSk7XG4gICAgYWZ0ZXIoYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQga2lsbEFsbChjdHgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBiZSBxdWljayB3aGVuIGdyYWNlIHBlcmlvZCBpcyBub3Qgc2V0JywgYXN5bmMgKCkgPT4ge1xuICAgICAgbGV0IHJlZk1zID0gRGF0ZS5ub3coKTtcbiAgICAgIGxldCByZXMgPSBhd2FpdCBjdHguZXhlY0Z1bmMoXG4gICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gJCgnI25vdCBleGlzdCcpO1xuICAgICAgICB9XG4gICAgICApO1xuICAgICAgKERhdGUubm93KCkgLSByZWZNcykuc2hvdWxkLmJlLmJlbG93KGV4cGVjdGVkVGltZSk7XG4gICAgICByZXMuc2hvdWxkLmhhdmUubGVuZ3RoKDApO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBiZSBxdWljayB3aGVuIHB1c2hpbmcgYW5kIHBvcHBpbmcgMCB0aW1lb3V0JywgYXN5bmMgKCkgPT4ge1xuICAgICAgbGV0IHJlZk1zID0gRGF0ZS5ub3coKTtcbiAgICAgIGxldCByZXMgPSBhd2FpdCBjdHguZXhlY0Z1bmMoXG4gICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAkLnRhcmdldCgpLnB1c2hUaW1lb3V0KDApO1xuICAgICAgICAgIHZhciByZXMgPSAkKCcjbm90IGV4aXN0Jyk7XG4gICAgICAgICAgJC50YXJnZXQoKS5wb3BUaW1lb3V0KCk7XG4gICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICAgIHJlcy5zaG91bGQuaGF2ZS5sZW5ndGgoMCk7XG4gICAgICAoRGF0ZS5ub3coKSAtIHJlZk1zKS5zaG91bGQuYmUuYmVsb3coZXhwZWN0ZWRUaW1lKTtcbiAgICB9KTtcblxuICAgIC8vIFNraXBwaW5nIGJlY2F1c2Ugb2YgYnVnLCBpdCB0YWtlcyBtb3JlIHRoYW4gMjUgc2Vjb25kIVxuICAgIGl0LnNraXAoJ3Nob3VsZCBiZSBxdWljayB3aGVuIGdyYWNlIHBlcmlvZCBpcyBzZXQgdG8gMScsIGFzeW5jICgpID0+IHtcbiAgICAgIGxldCByZWZNcyA9IERhdGUubm93KCk7XG4gICAgICBsZXQgcmVzID0gYXdhaXQgY3R4LmV4ZWNGdW5jKFxuICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgJC50YXJnZXQoKS5zZXRUaW1lb3V0KDEpO1xuICAgICAgICAgICQud2FybignbG9va3VwIHN0YXJ0aW5nJyk7XG4gICAgICAgICAgdmFyIHJlcyA9ICQoJyNub3QgZXhpc3QnKTtcbiAgICAgICAgICAkLndhcm4oJ2xvb2t1cCBmaW5pc2hlZCcpO1xuICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgICByZXMuc2hvdWxkLmhhdmUubGVuZ3RoKDApXG4gICAgICAoRGF0ZS5ub3coKSAtIHJlZk1zKS5zaG91bGQuYmUuYmVsb3coNTAwMCk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXX0=
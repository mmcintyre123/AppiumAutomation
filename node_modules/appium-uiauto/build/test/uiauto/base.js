'use strict';

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _2 = require('../..');

var _appiumInstruments = require('appium-instruments');

var _libDynamicBootstrap = require('../../lib/dynamic-bootstrap');

var _libLogger = require('../../lib/logger');

var _libLogger2 = _interopRequireDefault(_libLogger);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _appiumSupport = require('appium-support');

var _appiumXcode = require('appium-xcode');

_chai2['default'].use(_chaiAsPromised2['default']);
_chai2['default'].should();

process.env.APPIUM_BOOTSTRAP_DIR = '/tmp/appium-uiauto/test/functional/bootstrap';

var rootDir = _path2['default'].resolve(__dirname, '..', '..', '..');
if (!__dirname.match(/build\/test\/uiauto$/)) {
  // we are not running tests in the `build` directory
  rootDir = _path2['default'].resolve(__dirname, '..', '..');
}

function localPrepareBootstrap(opts) {
  var env, postImports, code, vars, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _step$value, key, value;

  return _regeneratorRuntime.async(function localPrepareBootstrap$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        opts = opts || {};
        // let rootDir = path.resolve(__dirname, '..', '..', '..');

        if (!(opts.bootstrap === 'basic')) {
          context$1$0.next = 34;
          break;
        }

        env = (0, _libDynamicBootstrap.getEnv)();
        postImports = [];

        if (opts.imports && opts.imports.post) {
          postImports = opts.imports.post;
        }
        postImports = postImports.map(function (item) {
          return '#import "' + _path2['default'].resolve(rootDir, item) + '"';
        });
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(_path2['default'].resolve(rootDir, 'test', 'assets', 'base-bootstrap.js'), 'utf8'));

      case 8:
        code = context$1$0.sent;
        vars = {
          '<ROOT_DIR>': rootDir,
          '"<POST_IMPORTS>"': postImports.join('\n'),
          '<commandProxyClientPath>': env.commandProxyClientPath,
          '<nodePath>': env.nodePath,
          '<instrumentsSock>': env.instrumentsSock
        };
        _iteratorNormalCompletion = true;
        _didIteratorError = false;
        _iteratorError = undefined;
        context$1$0.prev = 13;

        for (_iterator = _getIterator(_lodash2['default'].toPairs(vars)); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          _step$value = _slicedToArray(_step.value, 2);
          key = _step$value[0];
          value = _step$value[1];

          code = code.replace(new RegExp(key, 'g'), value);
        }
        context$1$0.next = 21;
        break;

      case 17:
        context$1$0.prev = 17;
        context$1$0.t0 = context$1$0['catch'](13);
        _didIteratorError = true;
        _iteratorError = context$1$0.t0;

      case 21:
        context$1$0.prev = 21;
        context$1$0.prev = 22;

        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }

      case 24:
        context$1$0.prev = 24;

        if (!_didIteratorError) {
          context$1$0.next = 27;
          break;
        }

        throw _iteratorError;

      case 27:
        return context$1$0.finish(24);

      case 28:
        return context$1$0.finish(21);

      case 29:
        context$1$0.next = 31;
        return _regeneratorRuntime.awrap((0, _2.prepareBootstrap)({
          code: code,
          isVerbose: true
        }));

      case 31:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 34:
        opts = _lodash2['default'].clone(opts);
        if (opts.chai) {
          opts.imports = {
            pre: [_path2['default'].resolve(rootDir, 'node_modules/chai/chai.js')]
          };
        }
        delete opts.chai;
        context$1$0.next = 39;
        return _regeneratorRuntime.awrap((0, _2.prepareBootstrap)(opts));

      case 39:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 40:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[13, 17, 21, 29], [22,, 24, 28]]);
}

function newInstruments(bootstrapFile) {
  var simulatorSdkAndDevice, withoutDelay, xcodeVersion;
  return _regeneratorRuntime.async(function newInstruments$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        simulatorSdkAndDevice = 'iPhone 6 (8.1 Simulator)';
        withoutDelay = true;
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap((0, _appiumXcode.getVersion)(true));

      case 4:
        xcodeVersion = context$1$0.sent;

        if (xcodeVersion.versionFloat >= 7) {
          simulatorSdkAndDevice = 'iPhone 6 (8.4)';
          withoutDelay = false;
        }

        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(_appiumInstruments.utils.quickInstruments({
          app: _path2['default'].resolve(rootDir, 'test', 'assets', 'UICatalog.app'),
          bootstrap: bootstrapFile,
          simulatorSdkAndDevice: simulatorSdkAndDevice,
          launchTries: 2,
          withoutDelay: withoutDelay
        }));

      case 8:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 9:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function init(bootstrapFile, sock) {
  var proxy, instruments;
  return _regeneratorRuntime.async(function init$(context$1$0) {
    var _this = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        proxy = new _2.UIAutoClient(sock);
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(newInstruments(bootstrapFile));

      case 3:
        instruments = context$1$0.sent;

        instruments.onShutdown.then(function () {
          // expected shutdown, nothing to do
        })['catch'](function callee$1$0(err) {
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                _libLogger2['default'].error(err);
                context$2$0.next = 3;
                return _regeneratorRuntime.awrap(proxy.safeShutdown());

              case 3:
                throw new Error('Unexpected shutdown of instruments');

              case 4:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this);
        }).done();
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(_bluebird2['default'].all([proxy.start().then(function () {
          // everything looks good, notify instruments.
          instruments.registerLaunch();
        }), instruments.launch()]));

      case 7:
        return context$1$0.abrupt('return', { proxy: proxy, instruments: instruments });

      case 8:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function killAll(ctx) {
  return _regeneratorRuntime.async(function killAll$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.prev = 0;
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(ctx.instruments.shutdown());

      case 3:
        context$1$0.next = 8;
        break;

      case 5:
        context$1$0.prev = 5;
        context$1$0.t0 = context$1$0['catch'](0);

        // pass
        _libLogger2['default'].error(context$1$0.t0);

      case 8:
        context$1$0.next = 10;
        return _regeneratorRuntime.awrap(_appiumInstruments.utils.killAllInstruments());

      case 10:
        context$1$0.next = 12;
        return _regeneratorRuntime.awrap(ctx.proxy.safeShutdown());

      case 12:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[0, 5]]);
}

var bootstrapFile = undefined;

function globalInit(ctx, opts) {
  return _regeneratorRuntime.async(function globalInit$(context$1$0) {
    var _this2 = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        ctx.timeout(60000);
        before(function callee$1$0() {
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.next = 2;
                return _regeneratorRuntime.awrap(localPrepareBootstrap(opts));

              case 2:
                bootstrapFile = context$2$0.sent;

              case 3:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this2);
        });

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function instrumentsInstanceInit() {
  var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
  var ctx, cmd;
  return _regeneratorRuntime.async(function instrumentsInstanceInit$(context$1$0) {
    var _this3 = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(init(bootstrapFile, opts.sock));

      case 2:
        ctx = context$1$0.sent;

        ctx.sendCommand = function callee$1$0(cmd) {
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                return context$2$0.abrupt('return', ctx.proxy.sendCommand(cmd));

              case 1:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this3);
        };
        ctx.exec = ctx.sendCommand;

        ctx.execFunc = function callee$1$0(func, params) {
          var script;
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                params = params || [];
                script = '(function (){\n' + ('  var params = JSON.parse(\'' + JSON.stringify(params) + '\');\n') + ('  return (' + func.toString() + ').apply(null, params);\n') + '})();';
                return context$2$0.abrupt('return', ctx.exec(script));

              case 3:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this3);
        };

        cmd = '$.isVerbose = ' + (process.env.VERBOSE ? true : false) + ';\n';
        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(ctx.exec(cmd));

      case 9:
        context$1$0.next = 11;
        return _regeneratorRuntime.awrap(ctx.execFunc(function () {
          /* global rootPage:true */
          rootPage = {};
          // click item in root page menu
          rootPage.clickMenuItem = function (partialText) {
            $.each($('tableview').children(), function (idx, child) {
              if (child.name().indexOf(partialText) >= 0) {
                $(child).tap();
                return false;
              }
            });
          };
        }));

      case 11:
        context$1$0.next = 13;
        return _regeneratorRuntime.awrap(ctx.execFunc(function () {
          /* global $ */
          $.delay(500);
          while (!$('tableview').isVisible()) {
            $.warn('waiting for page to load');
            $.delay(500);
          }
        }));

      case 13:
        return context$1$0.abrupt('return', ctx);

      case 14:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

exports.instrumentsInstanceInit = instrumentsInstanceInit;
exports.globalInit = globalInit;
exports.killAll = killAll;

// starting tests differs on Xcode 7 vs. 6

// some uiauto helpers
//# sourceMappingURL=data:application/json;base64,
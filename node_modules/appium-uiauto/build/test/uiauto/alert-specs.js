require('source-map-support').install();

/* globals $, rootPage, alerts */

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _base = require('./base');

_base.instrumentsInstanceInit;

describe('alarm', function () {
  var imports = { post: ['uiauto/lib/alerts.js', 'uiauto/lib/status.js', 'uiauto/lib/element-patch/nil-patch.js', 'uiauto/lib/element-patch/helper-patch.js', 'uiauto/lib/mechanic-ext/basics-ext.js', 'uiauto/lib/mechanic-ext/util-ext.js', 'uiauto/lib/mechanic-ext/lookup-ext.js', 'uiauto/lib/mechanic-ext/alert-ext.js'] };

  (0, _base.globalInit)(this, { imports: imports, bootstrap: 'basic' });

  describe('textfields', function () {
    var _this = this;

    var ctx = undefined;

    before(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _base.instrumentsInstanceInit)());

          case 2:
            ctx = context$3$0.sent;
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(ctx.execFunc(function () {
              alerts.configure();
            }));

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    afterEach(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(ctx.execFunc(function () {
              $('#UICatalog').first().tap();
              $.delay(1000);
            }));

          case 2:
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap((0, _base.killAll)(ctx));

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    it('should retrieve alert text and then accept alert', function callee$2$0() {
      var res;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(ctx.execFunc(function () {
              rootPage.clickMenuItem('Alert Views');
              $.delay(2000);
              $('#Okay / Cancel').first().tap();
              $.delay(2000);
              var alertText = $.getAlertText();
              $.acceptAlert();
              return alertText;
            }));

          case 2:
            res = context$3$0.sent;

            res.should.include('A Short Title Is Best');
            res.should.include('A message should be a short, complete sentence.');

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvdWlhdXRvL2FsZXJ0LXNwZWNzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7b0JBRzZELFFBQVE7O0FBRXJFLDhCQUF3Qjs7QUFFeEIsUUFBUSxDQUFDLE9BQU8sRUFBRSxZQUFZO0FBQzVCLE1BQUksT0FBTyxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQ3BCLHNCQUFzQixFQUN0QixzQkFBc0IsRUFDdEIsdUNBQXVDLEVBQ3ZDLDBDQUEwQyxFQUMxQyx1Q0FBdUMsRUFDdkMscUNBQXFDLEVBQ3JDLHVDQUF1QyxFQUN2QyxzQ0FBc0MsQ0FDdkMsRUFBQyxDQUFDOztBQUVILHdCQUFXLElBQUksRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7O0FBR3pELFVBQVEsQ0FBQyxZQUFZLEVBQUUsWUFBWTs7O0FBQ2pDLFFBQUksR0FBRyxZQUFBLENBQUM7O0FBRVIsVUFBTSxDQUFDOzs7Ozs2Q0FDTyxvQ0FBeUI7OztBQUFyQyxlQUFHOzs2Q0FDRyxHQUFHLENBQUMsUUFBUSxDQUNoQixZQUFZO0FBQ1Ysb0JBQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQzthQUNwQixDQUNGOzs7Ozs7O0tBQ0YsQ0FBQyxDQUFDOztBQUVILGFBQVMsQ0FBQzs7Ozs7NkNBQ0YsR0FBRyxDQUFDLFFBQVEsQ0FDaEIsWUFBWTtBQUNWLGVBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUM5QixlQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ2YsQ0FDRjs7Ozs2Q0FDSyxtQkFBUSxHQUFHLENBQUM7Ozs7Ozs7S0FDbkIsQ0FBQyxDQUFDOztBQUVILE1BQUUsQ0FBQyxrREFBa0QsRUFBRTtVQUNqRCxHQUFHOzs7Ozs2Q0FBUyxHQUFHLENBQUMsUUFBUSxDQUMxQixZQUFZO0FBQ1Ysc0JBQVEsQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDdEMsZUFBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNkLGVBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQ2xDLGVBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDZCxrQkFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDLFlBQVksRUFBRSxDQUFDO0FBQ2pDLGVBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUNoQixxQkFBTyxTQUFTLENBQUM7YUFDbEIsQ0FDRjs7O0FBVkcsZUFBRzs7QUFXUCxlQUFHLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0FBQzVDLGVBQUcsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLGlEQUFpRCxDQUFDLENBQUM7Ozs7Ozs7S0FDdkUsQ0FBQyxDQUFDO0dBQ0osQ0FBQyxDQUFDO0NBQ0osQ0FBQyxDQUFDIiwiZmlsZSI6InRlc3QvdWlhdXRvL2FsZXJ0LXNwZWNzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdHJhbnNwaWxlOm1vY2hhXG4vKiBnbG9iYWxzICQsIHJvb3RQYWdlLCBhbGVydHMgKi9cblxuaW1wb3J0IHsgaW5zdHJ1bWVudHNJbnN0YW5jZUluaXQsIGdsb2JhbEluaXQsIGtpbGxBbGwgfSBmcm9tICcuL2Jhc2UnO1xuXG5pbnN0cnVtZW50c0luc3RhbmNlSW5pdDtcblxuZGVzY3JpYmUoJ2FsYXJtJywgZnVuY3Rpb24gKCkge1xuICBsZXQgaW1wb3J0cyA9IHsgcG9zdDogW1xuICAgICd1aWF1dG8vbGliL2FsZXJ0cy5qcycsXG4gICAgJ3VpYXV0by9saWIvc3RhdHVzLmpzJyxcbiAgICAndWlhdXRvL2xpYi9lbGVtZW50LXBhdGNoL25pbC1wYXRjaC5qcycsXG4gICAgJ3VpYXV0by9saWIvZWxlbWVudC1wYXRjaC9oZWxwZXItcGF0Y2guanMnLFxuICAgICd1aWF1dG8vbGliL21lY2hhbmljLWV4dC9iYXNpY3MtZXh0LmpzJyxcbiAgICAndWlhdXRvL2xpYi9tZWNoYW5pYy1leHQvdXRpbC1leHQuanMnLFxuICAgICd1aWF1dG8vbGliL21lY2hhbmljLWV4dC9sb29rdXAtZXh0LmpzJyxcbiAgICAndWlhdXRvL2xpYi9tZWNoYW5pYy1leHQvYWxlcnQtZXh0LmpzJ1xuICBdfTtcblxuICBnbG9iYWxJbml0KHRoaXMsIHtpbXBvcnRzOiBpbXBvcnRzLCBib290c3RyYXA6ICdiYXNpYyd9KTtcblxuXG4gIGRlc2NyaWJlKCd0ZXh0ZmllbGRzJywgZnVuY3Rpb24gKCkge1xuICAgIGxldCBjdHg7XG5cbiAgICBiZWZvcmUoYXN5bmMgKCkgPT4ge1xuICAgICAgY3R4ID0gYXdhaXQgaW5zdHJ1bWVudHNJbnN0YW5jZUluaXQoKTtcbiAgICAgIGF3YWl0IGN0eC5leGVjRnVuYyhcbiAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGFsZXJ0cy5jb25maWd1cmUoKTtcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIGFmdGVyRWFjaChhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCBjdHguZXhlY0Z1bmMoXG4gICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAkKCcjVUlDYXRhbG9nJykuZmlyc3QoKS50YXAoKTtcbiAgICAgICAgICAkLmRlbGF5KDEwMDApO1xuICAgICAgICB9XG4gICAgICApO1xuICAgICAgYXdhaXQga2lsbEFsbChjdHgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZXRyaWV2ZSBhbGVydCB0ZXh0IGFuZCB0aGVuIGFjY2VwdCBhbGVydCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGxldCByZXMgPSBhd2FpdCBjdHguZXhlY0Z1bmMoXG4gICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByb290UGFnZS5jbGlja01lbnVJdGVtKCdBbGVydCBWaWV3cycpO1xuICAgICAgICAgICQuZGVsYXkoMjAwMCk7XG4gICAgICAgICAgJCgnI09rYXkgLyBDYW5jZWwnKS5maXJzdCgpLnRhcCgpO1xuICAgICAgICAgICQuZGVsYXkoMjAwMCk7XG4gICAgICAgICAgdmFyIGFsZXJ0VGV4dCA9ICQuZ2V0QWxlcnRUZXh0KCk7XG4gICAgICAgICAgJC5hY2NlcHRBbGVydCgpO1xuICAgICAgICAgIHJldHVybiBhbGVydFRleHQ7XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgICByZXMuc2hvdWxkLmluY2x1ZGUoJ0EgU2hvcnQgVGl0bGUgSXMgQmVzdCcpO1xuICAgICAgcmVzLnNob3VsZC5pbmNsdWRlKCdBIG1lc3NhZ2Ugc2hvdWxkIGJlIGEgc2hvcnQsIGNvbXBsZXRlIHNlbnRlbmNlLicpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl19
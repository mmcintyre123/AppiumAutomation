require('source-map-support').install();

/* globals $ */

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _base = require('./base');

var _appiumXcode = require('appium-xcode');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

describe('commands', function () {
  var _this = this;

  (0, _base.globalInit)(this, { bootstrap: 'basic' });
  var numCommands = 100;
  before(function callee$1$0() {
    var xcodeVersion;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap((0, _appiumXcode.getVersion)());

        case 2:
          xcodeVersion = context$2$0.sent;

          if (xcodeVersion[0] >= 7) {
            numCommands = 50;
          }

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  describe('simple sequences', function () {
    var _this2 = this;

    var ctx = undefined;
    before(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _base.instrumentsInstanceInit)());

          case 2:
            ctx = context$3$0.sent;

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this2);
    });
    after(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _base.killAll)(ctx));

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this2);
    });

    it('should send one valid command returning a value', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(ctx.sendCommand("'123'"));

          case 2:
            context$3$0.sent.should.equal('123');

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this2);
    });

    it('should send one valid command returning empty value', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(ctx.sendCommand("$.warn('starting')"));

          case 2:
            context$3$0.sent.should.equal('');

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this2);
    });

    it('should respond to invalid command and not die', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(ctx.sendCommand('i_am_invalid()').should.be.rejectedWith(/Can't find variable: i_am_invalid/));

          case 2:
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(ctx.sendCommand("$.warn('still alive')"));

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this2);
    });

    it('should repond to 10 commands in a row', function callee$2$0() {
      var seq;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        var _this4 = this;

        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            seq = [];

            _lodash2['default'].times(10, function (i) {
              var _this3 = this;

              seq.push(function callee$4$0() {
                return _regeneratorRuntime.async(function callee$4$0$(context$5$0) {
                  while (1) switch (context$5$0.prev = context$5$0.next) {
                    case 0:
                      context$5$0.next = 2;
                      return _regeneratorRuntime.awrap(ctx.sendCommand('(function () { return ' + i + '})()'));

                    case 2:
                      context$5$0.t0 = i;
                      context$5$0.sent.should.equal(context$5$0.t0);

                    case 4:
                    case 'end':
                      return context$5$0.stop();
                  }
                }, null, _this3);
              });
            });
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(_bluebird2['default'].reduce(seq, function callee$3$0(res, task) {
              return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                while (1) switch (context$4$0.prev = context$4$0.next) {
                  case 0:
                    context$4$0.next = 2;
                    return _regeneratorRuntime.awrap(res);

                  case 2:
                    return context$4$0.abrupt('return', task());

                  case 3:
                  case 'end':
                    return context$4$0.stop();
                }
              }, null, _this4);
            }, null));

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this2);
    });
  });

  describe('sending ' + numCommands + ' valid commands', function () {
    var ctx = undefined;
    before(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _base.instrumentsInstanceInit)());

          case 2:
            ctx = context$3$0.sent;

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    after(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _base.killAll)(ctx));

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    it('should work', function callee$2$0() {
      var seq;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        var _this5 = this;

        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            seq = [];

            _lodash2['default'].times(numCommands, function (i) {
              seq.push(function callee$4$0() {
                return _regeneratorRuntime.async(function callee$4$0$(context$5$0) {
                  while (1) switch (context$5$0.prev = context$5$0.next) {
                    case 0:
                      context$5$0.next = 2;
                      return _regeneratorRuntime.awrap(ctx.sendCommand('(function () { return "' + i + '"})()'));

                    case 2:
                      context$5$0.t0 = i.toString();
                      context$5$0.sent.should.equal(context$5$0.t0);

                    case 4:
                    case 'end':
                      return context$5$0.stop();
                  }
                }, null, _this5);
              });
            });
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(_bluebird2['default'].reduce(seq, function callee$3$0(res, task) {
              return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                while (1) switch (context$4$0.prev = context$4$0.next) {
                  case 0:
                    context$4$0.next = 2;
                    return _regeneratorRuntime.awrap(res);

                  case 2:
                    return context$4$0.abrupt('return', task());

                  case 3:
                  case 'end':
                    return context$4$0.stop();
                }
              }, null, _this5);
            }, null));

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  });

  describe('sending ' + numCommands + ' alternating valid and invalid', function () {
    var ctx = undefined;
    before(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _base.instrumentsInstanceInit)());

          case 2:
            ctx = context$3$0.sent;

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    after(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _base.killAll)(ctx));

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    it('should work', function callee$2$0() {
      var seq;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        var _this6 = this;

        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            seq = [];

            _lodash2['default'].times(numCommands, function (i) {
              if (i % 2 === 0) seq.push(function callee$4$0() {
                return _regeneratorRuntime.async(function callee$4$0$(context$5$0) {
                  while (1) switch (context$5$0.prev = context$5$0.next) {
                    case 0:
                      context$5$0.next = 2;
                      return _regeneratorRuntime.awrap(ctx.sendCommand('(function () { return "' + i + '"})()'));

                    case 2:
                      context$5$0.t0 = i.toString();
                      context$5$0.sent.should.equal(context$5$0.t0);

                    case 4:
                    case 'end':
                      return context$5$0.stop();
                  }
                }, null, _this6);
              });else
                // if ((i+1)%10 === 0) console.log('sent:', (i+1));
                seq.push(function callee$4$0() {
                  return _regeneratorRuntime.async(function callee$4$0$(context$5$0) {
                    while (1) switch (context$5$0.prev = context$5$0.next) {
                      case 0:
                        context$5$0.next = 2;
                        return _regeneratorRuntime.awrap(ctx.sendCommand('(ffffunction () { return "' + i + '"})()').should.be.rejectedWith(/Unexpected token/));

                      case 2:
                      case 'end':
                        return context$5$0.stop();
                    }
                  }, null, _this6);
                });
            });
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(_bluebird2['default'].reduce(seq, function callee$3$0(res, task) {
              return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                while (1) switch (context$4$0.prev = context$4$0.next) {
                  case 0:
                    context$4$0.next = 2;
                    return _regeneratorRuntime.awrap(res);

                  case 2:
                    return context$4$0.abrupt('return', task());

                  case 3:
                  case 'end':
                    return context$4$0.stop();
                }
              }, null, _this6);
            }, null));

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  });

  describe('command with big result', function () {
    var ctx = undefined;
    before(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _base.instrumentsInstanceInit)());

          case 2:
            ctx = context$3$0.sent;

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    after(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _base.killAll)(ctx));

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    // UIAuto code
    var configureUIAuto = function configureUIAuto() {
      $.extend($, {
        oneMamaLongString: function oneMamaLongString(n, mapping) {
          var i;
          if (!mapping) {
            mapping = [];
            for (i = 0; i < n; i++) {
              mapping.push(i);
            }
          }
          var main = "";
          for (i = 0; i < n; i++) {
            main += mapping[i % 10];
          }
          return main;
        },

        oneMamaHugeTree: function oneMamaHugeTree(n, d) {
          function addChildren(root, depth) {
            if (depth === d) return;
            root.children = {};
            var i;
            for (i = 0; i < n; i++) {
              root.children['c' + i] = { name: 'child ' + i };
              addChildren(root.children['c' + i], depth + 1);
            }
          }
          var root = { name: 'root' };
          addChildren(root, 0);
          return root;
        }

      });
    };

    before(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(ctx.execFunc(configureUIAuto));

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    var testN = function testN(n) {
      var s;
      return _regeneratorRuntime.async(function testN$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(ctx.sendCommand('$.oneMamaLongString(' + n + ')'));

          case 2:
            s = context$3$0.sent;

            s.should.have.length(n);
            _lodash2['default'].times(n, function (i) {
              parseInt(s[i], 10).should.equal(i % 10);
            });

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    };

    it('should work a small string', function () {
      return testN(1000);
    });

    it('should work a medium string', function () {
      return testN(100000);
    });

    it('should work a big string', function () {
      return testN(1000000);
    });

    var testNWithSpaces = function testNWithSpaces(n) {
      var s;
      return _regeneratorRuntime.async(function testNWithSpaces$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(ctx.sendCommand('$.oneMamaLongString(' + n + ', [0,1,2,3,4,\' \',6,7,8,9])'));

          case 2:
            s = context$3$0.sent;

            s.should.have.length(n);
            _lodash2['default'].times(n, function (i) {
              if (i % 10 === 5) {
                s[i].should.equal(' ');
              } else {
                parseInt(s[i], 10).should.equal(i % 10);
              }
            });

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    };

    it('should work with a big string with spaces', function () {
      return testNWithSpaces(200000);
    });

    var getHugeTree = function getHugeTree(n, d) {
      return _regeneratorRuntime.async(function getHugeTree$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            return context$3$0.abrupt('return', ctx.sendCommand('$.oneMamaHugeTree(' + n + ', ' + d + ')'));

          case 1:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    };

    it('should work with a medium tree', function callee$2$0() {
      var res;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(getHugeTree(5, 3));

          case 2:
            res = context$3$0.sent;

            res.name.should.equal('root');
            res.children.c1.children.c2.children.c3.name.should.equal('child 3');
            JSON.stringify(res).length.should.be.above(4000);

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    it('should work with a huge tree', function callee$2$0() {
      var res;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(getHugeTree(5, 7));

          case 2:
            res = context$3$0.sent;

            res.name.should.equal('root');
            res.children.c1.children.c2.children.c3.children.c2.name.should.equal('child 2');
            JSON.stringify(res).length.should.be.above(2000000);

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  });
});

// xcode 7 is a bit slow.

// if ((i+1)%10 === 0) console.log('sent:', (i+1));

// if ((i+1)%10 === 0) console.log('sent:', (i+1));
//# sourceMappingURL=data:application/json;base64,
// The Command Proxy relays UIAuto message to and from Appium. It is also the
// UIAuto facade for Appium.
//
// The message route is the following:
// Appium <--> Command Proxy <--> Instruments
// The medium between Instruments and Command Proxy is the command-proxy-client
// script.
//
// Command Proxy --> Instruments message format: {cmd:"<CMD>"}
//
// Instruments --> Command Proxy message format:
// <one char message type>,<stringified json data>
// <stringified json data> format:
// {status:<status>, value:<result>}

'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _uiautoResponse = require('./uiauto-response');

var _uiautoResponse2 = _interopRequireDefault(_uiautoResponse);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _through = require('through');

var _through2 = _interopRequireDefault(_through);

var _net = require('net');

var _net2 = _interopRequireDefault(_net);

var _appiumSupport = require('appium-support');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _appiumBaseDriver = require('appium-base-driver');

var MORE_COMMAND = '#more';
var DEFAULT_INSTRUMENTS_SOCKET = '/tmp/instruments_sock';

var UIAutoClient = (function () {
  function UIAutoClient() {
    var sock = arguments.length <= 0 || arguments[0] === undefined ? '/tmp/instruments_sock' : arguments[0];

    _classCallCheck(this, UIAutoClient);

    this.curCommand = null;
    this.onReceiveCommand = null;
    this.commandQueue = [];
    this.sock = sock;
    this.socketServer = null;
    this.hasConnected = false;
    this.currentSocket = null;
  }

  _createClass(UIAutoClient, [{
    key: 'sendCommand',
    value: function sendCommand(cmd) {
      var cmdPromise;
      return _regeneratorRuntime.async(function sendCommand$(context$2$0) {
        var _this = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            cmdPromise = new _bluebird2['default'](function (resolve, reject) {
              var cb = function cb(result) {
                // get back a JSONWP object, so decode and
                // just return the value
                if (result.status === 0) {
                  resolve(result.value);
                } else if (result.status) {
                  var jsonwpError = (0, _appiumBaseDriver.errorFromCode)(result.status, result.value);
                  reject(jsonwpError);
                } else {
                  reject(new Error(result.value));
                }
              };
              _this.commandQueue.push({ cmd: cmd, cb: cb });
              if (_lodash2['default'].isFunction(_this.onReceiveCommand)) {
                _this.onReceiveCommand();
              }
            });
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(cmdPromise);

          case 3:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 4:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }

    /*
     * Returns true if the resulting connecting is the first
     * socket connection for this proxy session
     */
  }, {
    key: 'start',
    value: function start() {
      var connectedPromise;
      return _regeneratorRuntime.async(function start$(context$2$0) {
        var _this2 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            connectedPromise = new _bluebird2['default'](function (resolve) {
              var response = new _uiautoResponse2['default']();
              _this2.socketServer = _net2['default'].createServer({ allowHalfOpen: true }, function (conn) {
                if (!_this2.hasConnected) {
                  _this2.hasConnected = true;
                  _logger2['default'].info('Instruments is ready to receive commands');
                  resolve(true);
                }
                // up with strings! down with buffers!
                conn.setEncoding('utf8');

                // keep track of this so that we can destroy the socket
                // when shutting down
                _this2.currentSocket = conn;

                conn.on('close', function () {
                  _this2.currentSocket = null;
                });

                // all data goes into buffer
                conn.pipe((0, _through2['default'])(function (data) {
                  _logger2['default'].debug('Socket data received (' + data.length + ' bytes)');
                  response.addData(data);
                }));

                // when all data is in, deal with it
                conn.on('end', function () {
                  // if we are midway through handling a command
                  // we want to try out the data, getting more if necessary
                  if (_this2.curCommand) {
                    var result = response.getResult();
                    if (result && !result.needsMoreData) {
                      // if we're done altogether, call the callback associated with the command
                      _this2.curCommand.cb(result);
                      _this2.curCommand = null;
                    } else {
                      if (result) {
                        _logger2['default'].debug('Not the last chunk, trying to get more');
                      } else {
                        _logger2['default'].debug('No result received. Continuing to try to get more');
                      }
                      // add a command to the queue, to request more data
                      _this2.commandQueue.unshift({ cmd: MORE_COMMAND, cb: _this2.curCommand.cb });
                    }
                  } else {
                    _logger2['default'].debug('Got a result when we were not expecting one! Ignoring it');
                    response.resetBuffer();
                  }

                  // set up a callback to handle the next command
                  var onReceiveCommand = function onReceiveCommand() {
                    _this2.onReceiveCommand = null;
                    _this2.curCommand = _this2.commandQueue.shift();
                    _logger2['default'].debug('Sending command to instruments: ' + _this2.curCommand.cmd);
                    conn.write(JSON.stringify({ cmd: _this2.curCommand.cmd }));
                    conn.end();
                  };
                  if (_this2.commandQueue.length) {
                    onReceiveCommand();
                  } else {
                    _this2.onReceiveCommand = onReceiveCommand;
                  }
                });
              });

              _this2.socketServer.on('close', function () {
                _logger2['default'].debug('Instruments socket server was closed');
              });
            });
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.rimraf(this.sock));

          case 3:
            context$2$0.next = 5;
            return _regeneratorRuntime.awrap((0, _appiumSupport.mkdirp)(_path2['default'].dirname(this.sock)));

          case 5:

            this.socketServer.listen(this.sock);
            _logger2['default'].debug('Instruments socket server started at ' + this.sock);

            context$2$0.next = 9;
            return _regeneratorRuntime.awrap(connectedPromise);

          case 9:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 10:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'shutdown',
    value: function shutdown() {
      return _regeneratorRuntime.async(function shutdown$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            // make sure clear out command cbs so we can't have any lingering cbs
            // if a socket request makes it through after exit somehow
            this.curCommand = null;
            this.onReceiveCommand = null;

            if (this.currentSocket) {
              _logger2['default'].debug('Destroying instruments client socket.');
              this.currentSocket.end();
              this.currentSocket.destroy();
              this.currentSocket = null;
            }

            if (!this.socketServer) {
              context$2$0.next = 8;
              break;
            }

            _logger2['default'].debug('Closing socket server.');
            context$2$0.next = 7;
            return _regeneratorRuntime.awrap(_bluebird2['default'].promisify(this.socketServer.close, this.socketServer)());

          case 7:
            this.socketServer = null;

          case 8:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'safeShutdown',
    value: function safeShutdown() {
      return _regeneratorRuntime.async(function safeShutdown$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug('Shutting down command proxy and ignoring any errors');
            context$2$0.prev = 1;
            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this.shutdown());

          case 4:
            context$2$0.next = 9;
            break;

          case 6:
            context$2$0.prev = 6;
            context$2$0.t0 = context$2$0['catch'](1);

            _logger2['default'].debug('Ignoring error: ' + context$2$0.t0);

          case 9:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[1, 6]]);
    }
  }]);

  return UIAutoClient;
})();

exports.UIAutoClient = UIAutoClient;
exports.DEFAULT_INSTRUMENTS_SOCKET = DEFAULT_INSTRUMENTS_SOCKET;
exports['default'] = UIAutoClient;

// only resolve the promise when the server that is created actually connects

// remove socket file if it currently exists

// create the new socket file
//# sourceMappingURL=data:application/json;base64,
// Generate a bootstrap for the UIAuto Instruments script containing
// the environment variables we need.

'use strict';

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _crypto = require('crypto');

var _crypto2 = _interopRequireDefault(_crypto);

var _appiumSupport = require('appium-support');

var _buildScript = require('./build-script');

var _buildScript2 = _interopRequireDefault(_buildScript);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _uiautoClient = require('./uiauto-client');

var BOOTSTRAP_JS_PATH = _path2['default'].resolve(__dirname, '..', '..', 'uiauto', 'bootstrap.js');
var COMMAND_PROXY_CLIENT_PATH = _path2['default'].resolve(__dirname, '..', 'lib', 'bin', 'command-proxy-client.js');
if (!__dirname.match(/build\/lib$/)) {
  BOOTSTRAP_JS_PATH = _path2['default'].resolve(__dirname, '..', 'uiauto', 'bootstrap.js');
  COMMAND_PROXY_CLIENT_PATH = _path2['default'].resolve(__dirname, 'bin', 'command-proxy-client.js');
}

function getEnv() {
  var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  // build an object with the required properties for bootstrap
  return {
    nodePath: process.execPath,
    commandProxyClientPath: COMMAND_PROXY_CLIENT_PATH,
    instrumentsSock: opts.sock || _uiautoClient.DEFAULT_INSTRUMENTS_SOCKET,
    interKeyDelay: opts.interKeyDelay || null,
    justLoopInfinitely: opts.justLoopInfinitely,
    autoAcceptAlerts: opts.autoAcceptAlerts,
    autoDismissAlerts: opts.autoDismissAlerts,
    sendKeyStrategy: opts.sendKeyStrategy,
    initialLocation: opts.initialLocation
  };
}

function buildCode(opts) {
  var env, bootstrapJs, imports, bootstrapCode, lines, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _step$value, key, value, quote;

  return _regeneratorRuntime.async(function buildCode$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!opts.code) {
          context$1$0.next = 2;
          break;
        }

        return context$1$0.abrupt('return', opts.code);

      case 2:
        env = getEnv(opts);

        _logger2['default'].debug('Dynamic env: ' + JSON.stringify(env));

        bootstrapJs = BOOTSTRAP_JS_PATH;
        imports = opts.imports && opts.imports.pre ? opts.imports.pre : [];
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap((0, _buildScript2['default'])(bootstrapJs, imports));

      case 8:
        bootstrapCode = context$1$0.sent;
        lines = [];

        lines.push('// This file is automatically generated. Do not manually modify!');
        lines.push('');
        lines.push(bootstrapCode);
        lines.push('');
        lines.push('bootstrap({');
        // add each defined variable to the environment
        _iteratorNormalCompletion = true;
        _didIteratorError = false;
        _iteratorError = undefined;
        context$1$0.prev = 18;
        for (_iterator = _getIterator(_lodash2['default'].toPairs(env)); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          _step$value = _slicedToArray(_step.value, 2);
          key = _step$value[0];
          value = _step$value[1];

          if (!_lodash2['default'].isUndefined(value)) {
            quote = _lodash2['default'].isString(value) ? '\"' : '';

            lines.push('  "' + key + '": ' + quote + value + quote + ',');
          }
        }
        // get rid of the last comma that was added
        context$1$0.next = 26;
        break;

      case 22:
        context$1$0.prev = 22;
        context$1$0.t0 = context$1$0['catch'](18);
        _didIteratorError = true;
        _iteratorError = context$1$0.t0;

      case 26:
        context$1$0.prev = 26;
        context$1$0.prev = 27;

        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }

      case 29:
        context$1$0.prev = 29;

        if (!_didIteratorError) {
          context$1$0.next = 32;
          break;
        }

        throw _iteratorError;

      case 32:
        return context$1$0.finish(29);

      case 33:
        return context$1$0.finish(26);

      case 34:
        lines[lines.length - 1] = lines[lines.length - 1].replace(/,$/, '');
        lines.push('});');
        return context$1$0.abrupt('return', lines.join('\r\n'));

      case 37:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[18, 22, 26, 34], [27,, 29, 33]]);
}

function computeHash(code) {
  return _crypto2['default'].createHash('md5').update(code).digest('hex').substring(0, 16);
}

function getDynamicBootstrapDir() {
  var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  // figuring out where to store dynamic bootstrap
  var dynamicBootstrapDir = undefined;
  if (process.env.APPIUM_BOOTSTRAP_DIR) {
    // mainly for test
    dynamicBootstrapDir = process.env.APPIUM_BOOTSTRAP_DIR;
  } else if (process.env.HOME) {
    dynamicBootstrapDir = _path2['default'].resolve(process.env.HOME, 'Library/Application Support/appium/bootstrap');
  } else {
    // no user dir, using tmp
    dynamicBootstrapDir = _path2['default'].resolve(opts.tmpDir || '/tmp', 'appium/bootstrap');
  }
  return dynamicBootstrapDir;
}

function writeDynamicBootstrapIfNecessary(dynamicBootstrapDir, dynamicBootstrapPath, code, hash) {
  var codeIsGood, existingCode;
  return _regeneratorRuntime.async(function writeDynamicBootstrapIfNecessary$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap((0, _appiumSupport.mkdirp)(dynamicBootstrapDir));

      case 2:
        codeIsGood = true;
        context$1$0.prev = 3;
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(dynamicBootstrapPath));

      case 6:
        existingCode = context$1$0.sent;

        codeIsGood = computeHash(existingCode) === hash;
        context$1$0.next = 13;
        break;

      case 10:
        context$1$0.prev = 10;
        context$1$0.t0 = context$1$0['catch'](3);

        codeIsGood = false;

      case 13:
        if (!codeIsGood) {
          context$1$0.next = 17;
          break;
        }

        _logger2['default'].debug('Reusing dynamic bootstrap: ' + dynamicBootstrapPath);
        context$1$0.next = 20;
        break;

      case 17:
        _logger2['default'].debug('Creating or overwriting dynamic bootstrap: ' + dynamicBootstrapPath);
        context$1$0.next = 20;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.writeFile(dynamicBootstrapPath, code, { flag: 'w+' }));

      case 20:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[3, 10]]);
}

function prepareBootstrap() {
  var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
  var dynamicBootstrapDir, code, hash, dynamicBootstrapPath;
  return _regeneratorRuntime.async(function prepareBootstrap$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Preparing bootstrap code');

        dynamicBootstrapDir = getDynamicBootstrapDir(opts);

        _logger2['default'].debug('Dynamic bootstrap dir: ' + dynamicBootstrapDir);

        // building code and hash
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(buildCode(opts));

      case 5:
        code = context$1$0.sent;
        hash = computeHash(code);
        dynamicBootstrapPath = _path2['default'].resolve(dynamicBootstrapDir, 'bootstrap-' + hash + '.js');

        _logger2['default'].debug('Dynamic bootstrap code: ' + code.split('\n')[0] + '...');
        _logger2['default'].debug('Dynamic bootstrap path: ' + dynamicBootstrapPath);
        context$1$0.next = 12;
        return _regeneratorRuntime.awrap(writeDynamicBootstrapIfNecessary(dynamicBootstrapDir, dynamicBootstrapPath, code, hash));

      case 12:
        return context$1$0.abrupt('return', dynamicBootstrapPath);

      case 13:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

exports.prepareBootstrap = prepareBootstrap;
exports.getEnv = getEnv;

// only build the code if it hasn't been done before

// if special imports were sent in, make use of them

// generate the dynamic part of the bootstrap code
// with the environment set up properly

// check if there is existing code and it has the same hash

// write file if the old code is not the same
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9keW5hbWljLWJvb3RzdHJhcC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztvQkFHaUIsTUFBTTs7OztzQkFDVCxRQUFROzs7O3NCQUNILFFBQVE7Ozs7NkJBQ0EsZ0JBQWdCOzsyQkFDbkIsZ0JBQWdCOzs7O3NCQUN4QixVQUFVOzs7OzRCQUNpQixpQkFBaUI7O0FBRzVELElBQUksaUJBQWlCLEdBQUcsa0JBQUssT0FBTyxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxjQUFjLENBQUMsQ0FBQztBQUN0RixJQUFJLHlCQUF5QixHQUFHLGtCQUFLLE9BQU8sQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUseUJBQXlCLENBQUMsQ0FBQztBQUN2RyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsRUFBRTtBQUNuQyxtQkFBaUIsR0FBRyxrQkFBSyxPQUFPLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsY0FBYyxDQUFDLENBQUM7QUFDNUUsMkJBQXlCLEdBQUcsa0JBQUssT0FBTyxDQUFDLFNBQVMsRUFBRSxLQUFLLEVBQUUseUJBQXlCLENBQUMsQ0FBQztDQUN2Rjs7QUFFRCxTQUFTLE1BQU0sR0FBYTtNQUFYLElBQUkseURBQUcsRUFBRTs7O0FBRXhCLFNBQU87QUFDTCxZQUFRLEVBQUUsT0FBTyxDQUFDLFFBQVE7QUFDMUIsMEJBQXNCLEVBQUUseUJBQXlCO0FBQ2pELG1CQUFlLEVBQUUsSUFBSSxDQUFDLElBQUksNENBQThCO0FBQ3hELGlCQUFhLEVBQUUsSUFBSSxDQUFDLGFBQWEsSUFBSSxJQUFJO0FBQ3pDLHNCQUFrQixFQUFFLElBQUksQ0FBQyxrQkFBa0I7QUFDM0Msb0JBQWdCLEVBQUUsSUFBSSxDQUFDLGdCQUFnQjtBQUN2QyxxQkFBaUIsRUFBRSxJQUFJLENBQUMsaUJBQWlCO0FBQ3pDLG1CQUFl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QUFDLENBQUMsQ0FBQyxDQUFDLFNBQU0sQ0FBQztBQUMvRCw0QkFBSSxLQUFLLDhCQUE0QixvQkFBb0IsQ0FBRyxDQUFDOzt5Q0FDdkQsZ0NBQWdDLENBQUMsbUJBQW1CLEVBQ3hELG9CQUFvQixFQUFFLElBQUksRUFBRSxJQUFJLENBQUM7Ozs0Q0FFNUIsb0JBQW9COzs7Ozs7O0NBQzVCOztRQUVRLGdCQUFnQixHQUFoQixnQkFBZ0I7UUFBRSxNQUFNLEdBQU4sTUFBTSIsImZpbGUiOiJsaWIvZHluYW1pYy1ib290c3RyYXAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBHZW5lcmF0ZSBhIGJvb3RzdHJhcCBmb3IgdGhlIFVJQXV0byBJbnN0cnVtZW50cyBzY3JpcHQgY29udGFpbmluZ1xuLy8gdGhlIGVudmlyb25tZW50IHZhcmlhYmxlcyB3ZSBuZWVkLlxuXG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgY3J5cHRvIGZyb20gJ2NyeXB0byc7XG5pbXBvcnQgeyBmcywgbWtkaXJwIH0gZnJvbSAnYXBwaXVtLXN1cHBvcnQnO1xuaW1wb3J0IGJ1aWxkU2NyaXB0IGZyb20gJy4vYnVpbGQtc2NyaXB0JztcbmltcG9ydCBsb2cgZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IHsgREVGQVVMVF9JTlNUUlVNRU5UU19TT0NLRVQgfSBmcm9tICcuL3VpYXV0by1jbGllbnQnO1xuXG5cbmxldCBCT09UU1RSQVBfSlNfUEFUSCA9IHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICcuLicsICcuLicsICd1aWF1dG8nLCAnYm9vdHN0cmFwLmpzJyk7XG5sZXQgQ09NTUFORF9QUk9YWV9DTElFTlRfUEFUSCA9IHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICcuLicsICdsaWInLCAnYmluJywgJ2NvbW1hbmQtcHJveHktY2xpZW50LmpzJyk7XG5pZiAoIV9fZGlybmFtZS5tYXRjaCgvYnVpbGRcXC9saWIkLykpIHtcbiAgQk9PVFNUUkFQX0pTX1BBVEggPSBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnLi4nLCAndWlhdXRvJywgJ2Jvb3RzdHJhcC5qcycpO1xuICBDT01NQU5EX1BST1hZX0NMSUVOVF9QQVRIID0gcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJ2JpbicsICdjb21tYW5kLXByb3h5LWNsaWVudC5qcycpO1xufVxuXG5mdW5jdGlvbiBnZXRFbnYgKG9wdHMgPSB7fSkge1xuICAvLyBidWlsZCBhbiBvYmplY3Qgd2l0aCB0aGUgcmVxdWlyZWQgcHJvcGVydGllcyBmb3IgYm9vdHN0cmFwXG4gIHJldHVybiB7XG4gICAgbm9kZVBhdGg6IHByb2Nlc3MuZXhlY1BhdGgsXG4gICAgY29tbWFuZFByb3h5Q2xpZW50UGF0aDogQ09NTUFORF9QUk9YWV9DTElFTlRfUEFUSCxcbiAgICBpbnN0cnVtZW50c1NvY2s6IG9wdHMuc29jayB8fCBERUZBVUxUX0lOU1RSVU1FTlRTX1NPQ0tFVCxcbiAgICBpbnRlcktleURlbGF5OiBvcHRzLmludGVyS2V5RGVsYXkgfHwgbnVsbCxcbiAgICBqdXN0TG9vcEluZmluaXRlbHk6IG9wdHMuanVzdExvb3BJbmZpbml0ZWx5LFxuICAgIGF1dG9BY2NlcHRBbGVydHM6IG9wdHMuYXV0b0FjY2VwdEFsZXJ0cyxcbiAgICBhdXRvRGlzbWlzc0FsZXJ0czogb3B0cy5hdXRvRGlzbWlzc0FsZXJ0cyxcbiAgICBzZW5kS2V5U3RyYXRlZ3k6IG9wdHMuc2VuZEtleVN0cmF0ZWd5LFxuICAgIGluaXRpYWxMb2NhdGlvbjogb3B0cy5pbml0aWFsTG9jYXRpb24sXG4gIH07XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGJ1aWxkQ29kZSAob3B0cykge1xuICAvLyBvbmx5IGJ1aWxkIHRoZSBjb2RlIGlmIGl0IGhhc24ndCBiZWVuIGRvbmUgYmVmb3JlXG4gIGlmIChvcHRzLmNvZGUpIHJldHVybiBvcHRzLmNvZGU7XG5cbiAgbGV0IGVudiA9IGdldEVudihvcHRzKTtcbiAgbG9nLmRlYnVnKGBEeW5hbWljIGVudjogJHtKU09OLnN0cmluZ2lmeShlbnYpfWApO1xuXG4gIGxldCBib290c3RyYXBKcyA9IEJPT1RTVFJBUF9KU19QQVRIO1xuICAvLyBpZiBzcGVjaWFsIGltcG9ydHMgd2VyZSBzZW50IGluLCBtYWtlIHVzZSBvZiB0aGVtXG4gIGxldCBpbXBvcnRzID0gKG9wdHMuaW1wb3J0cyAmJiBvcHRzLmltcG9ydHMucHJlKSA/IG9wdHMuaW1wb3J0cy5wcmUgOiBbXTtcbiAgbGV0IGJvb3RzdHJhcENvZGUgPSBhd2FpdCBidWlsZFNjcmlwdChib290c3RyYXBKcywgaW1wb3J0cyk7XG5cbiAgLy8gZ2VuZXJhdGUgdGhlIGR5bmFtaWMgcGFydCBvZiB0aGUgYm9vdHN0cmFwIGNvZGVcbiAgLy8gd2l0aCB0aGUgZW52aXJvbm1lbnQgc2V0IHVwIHByb3Blcmx5XG4gIGxldCBsaW5lcyA9IFtdO1xuICBsaW5lcy5wdXNoKCcvLyBUaGlzIGZpbGUgaXMgYXV0b21hdGljYWxseSBnZW5lcmF0ZWQuIERvIG5vdCBtYW51YWxseSBtb2RpZnkhJyk7XG4gIGxpbmVzLnB1c2goJycpO1xuICBsaW5lcy5wdXNoKGJvb3RzdHJhcENvZGUpO1xuICBsaW5lcy5wdXNoKCcnKTtcbiAgbGluZXMucHVzaCgnYm9vdHN0cmFwKHsnKTtcbiAgLy8gYWRkIGVhY2ggZGVmaW5lZCB2YXJpYWJsZSB0byB0aGUgZW52aXJvbm1lbnRcbiAgZm9yIChsZXQgW2tleSwgdmFsdWVdIG9mIF8udG9QYWlycyhlbnYpKSB7XG4gICAgaWYgKCFfLmlzVW5kZWZpbmVkKHZhbHVlKSkge1xuICAgICAgbGV0IHF1b3RlID0gXy5pc1N0cmluZyh2YWx1ZSkgPyAnXFxcIicgOiAnJztcbiAgICAgIGxpbmVzLnB1c2goYCAgXCIke2tleX1cIjogJHtxdW90ZX0ke3ZhbHVlfSR7cXVvdGV9LGApO1xuICAgIH1cbiAgfVxuICAvLyBnZXQgcmlkIG9mIHRoZSBsYXN0IGNvbW1hIHRoYXQgd2FzIGFkZGVkXG4gIGxpbmVzW2xpbmVzLmxlbmd0aCAtIDFdID0gbGluZXNbbGluZXMubGVuZ3RoIC0gMV0ucmVwbGFjZSgvLCQvLCAnJyk7XG4gIGxpbmVzLnB1c2goJ30pOycpO1xuICByZXR1cm4gbGluZXMuam9pbignXFxyXFxuJyk7XG59XG5cbmZ1bmN0aW9uIGNvbXB1dGVIYXNoIChjb2RlKSB7XG4gIHJldHVybiBjcnlwdG9cbiAgICAuY3JlYXRlSGFzaCgnbWQ1JylcbiAgICAudXBkYXRlKGNvZGUpXG4gICAgLmRpZ2VzdCgnaGV4JylcbiAgICAuc3Vic3RyaW5nKDAsIDE2KTtcbn1cblxuZnVuY3Rpb24gZ2V0RHluYW1pY0Jvb3RzdHJhcERpciAob3B0cyA9IHt9KSB7XG4gIC8vIGZpZ3VyaW5nIG91dCB3aGVyZSB0byBzdG9yZSBkeW5hbWljIGJvb3RzdHJhcFxuICBsZXQgZHluYW1pY0Jvb3RzdHJhcERpcjtcbiAgaWYgKHByb2Nlc3MuZW52LkFQUElVTV9CT09UU1RSQVBfRElSKSB7XG4gICAgLy8gbWFpbmx5IGZvciB0ZXN0XG4gICAgZHluYW1pY0Jvb3RzdHJhcERpciA9IHByb2Nlc3MuZW52LkFQUElVTV9CT09UU1RSQVBfRElSO1xuICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52LkhPTUUpIHtcbiAgICBkeW5hbWljQm9vdHN0cmFwRGlyID0gcGF0aC5yZXNvbHZlKHByb2Nlc3MuZW52LkhPTUUsXG4gICAgICAnTGlicmFyeS9BcHBsaWNhdGlvbiBTdXBwb3J0L2FwcGl1bS9ib290c3RyYXAnKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBubyB1c2VyIGRpciwgdXNpbmcgdG1wXG4gICAgZHluYW1pY0Jvb3RzdHJhcERpciA9IHBhdGgucmVzb2x2ZShvcHRzLnRtcERpciB8fCAnL3RtcCcsICdhcHBpdW0vYm9vdHN0cmFwJyk7XG4gIH1cbiAgcmV0dXJuIGR5bmFtaWNCb290c3RyYXBEaXI7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHdyaXRlRHluYW1pY0Jvb3RzdHJhcElmTmVjZXNzYXJ5IChkeW5hbWljQm9vdHN0cmFwRGlyLCBkeW5hbWljQm9vdHN0cmFwUGF0aCwgY29kZSwgaGFzaCkge1xuICBhd2FpdCBta2RpcnAoZHluYW1pY0Jvb3RzdHJhcERpcik7XG5cbiAgLy8gY2hlY2sgaWYgdGhlcmUgaXMgZXhpc3RpbmcgY29kZSBhbmQgaXQgaGFzIHRoZSBzYW1lIGhhc2hcbiAgbGV0IGNvZGVJc0dvb2QgPSB0cnVlO1xuICB0cnkge1xuICAgIGxldCBleGlzdGluZ0NvZGUgPSBhd2FpdCBmcy5yZWFkRmlsZShkeW5hbWljQm9vdHN0cmFwUGF0aCk7XG4gICAgY29kZUlzR29vZCA9IGNvbXB1dGVIYXNoKGV4aXN0aW5nQ29kZSkgPT09IGhhc2g7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGNvZGVJc0dvb2QgPSBmYWxzZTtcbiAgfVxuXG4gIC8vIHdyaXRlIGZpbGUgaWYgdGhlIG9sZCBjb2RlIGlzIG5vdCB0aGUgc2FtZVxuICBpZiAoY29kZUlzR29vZCkge1xuICAgIGxvZy5kZWJ1ZyhgUmV1c2luZyBkeW5hbWljIGJvb3RzdHJhcDogJHtkeW5hbWljQm9vdHN0cmFwUGF0aH1gKTtcbiAgfSBlbHNlIHtcbiAgICBsb2cuZGVidWcoYENyZWF0aW5nIG9yIG92ZXJ3cml0aW5nIGR5bmFtaWMgYm9vdHN0cmFwOiAke2R5bmFtaWNCb290c3RyYXBQYXRofWApO1xuICAgIGF3YWl0IGZzLndyaXRlRmlsZShkeW5hbWljQm9vdHN0cmFwUGF0aCwgY29kZSwge2ZsYWc6ICd3Kyd9KTtcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBwcmVwYXJlQm9vdHN0cmFwIChvcHRzID0ge30pIHtcbiAgbG9nLmRlYnVnKCdQcmVwYXJpbmcgYm9vdHN0cmFwIGNvZGUnKTtcblxuICBsZXQgZHluYW1pY0Jvb3RzdHJhcERpciA9IGdldER5bmFtaWNCb290c3RyYXBEaXIob3B0cyk7XG4gIGxvZy5kZWJ1ZyhgRHluYW1pYyBib290c3RyYXAgZGlyOiAke2R5bmFtaWNCb290c3RyYXBEaXJ9YCk7XG5cbiAgLy8gYnVpbGRpbmcgY29kZSBhbmQgaGFzaFxuICBsZXQgY29kZSA9IGF3YWl0IGJ1aWxkQ29kZShvcHRzKTtcbiAgbGV0IGhhc2ggPSBjb21wdXRlSGFzaChjb2RlKTtcbiAgbGV0IGR5bmFtaWNCb290c3RyYXBQYXRoID0gcGF0aC5yZXNvbHZlKGR5bmFtaWNCb290c3RyYXBEaXIsIGBib290c3RyYXAtJHtoYXNofS5qc2ApO1xuICBsb2cuZGVidWcoYER5bmFtaWMgYm9vdHN0cmFwIGNvZGU6ICR7Y29kZS5zcGxpdCgnXFxuJylbMF19Li4uYCk7XG4gIGxvZy5kZWJ1ZyhgRHluYW1pYyBib290c3RyYXAgcGF0aDogJHtkeW5hbWljQm9vdHN0cmFwUGF0aH1gKTtcbiAgYXdhaXQgd3JpdGVEeW5hbWljQm9vdHN0cmFwSWZOZWNlc3NhcnkoZHluYW1pY0Jvb3RzdHJhcERpcixcbiAgICBkeW5hbWljQm9vdHN0cmFwUGF0aCwgY29kZSwgaGFzaCk7XG5cbiAgcmV0dXJuIGR5bmFtaWNCb290c3RyYXBQYXRoO1xufVxuXG5leHBvcnQgeyBwcmVwYXJlQm9vdHN0cmFwLCBnZXRFbnYgfTtcbiJdfQ==
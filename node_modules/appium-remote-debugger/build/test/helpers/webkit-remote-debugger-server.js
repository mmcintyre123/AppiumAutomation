require('source-map-support').install();

'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _http = require('http');

var _http2 = _interopRequireDefault(_http);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _ws = require('ws');

var _ws2 = _interopRequireDefault(_ws);

var _appiumLogger = require('appium-logger');

var log = (0, _appiumLogger.getLogger)('RemoteDebugger');
var WebSocketServer = _ws2['default'].Server;

// fake server for allowing both http requests and
// websocket requests, as needed to test Appium's
// version of webkit remote debugging support

var WebKitRemoteDebuggerServer = (function () {
  function WebKitRemoteDebuggerServer() {
    _classCallCheck(this, WebKitRemoteDebuggerServer);

    this.server = null;
    this.websocketServer = null;
    this.nextResponse = null;
  }

  // start the server
  // if a websocket server is needed, pass in `true`

  _createClass(WebKitRemoteDebuggerServer, [{
    key: 'start',
    value: function start() {
      var ws = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];
      return _regeneratorRuntime.async(function start$(context$2$0) {
        var _this = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (ws) {
              context$2$0.next = 4;
              break;
            }

            return context$2$0.abrupt('return', new _bluebird2['default'](function (resolve) {
              _this.server = _http2['default'].createServer(function (req, res) {
                res.writeHead(200, { 'Content-Type': 'application/json' });
                if (_this.nextResponse) {
                  res.end(JSON.stringify(_this.nextResponse));
                  _this.nextResponse = null;
                } else {
                  res.end(JSON.stringify({ id: 2, type: 'real' }));
                }
              });
              _this.server.listen(1337, 'localhost', resolve);
              log.debug('Server running at http://localhost:1337/');
            }));

          case 4:
            // need a fake websocket server
            // but it doesn't need to do anything but connect and disconnect
            this.ws = true;
            return context$2$0.abrupt('return', new _bluebird2['default'](function (resolve) {
              _this.server = new WebSocketServer({ host: 'localhost', port: 1337 }, resolve);
            }));

          case 6:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }

    // stop one or both of the servers.
  }, {
    key: 'stop',
    value: function stop() {
      return _regeneratorRuntime.async(function stop$(context$2$0) {
        var _this2 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (this.ws) {
              context$2$0.next = 4;
              break;
            }

            return context$2$0.abrupt('return', new _bluebird2['default'](function (resolve) {
              if (_this2.server) {
                _this2.server.close(function (err) {
                  resolve('Stopped listening: ' + err);
                });
              } else {
                resolve('Not listening.');
              }
            }));

          case 4:
            // websocket server isn't asynchronous
            this.server.close();
            return context$2$0.abrupt('return', _bluebird2['default'].resolve());

          case 6:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }

    // set what the next call to the http server will respond with
  }, {
    key: 'respondWith',
    value: function respondWith(response) {
      this.nextResponse = response;
    }
  }]);

  return WebKitRemoteDebuggerServer;
})();

exports.WebKitRemoteDebuggerServer = WebKitRemoteDebuggerServer;

// just need a simple http server for non-websocket calls
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvaGVscGVycy93ZWJraXQtcmVtb3RlLWRlYnVnZ2VyLXNlcnZlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O29CQUVpQixNQUFNOzs7O3dCQUNILFVBQVU7Ozs7a0JBQ2YsSUFBSTs7Ozs0QkFDTyxlQUFlOztBQUV6QyxJQUFNLEdBQUcsR0FBRyw2QkFBVSxnQkFBZ0IsQ0FBQyxDQUFDO0FBQ3hDLElBQUksZUFBZSxHQUFHLGdCQUFHLE1BQU0sQ0FBQzs7Ozs7O0lBTTFCLDBCQUEwQjtBQUNsQixXQURSLDBCQUEwQixHQUNmOzBCQURYLDBCQUEwQjs7QUFFNUIsUUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7QUFDbkIsUUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7QUFDNUIsUUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7R0FDMUI7Ozs7O2VBTEcsMEJBQTBCOztXQVNsQjtVQUFDLEVBQUUseURBQUcsS0FBSzs7Ozs7O2dCQUNoQixFQUFFOzs7OztnREFFRSwwQkFBWSxVQUFDLE9BQU8sRUFBSztBQUM5QixvQkFBSyxNQUFNLEdBQUcsa0JBQUssWUFBWSxDQUFDLFVBQUMsR0FBRyxFQUFFLEdBQUcsRUFBSztBQUM1QyxtQkFBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsRUFBQyxjQUFjLEVBQUUsa0JBQWtCLEVBQUMsQ0FBQyxDQUFDO0FBQ3pELG9CQUFJLE1BQUssWUFBWSxFQUFFO0FBQ3JCLHFCQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBSyxZQUFZLENBQUMsQ0FBQyxDQUFDO0FBQzNDLHdCQUFLLFlBQVksR0FBRyxJQUFJLENBQUM7aUJBQzFCLE1BQU07QUFDTCxxQkFBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUNoRDtlQUNGLENBQUMsQ0FBQztBQUNILG9CQUFLLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLFdBQVcsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUMvQyxpQkFBRyxDQUFDLEtBQUssQ0FBQywwQ0FBMEMsQ0FBQyxDQUFDO2FBQ3ZELENBQUM7Ozs7O0FBSUYsZ0JBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDO2dEQUNSLDBCQUFZLFVBQUMsT0FBTyxFQUFLO0FBQzlCLG9CQUFLLE1BQU0sR0FBRyxJQUFJLGVBQWUsQ0FBQyxFQUFDLElBQUksRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO2FBQzdFLENBQUM7Ozs7Ozs7S0FFTDs7Ozs7V0FHVTs7Ozs7O2dCQUNKLElBQUksQ0FBQyxFQUFFOzs7OztnREFDSCwwQkFBWSxVQUFDLE9BQU8sRUFBSztBQUM5QixrQkFBSSxPQUFLLE1BQU0sRUFBRTtBQUNmLHVCQUFLLE1BQU0sQ0FBQyxLQUFLLENBQUMsVUFBQyxHQUFHLEVBQUs7QUFDekIseUJBQU8seUJBQXVCLEdBQUcsQ0FBRyxDQUFDO2lCQUN0QyxDQUFDLENBQUM7ZUFDSixNQUFNO0FBQ0wsdUJBQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO2VBQzNCO2FBQ0YsQ0FBQzs7OztBQUdGLGdCQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO2dEQUNiLHNCQUFRLE9BQU8sRUFBRTs7Ozs7OztLQUUzQjs7Ozs7V0FHVyxxQkFBQyxRQUFRLEVBQUU7QUFDckIsVUFBSSxDQUFDLFlBQVksR0FBRyxRQUFRLENBQUM7S0FDOUI7OztTQXpERywwQkFBMEI7OztRQTREdkIsMEJBQTBCLEdBQTFCLDBCQUEwQiIsImZpbGUiOiJ0ZXN0L2hlbHBlcnMvd2Via2l0LXJlbW90ZS1kZWJ1Z2dlci1zZXJ2ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0cmFuc3BpbGU6bWFpblxuXG5pbXBvcnQgaHR0cCBmcm9tICdodHRwJztcbmltcG9ydCBQcm9taXNlIGZyb20gJ2JsdWViaXJkJztcbmltcG9ydCB3cyBmcm9tICd3cyc7XG5pbXBvcnQgeyBnZXRMb2dnZXIgfSBmcm9tICdhcHBpdW0tbG9nZ2VyJztcblxuY29uc3QgbG9nID0gZ2V0TG9nZ2VyKCdSZW1vdGVEZWJ1Z2dlcicpO1xubGV0IFdlYlNvY2tldFNlcnZlciA9IHdzLlNlcnZlcjtcblxuXG4vLyBmYWtlIHNlcnZlciBmb3IgYWxsb3dpbmcgYm90aCBodHRwIHJlcXVlc3RzIGFuZFxuLy8gd2Vic29ja2V0IHJlcXVlc3RzLCBhcyBuZWVkZWQgdG8gdGVzdCBBcHBpdW0nc1xuLy8gdmVyc2lvbiBvZiB3ZWJraXQgcmVtb3RlIGRlYnVnZ2luZyBzdXBwb3J0XG5jbGFzcyBXZWJLaXRSZW1vdGVEZWJ1Z2dlclNlcnZlciB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLnNlcnZlciA9IG51bGw7XG4gICAgdGhpcy53ZWJzb2NrZXRTZXJ2ZXIgPSBudWxsO1xuICAgIHRoaXMubmV4dFJlc3BvbnNlID0gbnVsbDtcbiAgfVxuXG4gIC8vIHN0YXJ0IHRoZSBzZXJ2ZXJcbiAgLy8gaWYgYSB3ZWJzb2NrZXQgc2VydmVyIGlzIG5lZWRlZCwgcGFzcyBpbiBgdHJ1ZWBcbiAgYXN5bmMgc3RhcnQgKHdzID0gZmFsc2UpIHtcbiAgICBpZiAoIXdzKSB7XG4gICAgICAvLyBqdXN0IG5lZWQgYSBzaW1wbGUgaHR0cCBzZXJ2ZXIgZm9yIG5vbi13ZWJzb2NrZXQgY2FsbHNcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICB0aGlzLnNlcnZlciA9IGh0dHAuY3JlYXRlU2VydmVyKChyZXEsIHJlcykgPT4ge1xuICAgICAgICAgIHJlcy53cml0ZUhlYWQoMjAwLCB7J0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ30pO1xuICAgICAgICAgIGlmICh0aGlzLm5leHRSZXNwb25zZSkge1xuICAgICAgICAgICAgcmVzLmVuZChKU09OLnN0cmluZ2lmeSh0aGlzLm5leHRSZXNwb25zZSkpO1xuICAgICAgICAgICAgdGhpcy5uZXh0UmVzcG9uc2UgPSBudWxsO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXMuZW5kKEpTT04uc3RyaW5naWZ5KHtpZDogMiwgdHlwZTogJ3JlYWwnfSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuc2VydmVyLmxpc3RlbigxMzM3LCAnbG9jYWxob3N0JywgcmVzb2x2ZSk7XG4gICAgICAgIGxvZy5kZWJ1ZygnU2VydmVyIHJ1bm5pbmcgYXQgaHR0cDovL2xvY2FsaG9zdDoxMzM3LycpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIG5lZWQgYSBmYWtlIHdlYnNvY2tldCBzZXJ2ZXJcbiAgICAgIC8vIGJ1dCBpdCBkb2Vzbid0IG5lZWQgdG8gZG8gYW55dGhpbmcgYnV0IGNvbm5lY3QgYW5kIGRpc2Nvbm5lY3RcbiAgICAgIHRoaXMud3MgPSB0cnVlO1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgIHRoaXMuc2VydmVyID0gbmV3IFdlYlNvY2tldFNlcnZlcih7aG9zdDogJ2xvY2FsaG9zdCcsIHBvcnQ6IDEzMzd9LCByZXNvbHZlKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIHN0b3Agb25lIG9yIGJvdGggb2YgdGhlIHNlcnZlcnMuXG4gIGFzeW5jIHN0b3AgKCkge1xuICAgIGlmICghdGhpcy53cykge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLnNlcnZlcikge1xuICAgICAgICAgIHRoaXMuc2VydmVyLmNsb3NlKChlcnIpID0+IHtcbiAgICAgICAgICAgIHJlc29sdmUoYFN0b3BwZWQgbGlzdGVuaW5nOiAke2Vycn1gKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXNvbHZlKCdOb3QgbGlzdGVuaW5nLicpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gd2Vic29ja2V0IHNlcnZlciBpc24ndCBhc3luY2hyb25vdXNcbiAgICAgIHRoaXMuc2VydmVyLmNsb3NlKCk7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuICB9XG5cbiAgLy8gc2V0IHdoYXQgdGhlIG5leHQgY2FsbCB0byB0aGUgaHR0cCBzZXJ2ZXIgd2lsbCByZXNwb25kIHdpdGhcbiAgcmVzcG9uZFdpdGggKHJlc3BvbnNlKSB7XG4gICAgdGhpcy5uZXh0UmVzcG9uc2UgPSByZXNwb25zZTtcbiAgfVxufVxuXG5leHBvcnQgeyBXZWJLaXRSZW1vdGVEZWJ1Z2dlclNlcnZlciB9O1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9

require('source-map-support').install();

'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _appiumBaseDriver = require('appium-base-driver');

var _remoteDebugger = require('./remote-debugger');

var _webkitRpcClient = require('./webkit-rpc-client');

var _webkitRpcClient2 = _interopRequireDefault(_webkitRpcClient);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

var _requestPromise = require('request-promise');

var _requestPromise2 = _interopRequireDefault(_requestPromise);

var _helpers = require('./helpers');

var WebKitRemoteDebugger = (function (_RemoteDebugger) {
  _inherits(WebKitRemoteDebugger, _RemoteDebugger);

  function WebKitRemoteDebugger() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, WebKitRemoteDebugger);

    _get(Object.getPrototypeOf(WebKitRemoteDebugger.prototype), 'constructor', this).call(this, _lodash2['default'].defaults({ debuggerType: _remoteDebugger.DEBUGGER_TYPES.webkit }, opts));

    // used to store callback types when sending requests
    this.dataMethods = {};
  }

  _createClass(WebKitRemoteDebugger, [{
    key: 'connect',
    value: function connect(pageId) {
      return _regeneratorRuntime.async(function connect$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            this.rpcClient = new _webkitRpcClient2['default'](this.host, this.port);
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(this.rpcClient.connect(pageId));

          case 3:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'disconnect',
    value: function disconnect() {
      if (this.rpcClient && this.rpcClient.isConnected()) {
        this.rpcClient.disconnect();
      }
    }
  }, {
    key: 'isConnected',
    value: function isConnected() {
      return !!(this.rpcClient && this.rpcClient.isConnected());
    }
  }, {
    key: 'pageArrayFromJson',
    value: function pageArrayFromJson() {
      var ignoreAboutBlankUrl = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];
      var pageElementJSON, devices, newPageArray;
      return _regeneratorRuntime.async(function pageArrayFromJson$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug('Getting WebKitRemoteDebugger pageArray: ' + this.host + ', ' + this.port);
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(this.getJsonFromUrl(this.host, this.port, '/json'));

          case 3:
            pageElementJSON = context$2$0.sent;

            if (!pageElementJSON[0].deviceId) {
              context$2$0.next = 13;
              break;
            }

            _logger2['default'].debug('Device JSON: ' + (0, _helpers.simpleStringify)(pageElementJSON));

            devices = pageElementJSON.filter(function (device) {
              return device.deviceId !== 'SIMULATOR';
            });

            if (devices.length > 1) {
              _logger2['default'].debug('Connected to ' + devices.length + ' devices. ' + ('Choosing the first, with udid \'' + devices[0].deviceId + '\'.'));
            }
            this.port = devices[0].url.split(':')[1];
            _logger2['default'].debug('Received notification that ios-webkit-debug-proxy is listening on port \'' + this.port + '\'');

            context$2$0.next = 12;
            return _regeneratorRuntime.awrap(this.getJsonFromUrl(this.host, this.port, '/json'));

          case 12:
            pageElementJSON = context$2$0.sent;

          case 13:
            _logger2['default'].debug('Page element JSON: ' + (0, _helpers.simpleStringify)(pageElementJSON));

            // Add elements to an array
            newPageArray = pageElementJSON.filter(function (pageObject) {
              return pageObject.url && (!ignoreAboutBlankUrl || pageObject.url !== 'about:blank');
            }).map(function (pageObject) {
              var urlArray = pageObject.webSocketDebuggerUrl.split('/').reverse();
              var id = urlArray[0];
              return {
                id: id,
                title: pageObject.title,
                url: pageObject.url,
                isKey: !!id
              };
            });
            return context$2$0.abrupt('return', newPageArray);

          case 16:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'getJsonFromUrl',
    value: function getJsonFromUrl(hostname, port, pathname) {
      var uri;
      return _regeneratorRuntime.async(function getJsonFromUrl$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            uri = _url2['default'].format({
              protocol: 'http',
              hostname: hostname,
              port: port,
              pathname: pathname
            });

            _logger2['default'].debug('Sending request to: ' + uri);
            context$2$0.t0 = JSON;
            context$2$0.next = 5;
            return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({ uri: uri, method: 'GET' }));

          case 5:
            context$2$0.t1 = context$2$0.sent;
            return context$2$0.abrupt('return', context$2$0.t0.parse.call(context$2$0.t0, context$2$0.t1));

          case 7:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'convertResult',
    value: function convertResult(res) {
      // WebKit returns a result wrapped deeper than the Remote Debugger:
      //   {
      //     result: {
      //       type: "string",
      //       value: {
      //         status: 0,
      //         value: {
      //           ELEMENT: ":wdc:1441819740060"
      //         }
      //       }
      //     },
      //     wasThrown: false
      //   }

      // check for errors
      if (res && res.wasThrown) {
        // we got some form of error.
        var message = res.result.value || res.result;
        throw new _appiumBaseDriver.errors.JavaScriptError(message);
      }

      if (res && res.result && res.result.type === 'undefined') {
        // if it doesn't throw an error, we just want to put in a
        // place holder. this happens when we have an async execute request
        res.result.value = {};
      }

      // send the actual result to the Remote Debugger converter
      return _get(Object.getPrototypeOf(WebKitRemoteDebugger.prototype), 'convertResult', this).call(this, res && res.result ? res.result.value : res);
    }
  }]);

  return WebKitRemoteDebugger;
})(_remoteDebugger.RemoteDebugger);

exports['default'] = WebKitRemoteDebugger;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,

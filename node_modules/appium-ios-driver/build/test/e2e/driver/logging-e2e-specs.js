require('source-map-support').install();

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _helpersEnv = require('../helpers/env');

var _helpersEnv2 = _interopRequireDefault(_helpersEnv);

var _libUtils = require('../../../lib/utils');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _2 = require('../../..');

var _libCommandsLoggingJs = require('../../../lib/commands/logging.js');

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('commands - logging', function () {
  var _this = this;

  this.timeout(120000);
  var driver = undefined;

  before(function () {
    driver = new _2.IosDriver();
  });

  describe('getLogTypes', function () {
    it('should get the list of available logs', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver.getLogTypes.should.be.a.Function;
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.getLogTypes());

          case 3:
            context$3$0.t0 = _lodash2['default'].keys(_libCommandsLoggingJs.SUPPORTED_LOG_TYPES);
            context$3$0.sent.should.eql(context$3$0.t0);

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  });

  describe('getLog', function () {
    var caps = {
      app: _path2['default'].resolve(_libUtils.rootDir, 'test', 'assets', 'TestApp.zip'),
      platformName: 'iOS',
      showIOSLog: true,
      noReset: true,
      newCommandTimeout: 120
    };
    caps = _lodash2['default'].merge({}, _helpersEnv2['default'].CAPS, caps);

    describe('errors', function () {
      it('should throw an error when an invalid type is given', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(driver.getLog('something-random').should.eventually.be.rejected);

            case 2:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it('should throw an error when driver is not started', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(driver.getLog('syslog').should.eventually.be.rejected);

            case 2:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    });

    describe('success', function () {
      before(function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              // TODO: figure out why this is so flakey in Travis
              if (process.env.TRAVIS) this.skip();
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(driver.createSession(caps));

            case 3:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });
      after(function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(driver.deleteSession());

            case 2:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it('should get system logs', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(driver.getLog('syslog'));

            case 2:
              context$4$0.sent.should.be.an.Array;

            case 3:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it('should get crash logs', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(driver.getLog('crashlog'));

            case 2:
              context$4$0.sent.should.be.an.Array;

            case 3:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZTJlL2RyaXZlci9sb2dnaW5nLWUyZS1zcGVjcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OzswQkFFZ0IsZ0JBQWdCOzs7O3dCQUNSLG9CQUFvQjs7b0JBQzNCLE1BQU07Ozs7aUJBQ0csVUFBVTs7b0NBQ0Esa0NBQWtDOztvQkFDckQsTUFBTTs7Ozs4QkFDSSxrQkFBa0I7Ozs7c0JBQy9CLFFBQVE7Ozs7QUFHdEIsa0JBQUssTUFBTSxFQUFFLENBQUM7QUFDZCxrQkFBSyxHQUFHLDZCQUFnQixDQUFDOztBQUV6QixRQUFRLENBQUMsb0JBQW9CLEVBQUUsWUFBWTs7O0FBQ3pDLE1BQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDckIsTUFBSSxNQUFNLFlBQUEsQ0FBQzs7QUFFWCxRQUFNLENBQUMsWUFBTTtBQUNYLFVBQU0sR0FBRyxrQkFBZSxDQUFDO0dBQzFCLENBQUMsQ0FBQzs7QUFFSCxVQUFRLENBQUMsYUFBYSxFQUFFLFlBQU07QUFDNUIsTUFBRSxDQUFDLHVDQUF1QyxFQUFFOzs7O0FBQzFDLGtCQUFNLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQzs7NkNBQ2pDLE1BQU0sQ0FBQyxXQUFXLEVBQUU7Ozs2QkFBYSxvQkFBRSxJQUFJLDJDQUFxQjs2QkFBdEMsTUFBTSxDQUFDLEdBQUc7Ozs7Ozs7S0FDeEMsQ0FBQyxDQUFDO0dBQ0osQ0FBQyxDQUFDOztBQUVILFVBQVEsQ0FBQyxRQUFRLEVBQUUsWUFBTTtBQUN2QixRQUFJLElBQUksR0FBRztBQUNULFNBQUcsRUFBRSxrQkFBSyxPQUFPLG9CQUFVLE1BQU0sRUFBRSxRQUFRLEVBQUUsYUFBYSxDQUFDO0FBQzNELGtCQUFZLEVBQUUsS0FBSztBQUNuQixnQkFBVSxFQUFFLElBQUk7QUFDaEIsYUFBTyxFQUFFLElBQUk7QUFDYix1QkFBaUIsRUFBRSxHQUFHO0tBQ3ZCLENBQUM7QUFDRixRQUFJLEdBQUcsb0JBQUUsS0FBSyxDQUFDLEVBQUUsRUFBRSx3QkFBSSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7O0FBRW5DLFlBQVEsQ0FBQyxRQUFRLEVBQUUsWUFBTTtBQUN2QixRQUFFLENBQUMscURBQXFELEVBQUU7Ozs7OytDQUNsRCxNQUFNLENBQUMsTUFBTSxDQUFDLGtCQUFrQixDQUFDLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsUUFBUTs7Ozs7OztPQUN0RSxDQUFDLENBQUM7QUFDSCxRQUFFLENBQUMsa0RBQWtELEVBQUU7Ozs7OytDQUMvQyxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLFFBQVE7Ozs7Ozs7T0FDNUQsQ0FBQyxDQUFDO0tBQ0osQ0FBQyxDQUFDOztBQUVILFlBQVEsQ0FBQyxTQUFTLEVBQUUsWUFBTTtBQUN4QixZQUFNLENBQUM7Ozs7O0FBRUwsa0JBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDOzsrQ0FDOUIsTUFBTSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUM7Ozs7Ozs7T0FDakMsQ0FBQyxDQUFDO0FBQ0gsV0FBSyxDQUFDOzs7OzsrQ0FDRSxNQUFNLENBQUMsYUFBYSxFQUFFOzs7Ozs7O09BQzdCLENBQUMsQ0FBQztBQUNILFFBQUUsQ0FBQyx3QkFBd0IsRUFBRTs7Ozs7K0NBQ3BCLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDOzs7K0JBQUUsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsS0FBSzs7Ozs7OztPQUNuRCxDQUFDLENBQUM7QUFDSCxRQUFFLENBQUMsdUJBQXVCLEVBQUU7Ozs7OytDQUNuQixNQUFNLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQzs7OytCQUFFLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEtBQUs7Ozs7Ozs7T0FDckQsQ0FBQyxDQUFDO0tBQ0osQ0FBQyxDQUFDO0dBQ0osQ0FBQyxDQUFDO0NBQ0osQ0FBQyxDQUFDIiwiZmlsZSI6InRlc3QvZTJlL2RyaXZlci9sb2dnaW5nLWUyZS1zcGVjcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHRyYW5zcGlsZTptb2NoYVxuXG5pbXBvcnQgZW52IGZyb20gJy4uL2hlbHBlcnMvZW52JztcbmltcG9ydCB7IHJvb3REaXIgfSBmcm9tICcuLi8uLi8uLi9saWIvdXRpbHMnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBJb3NEcml2ZXIgfSBmcm9tICcuLi8uLi8uLic7XG5pbXBvcnQgeyBTVVBQT1JURURfTE9HX1RZUEVTIH0gZnJvbSAnLi4vLi4vLi4vbGliL2NvbW1hbmRzL2xvZ2dpbmcuanMnO1xuaW1wb3J0IGNoYWkgZnJvbSAnY2hhaSc7XG5pbXBvcnQgY2hhaUFzUHJvbWlzZWQgZnJvbSAnY2hhaS1hcy1wcm9taXNlZCc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuXG5cbmNoYWkuc2hvdWxkKCk7XG5jaGFpLnVzZShjaGFpQXNQcm9taXNlZCk7XG5cbmRlc2NyaWJlKCdjb21tYW5kcyAtIGxvZ2dpbmcnLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMudGltZW91dCgxMjAwMDApO1xuICBsZXQgZHJpdmVyO1xuXG4gIGJlZm9yZSgoKSA9PiB7XG4gICAgZHJpdmVyID0gbmV3IElvc0RyaXZlcigpO1xuICB9KTtcblxuICBkZXNjcmliZSgnZ2V0TG9nVHlwZXMnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBnZXQgdGhlIGxpc3Qgb2YgYXZhaWxhYmxlIGxvZ3MnLCBhc3luYyAoKSA9PiB7XG4gICAgICBkcml2ZXIuZ2V0TG9nVHlwZXMuc2hvdWxkLmJlLmEuRnVuY3Rpb247XG4gICAgICAoYXdhaXQgZHJpdmVyLmdldExvZ1R5cGVzKCkpLnNob3VsZC5lcWwoXy5rZXlzKFNVUFBPUlRFRF9MT0dfVFlQRVMpKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2dldExvZycsICgpID0+IHtcbiAgICBsZXQgY2FwcyA9IHtcbiAgICAgIGFwcDogcGF0aC5yZXNvbHZlKHJvb3REaXIsICd0ZXN0JywgJ2Fzc2V0cycsICdUZXN0QXBwLnppcCcpLFxuICAgICAgcGxhdGZvcm1OYW1lOiAnaU9TJyxcbiAgICAgIHNob3dJT1NMb2c6IHRydWUsXG4gICAgICBub1Jlc2V0OiB0cnVlLFxuICAgICAgbmV3Q29tbWFuZFRpbWVvdXQ6IDEyMFxuICAgIH07XG4gICAgY2FwcyA9IF8ubWVyZ2Uoe30sIGVudi5DQVBTLCBjYXBzKTtcblxuICAgIGRlc2NyaWJlKCdlcnJvcnMnLCAoKSA9PiB7XG4gICAgICBpdCgnc2hvdWxkIHRocm93IGFuIGVycm9yIHdoZW4gYW4gaW52YWxpZCB0eXBlIGlzIGdpdmVuJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICBhd2FpdCBkcml2ZXIuZ2V0TG9nKCdzb21ldGhpbmctcmFuZG9tJykuc2hvdWxkLmV2ZW50dWFsbHkuYmUucmVqZWN0ZWQ7XG4gICAgICB9KTtcbiAgICAgIGl0KCdzaG91bGQgdGhyb3cgYW4gZXJyb3Igd2hlbiBkcml2ZXIgaXMgbm90IHN0YXJ0ZWQnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGF3YWl0IGRyaXZlci5nZXRMb2coJ3N5c2xvZycpLnNob3VsZC5ldmVudHVhbGx5LmJlLnJlamVjdGVkO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnc3VjY2VzcycsICgpID0+IHtcbiAgICAgIGJlZm9yZShhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFRPRE86IGZpZ3VyZSBvdXQgd2h5IHRoaXMgaXMgc28gZmxha2V5IGluIFRyYXZpc1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuVFJBVklTKSB0aGlzLnNraXAoKTtcbiAgICAgICAgYXdhaXQgZHJpdmVyLmNyZWF0ZVNlc3Npb24oY2Fwcyk7XG4gICAgICB9KTtcbiAgICAgIGFmdGVyKGFzeW5jICgpID0+IHtcbiAgICAgICAgYXdhaXQgZHJpdmVyLmRlbGV0ZVNlc3Npb24oKTtcbiAgICAgIH0pO1xuICAgICAgaXQoJ3Nob3VsZCBnZXQgc3lzdGVtIGxvZ3MnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIChhd2FpdCBkcml2ZXIuZ2V0TG9nKCdzeXNsb2cnKSkuc2hvdWxkLmJlLmFuLkFycmF5O1xuICAgICAgfSk7XG4gICAgICBpdCgnc2hvdWxkIGdldCBjcmFzaCBsb2dzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAoYXdhaXQgZHJpdmVyLmdldExvZygnY3Jhc2hsb2cnKSkuc2hvdWxkLmJlLmFuLkFycmF5O1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXSwic291cmNlUm9vdCI6Ii4uLy4uLy4uLy4uIn0=

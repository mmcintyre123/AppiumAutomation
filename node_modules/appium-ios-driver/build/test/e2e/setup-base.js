'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _helpersEnv = require('./helpers/env');

var _helpersEnv2 = _interopRequireDefault(_helpersEnv);

var _helpersSession = require('./helpers/session');

var _helpersTitle = require('./helpers/title');

var _appiumBaseDriver = require('appium-base-driver');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _libLogger = require('../../lib/logger');

var _libLogger2 = _interopRequireDefault(_libLogger);

require('./helpers/setup_testlibs');

var server = undefined;

function startServer(session) {
  var router;
  return _regeneratorRuntime.async(function startServer$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        router = (0, _appiumBaseDriver.routeConfiguringFunction)(session.rawDriver);
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap((0, _appiumBaseDriver.server)(router, _helpersEnv2['default'].APPIUM_PORT, 'localhost'));

      case 3:
        server = context$1$0.sent;

        _libLogger2['default'].info('IosDriver server listening on http://localhost:' + _helpersEnv2['default'].APPIUM_PORT);

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function setup(context, desired) {
  var opts = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

  var _this = this;

  var envOverrides = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];
  var needsNewServer = arguments.length <= 4 || arguments[4] === undefined ? false : arguments[4];

  context.timeout(_helpersEnv2['default'].MOCHA_INIT_TIMEOUT);
  var newEnv = _lodash2['default'].clone(_helpersEnv2['default']);
  if (envOverrides) {
    _lodash2['default'].extend(newEnv, envOverrides);
  }

  if (!opts.port) {
    opts.port = _helpersEnv2['default'].APPIUM_PORT;
  }

  opts.callbackAddress = 'localhost';

  var session = new _helpersSession.Session(desired, opts);
  var allPassed = true;

  before(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          if (server) {
            context$2$0.next = 5;
            break;
          }

          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(startServer(session));

        case 3:
          context$2$0.next = 10;
          break;

        case 5:
          if (!needsNewServer) {
            context$2$0.next = 10;
            break;
          }

          context$2$0.next = 8;
          return _regeneratorRuntime.awrap(server.close());

        case 8:
          context$2$0.next = 10;
          return _regeneratorRuntime.awrap(startServer(session));

        case 10:
          context$2$0.next = 12;
          return _regeneratorRuntime.awrap(session.setUp((0, _helpersTitle.getTitle)(context)));

        case 12:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  after(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(session.tearDown(allPassed));

        case 2:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  afterEach(function () {
    allPassed = allPassed && this.currentTest.state === 'passed';
  });

  return session;
}

exports['default'] = setup;
module.exports = exports['default'];

// start the server before start the session, so startup can use it if necessary
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZTJlL3NldHVwLWJhc2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OzswQkFDZ0IsZUFBZTs7Ozs4QkFDUCxtQkFBbUI7OzRCQUNsQixpQkFBaUI7O2dDQUNxQixvQkFBb0I7O3NCQUNyRSxRQUFROzs7O3lCQUNOLGtCQUFrQjs7OztRQUMzQiwwQkFBMEI7O0FBR2pDLElBQUksTUFBTSxZQUFBLENBQUM7O0FBRVgsU0FBZSxXQUFXLENBQUUsT0FBTztNQUU3QixNQUFNOzs7O0FBQU4sY0FBTSxHQUFHLGdEQUF5QixPQUFPLENBQUMsU0FBUyxDQUFDOzt5Q0FDekMsOEJBQVcsTUFBTSxFQUFFLHdCQUFJLFdBQVcsRUFBRSxXQUFXLENBQUM7OztBQUEvRCxjQUFNOztBQUNOLCtCQUFJLElBQUkscURBQW1ELHdCQUFJLFdBQVcsQ0FBRyxDQUFDOzs7Ozs7O0NBQy9FOztBQUVELFNBQVMsS0FBSyxDQUFFLE9BQU8sRUFBRSxPQUFPLEVBQTJEO01BQXpELElBQUkseURBQUcsRUFBRTs7OztNQUFFLFlBQVkseURBQUcsS0FBSztNQUFFLGNBQWMseURBQUcsS0FBSzs7QUFDdkYsU0FBTyxDQUFDLE9BQU8sQ0FBQyx3QkFBSSxrQkFBa0IsQ0FBQyxDQUFDO0FBQ3hDLE1BQUksTUFBTSxHQUFHLG9CQUFFLEtBQUsseUJBQUssQ0FBQztBQUMxQixNQUFJLFlBQVksRUFBRTtBQUNoQix3QkFBRSxNQUFNLENBQUMsTUFBTSxFQUFFLFlBQVksQ0FBQyxDQUFDO0dBQ2hDOztBQUVELE1BQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFO0FBQ2QsUUFBSSxDQUFDLElBQUksR0FBRyx3QkFBSSxXQUFXLENBQUM7R0FDN0I7O0FBRUQsTUFBSSxDQUFDLGVBQWUsR0FBRyxXQUFXLENBQUM7O0FBRW5DLE1BQUksT0FBTyxHQUFHLDRCQUFZLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztBQUN6QyxNQUFJLFNBQVMsR0FBRyxJQUFJLENBQUM7O0FBRXJCLFFBQU0sQ0FBQzs7OztjQUNBLE1BQU07Ozs7OzsyQ0FDSCxXQUFXLENBQUMsT0FBTyxDQUFDOzs7Ozs7O2VBQ2pCLGNBQWM7Ozs7OzsyQ0FDakIsTUFBTSxDQUFDLEtBQUssRUFBRTs7OzsyQ0FDZCxXQUFXLENBQUMsT0FBTyxDQUFDOzs7OzJDQUV0QixPQUFPLENBQUMsS0FBSyxDQUFDLDRCQUFTLE9BQU8sQ0FBQyxDQUFDOzs7Ozs7O0dBQ3ZDLENBQUMsQ0FBQzs7QUFFSCxPQUFLLENBQUM7Ozs7OzJDQUNFLE9BQU8sQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDOzs7Ozs7O0dBQ2xDLENBQUMsQ0FBQzs7QUFFSCxXQUFTLENBQUMsWUFBWTtBQUNwQixhQUFTLEdBQUcsU0FBUyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxLQUFLLFFBQVEsQ0FBQztHQUM5RCxDQUFDLENBQUM7O0FBRUgsU0FBTyxPQUFPLENBQUM7Q0FDaEI7O3FCQUVjLEtBQUsiLCJmaWxlIjoidGVzdC9lMmUvc2V0dXAtYmFzZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IGVudiBmcm9tICcuL2hlbHBlcnMvZW52JztcbmltcG9ydCB7IFNlc3Npb24gfSBmcm9tICcuL2hlbHBlcnMvc2Vzc2lvbic7XG5pbXBvcnQgeyBnZXRUaXRsZSB9IGZyb20gJy4vaGVscGVycy90aXRsZSc7XG5pbXBvcnQgeyBzZXJ2ZXIgYXMgYmFzZVNlcnZlciwgcm91dGVDb25maWd1cmluZ0Z1bmN0aW9uIH0gZnJvbSAnYXBwaXVtLWJhc2UtZHJpdmVyJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgbG9nIGZyb20gJy4uLy4uL2xpYi9sb2dnZXInO1xuaW1wb3J0ICcuL2hlbHBlcnMvc2V0dXBfdGVzdGxpYnMnO1xuXG5cbmxldCBzZXJ2ZXI7XG5cbmFzeW5jIGZ1bmN0aW9uIHN0YXJ0U2VydmVyIChzZXNzaW9uKSB7XG4gIC8vIHN0YXJ0IHRoZSBzZXJ2ZXIgYmVmb3JlIHN0YXJ0IHRoZSBzZXNzaW9uLCBzbyBzdGFydHVwIGNhbiB1c2UgaXQgaWYgbmVjZXNzYXJ5XG4gIGxldCByb3V0ZXIgPSByb3V0ZUNvbmZpZ3VyaW5nRnVuY3Rpb24oc2Vzc2lvbi5yYXdEcml2ZXIpO1xuICBzZXJ2ZXIgPSBhd2FpdCBiYXNlU2VydmVyKHJvdXRlciwgZW52LkFQUElVTV9QT1JULCAnbG9jYWxob3N0Jyk7XG4gIGxvZy5pbmZvKGBJb3NEcml2ZXIgc2VydmVyIGxpc3RlbmluZyBvbiBodHRwOi8vbG9jYWxob3N0OiR7ZW52LkFQUElVTV9QT1JUfWApO1xufVxuXG5mdW5jdGlvbiBzZXR1cCAoY29udGV4dCwgZGVzaXJlZCwgb3B0cyA9IHt9LCBlbnZPdmVycmlkZXMgPSBmYWxzZSwgbmVlZHNOZXdTZXJ2ZXIgPSBmYWxzZSkge1xuICBjb250ZXh0LnRpbWVvdXQoZW52Lk1PQ0hBX0lOSVRfVElNRU9VVCk7XG4gIGxldCBuZXdFbnYgPSBfLmNsb25lKGVudik7XG4gIGlmIChlbnZPdmVycmlkZXMpIHtcbiAgICBfLmV4dGVuZChuZXdFbnYsIGVudk92ZXJyaWRlcyk7XG4gIH1cblxuICBpZiAoIW9wdHMucG9ydCkge1xuICAgIG9wdHMucG9ydCA9IGVudi5BUFBJVU1fUE9SVDtcbiAgfVxuXG4gIG9wdHMuY2FsbGJhY2tBZGRyZXNzID0gJ2xvY2FsaG9zdCc7XG5cbiAgbGV0IHNlc3Npb24gPSBuZXcgU2Vzc2lvbihkZXNpcmVkLCBvcHRzKTtcbiAgbGV0IGFsbFBhc3NlZCA9IHRydWU7XG5cbiAgYmVmb3JlKGFzeW5jICgpID0+IHtcbiAgICBpZiAoIXNlcnZlcikge1xuICAgICAgYXdhaXQgc3RhcnRTZXJ2ZXIoc2Vzc2lvbik7XG4gICAgfSBlbHNlIGlmIChuZWVkc05ld1NlcnZlcikge1xuICAgICAgYXdhaXQgc2VydmVyLmNsb3NlKCk7XG4gICAgICBhd2FpdCBzdGFydFNlcnZlcihzZXNzaW9uKTtcbiAgICB9XG4gICAgYXdhaXQgc2Vzc2lvbi5zZXRVcChnZXRUaXRsZShjb250ZXh0KSk7XG4gIH0pO1xuXG4gIGFmdGVyKGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBzZXNzaW9uLnRlYXJEb3duKGFsbFBhc3NlZCk7XG4gIH0pO1xuXG4gIGFmdGVyRWFjaChmdW5jdGlvbiAoKSB7XG4gICAgYWxsUGFzc2VkID0gYWxsUGFzc2VkICYmIHRoaXMuY3VycmVudFRlc3Quc3RhdGUgPT09ICdwYXNzZWQnO1xuICB9KTtcblxuICByZXR1cm4gc2Vzc2lvbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc2V0dXA7XG4iXSwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _desired = require('./desired');

var _desired2 = _interopRequireDefault(_desired);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _https = require('https');

var _https2 = _interopRequireDefault(_https);

var _setupBase = require('../../setup-base');

var _setupBase2 = _interopRequireDefault(_setupBase);

var pem = _bluebird2['default'].promisifyAll(require('pem'));

describe('When accessing an HTTPS encrypted site in Safari', function callee$0$0() {
  var sslServer, driver;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        sslServer = undefined;

        before(function callee$1$0() {
          var privateKey, keys, pemCertificate;
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.next = 2;
                return _regeneratorRuntime.awrap(pem.createPrivateKeyAsync());

              case 2:
                privateKey = context$2$0.sent;
                context$2$0.next = 5;
                return _regeneratorRuntime.awrap(pem.createCertificateAsync({ days: 1, selfSigned: true, serviceKey: privateKey.key }));

              case 5:
                keys = context$2$0.sent;
                pemCertificate = keys.certificate;

                sslServer = _https2['default'].createServer({ key: keys.serviceKey, cert: pemCertificate }, function (req, res) {
                  res.end('Arbitrary text');
                }).listen(9758);
                _desired2['default'].customSSLCert = pemCertificate;

              case 9:
              case 'end':
                return context$2$0.stop();
            }
          }, null, this);
        });

        driver = (0, _setupBase2['default'])(this, _desired2['default'], { noReset: true }).driver;

        after(function callee$1$0() {
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                if (!sslServer) {
                  context$2$0.next = 3;
                  break;
                }

                context$2$0.next = 3;
                return _regeneratorRuntime.awrap(sslServer.close());

              case 3:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this);
        });

        it('should be able to access it as long the PEM certificate is provided as a capability', function callee$1$0() {
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.next = 2;
                return _regeneratorRuntime.awrap(_bluebird2['default'].delay(500));

              case 2:
                context$2$0.next = 4;
                return _regeneratorRuntime.awrap(driver.setUrl('https://localhost:9758'));

              case 4:
                context$2$0.next = 6;
                return _regeneratorRuntime.awrap(driver.getPageSource());

              case 6:
                context$2$0.sent.should.include('Arbitrary text');

              case 7:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this);
        });

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
});

// Create an HTTPS server with a random pem certificate
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZTJlL3NhZmFyaS93ZWJ2aWV3L3NzbC1zcGVjcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7dUJBQW9CLFdBQVc7Ozs7d0JBQ2pCLFVBQVU7Ozs7cUJBQ04sT0FBTzs7Ozt5QkFDUCxrQkFBa0I7Ozs7QUFHcEMsSUFBTSxHQUFHLEdBQUcsc0JBQUUsWUFBWSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDOztBQUUzQyxRQUFRLENBQUMsa0RBQWtELEVBQUU7TUFDdkQsU0FBUyxFQWNQLE1BQU07Ozs7OztBQWRSLGlCQUFTOztBQUViLGNBQU0sQ0FBQztjQUVELFVBQVUsRUFDVixJQUFJLEVBQ0osY0FBYzs7Ozs7aURBRkssR0FBRyxDQUFDLHFCQUFxQixFQUFFOzs7QUFBOUMsMEJBQVU7O2lEQUNHLEdBQUcsQ0FBQyxzQkFBc0IsQ0FBQyxFQUFDLElBQUksRUFBQyxDQUFDLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBQyxDQUFDOzs7QUFBL0Ysb0JBQUk7QUFDSiw4QkFBYyxHQUFHLElBQUksQ0FBQyxXQUFXOztBQUVyQyx5QkFBUyxHQUFHLG1CQUFNLFlBQVksQ0FBQyxFQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUMsRUFBRSxVQUFVLEdBQUcsRUFBRSxHQUFHLEVBQUU7QUFDL0YscUJBQUcsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztpQkFDM0IsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNoQixxQ0FBUSxhQUFhLEdBQUcsY0FBYyxDQUFDOzs7Ozs7O1NBQ3hDLENBQUMsQ0FBQzs7QUFFRyxjQUFNLEdBQUcsNEJBQU0sSUFBSSx3QkFBVyxFQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDLE1BQU07O0FBRTNELGFBQUssQ0FBQzs7OztxQkFDQSxTQUFTOzs7Ozs7aURBQ0wsU0FBUyxDQUFDLEtBQUssRUFBRTs7Ozs7OztTQUUxQixDQUFDLENBQUM7O0FBRUgsVUFBRSxDQUFDLHFGQUFxRixFQUFFOzs7OztpREFDbEYsc0JBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQzs7OztpREFDWixNQUFNLENBQUMsTUFBTSxDQUFDLHdCQUF3QixDQUFDOzs7O2lEQUN0QyxNQUFNLENBQUMsYUFBYSxFQUFFOzs7aUNBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0I7Ozs7Ozs7U0FDL0QsQ0FBQyxDQUFDOzs7Ozs7O0NBQ0osQ0FBQyxDQUFDIiwiZmlsZSI6InRlc3QvZTJlL3NhZmFyaS93ZWJ2aWV3L3NzbC1zcGVjcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBkZXNpcmVkIGZyb20gJy4vZGVzaXJlZCc7XG5pbXBvcnQgQiBmcm9tICdibHVlYmlyZCc7XG5pbXBvcnQgaHR0cHMgZnJvbSAnaHR0cHMnO1xuaW1wb3J0IHNldHVwIGZyb20gJy4uLy4uL3NldHVwLWJhc2UnO1xuXG5cbmNvbnN0IHBlbSA9IEIucHJvbWlzaWZ5QWxsKHJlcXVpcmUoJ3BlbScpKTtcblxuZGVzY3JpYmUoJ1doZW4gYWNjZXNzaW5nIGFuIEhUVFBTIGVuY3J5cHRlZCBzaXRlIGluIFNhZmFyaScsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgbGV0IHNzbFNlcnZlcjtcblxuICBiZWZvcmUoYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIC8vIENyZWF0ZSBhbiBIVFRQUyBzZXJ2ZXIgd2l0aCBhIHJhbmRvbSBwZW0gY2VydGlmaWNhdGVcbiAgICBsZXQgcHJpdmF0ZUtleSA9IGF3YWl0IHBlbS5jcmVhdGVQcml2YXRlS2V5QXN5bmMoKTtcbiAgICBsZXQga2V5cyA9IGF3YWl0IHBlbS5jcmVhdGVDZXJ0aWZpY2F0ZUFzeW5jKHtkYXlzOjEsIHNlbGZTaWduZWQ6IHRydWUsIHNlcnZpY2VLZXk6IHByaXZhdGVLZXkua2V5fSk7XG4gICAgbGV0IHBlbUNlcnRpZmljYXRlID0ga2V5cy5jZXJ0aWZpY2F0ZTtcblxuICAgIHNzbFNlcnZlciA9IGh0dHBzLmNyZWF0ZVNlcnZlcih7a2V5OiBrZXlzLnNlcnZpY2VLZXksIGNlcnQ6IHBlbUNlcnRpZmljYXRlfSwgZnVuY3Rpb24gKHJlcSwgcmVzKSB7XG4gICAgICByZXMuZW5kKCdBcmJpdHJhcnkgdGV4dCcpO1xuICAgIH0pLmxpc3Rlbig5NzU4KTtcbiAgICBkZXNpcmVkLmN1c3RvbVNTTENlcnQgPSBwZW1DZXJ0aWZpY2F0ZTtcbiAgfSk7XG5cbiAgY29uc3QgZHJpdmVyID0gc2V0dXAodGhpcywgZGVzaXJlZCwge25vUmVzZXQ6IHRydWV9KS5kcml2ZXI7XG5cbiAgYWZ0ZXIoYXN5bmMgKCkgPT4ge1xuICAgIGlmIChzc2xTZXJ2ZXIpIHtcbiAgICAgIGF3YWl0IHNzbFNlcnZlci5jbG9zZSgpO1xuICAgIH1cbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBiZSBhYmxlIHRvIGFjY2VzcyBpdCBhcyBsb25nIHRoZSBQRU0gY2VydGlmaWNhdGUgaXMgcHJvdmlkZWQgYXMgYSBjYXBhYmlsaXR5JywgYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IEIuZGVsYXkoNTAwKTtcbiAgICBhd2FpdCBkcml2ZXIuc2V0VXJsKCdodHRwczovL2xvY2FsaG9zdDo5NzU4Jyk7XG4gICAgKGF3YWl0IGRyaXZlci5nZXRQYWdlU291cmNlKCkpLnNob3VsZC5pbmNsdWRlKCdBcmJpdHJhcnkgdGV4dCcpO1xuICB9KTtcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLi8uLi8uLiJ9

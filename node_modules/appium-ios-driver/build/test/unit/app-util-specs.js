require('source-map-support').install();

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this = this;

var _ = require('../..');

var _sampleApps = require('sample-apps');

var _sampleApps2 = _interopRequireDefault(_sampleApps);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

var app = (0, _sampleApps2['default'])('TestApp');

describe('extractAppDisplayName', function () {
  it('should get application name of app', function callee$1$0() {
    var appName;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(_.appUtils.extractAppDisplayName(app));

        case 2:
          appName = context$2$0.sent;

          appName.should.equal('TestApp');

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
});

describe('extractBundleId', function () {
  it('should get bundleId of app', function callee$1$0() {
    var bundleId;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(_.appUtils.extractBundleId(app));

        case 2:
          bundleId = context$2$0.sent;

          bundleId.should.equal('io.appium.TestApp');

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvdW5pdC9hcHAtdXRpbC1zcGVjcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O2dCQUV5QixPQUFPOzswQkFDVCxhQUFhOzs7O29CQUNuQixNQUFNOzs7OzhCQUNJLGtCQUFrQjs7OztBQUc3QyxrQkFBSyxNQUFNLEVBQUUsQ0FBQztBQUNkLGtCQUFLLEdBQUcsNkJBQWdCLENBQUM7O0FBRXpCLElBQU0sR0FBRyxHQUFHLDZCQUFXLFNBQVMsQ0FBQyxDQUFDOztBQUVsQyxRQUFRLENBQUMsdUJBQXVCLEVBQUUsWUFBTTtBQUN0QyxJQUFFLENBQUMsb0NBQW9DLEVBQUU7UUFDbkMsT0FBTzs7Ozs7MkNBQVMsV0FBUyxxQkFBcUIsQ0FBQyxHQUFHLENBQUM7OztBQUFuRCxpQkFBTzs7QUFFWCxpQkFBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7Ozs7Ozs7R0FDakMsQ0FBQyxDQUFDO0NBQ0osQ0FBQyxDQUFDOztBQUVILFFBQVEsQ0FBQyxpQkFBaUIsRUFBRSxZQUFNO0FBQ2hDLElBQUUsQ0FBQyw0QkFBNEIsRUFBRTtRQUMzQixRQUFROzs7OzsyQ0FBUyxXQUFTLGVBQWUsQ0FBQyxHQUFHLENBQUM7OztBQUE5QyxrQkFBUTs7QUFFWixrQkFBUSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FBQzs7Ozs7OztHQUM1QyxDQUFDLENBQUM7Q0FDSixDQUFDLENBQUMiLCJmaWxlIjoidGVzdC91bml0L2FwcC11dGlsLXNwZWNzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdHJhbnNwaWxlOm1vY2hhXG5cbmltcG9ydCB7IGFwcFV0aWxzIH0gZnJvbSAnLi4vLi4nO1xuaW1wb3J0IGdldEFwcFBhdGggZnJvbSAnc2FtcGxlLWFwcHMnO1xuaW1wb3J0IGNoYWkgZnJvbSAnY2hhaSc7XG5pbXBvcnQgY2hhaUFzUHJvbWlzZWQgZnJvbSAnY2hhaS1hcy1wcm9taXNlZCc7XG5cblxuY2hhaS5zaG91bGQoKTtcbmNoYWkudXNlKGNoYWlBc1Byb21pc2VkKTtcblxuY29uc3QgYXBwID0gZ2V0QXBwUGF0aCgnVGVzdEFwcCcpO1xuXG5kZXNjcmliZSgnZXh0cmFjdEFwcERpc3BsYXlOYW1lJywgKCkgPT4ge1xuICBpdCgnc2hvdWxkIGdldCBhcHBsaWNhdGlvbiBuYW1lIG9mIGFwcCcsIGFzeW5jICgpID0+IHtcbiAgICBsZXQgYXBwTmFtZSA9IGF3YWl0IGFwcFV0aWxzLmV4dHJhY3RBcHBEaXNwbGF5TmFtZShhcHApO1xuXG4gICAgYXBwTmFtZS5zaG91bGQuZXF1YWwoJ1Rlc3RBcHAnKTtcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ2V4dHJhY3RCdW5kbGVJZCcsICgpID0+IHtcbiAgaXQoJ3Nob3VsZCBnZXQgYnVuZGxlSWQgb2YgYXBwJywgYXN5bmMgKCkgPT4ge1xuICAgIGxldCBidW5kbGVJZCA9IGF3YWl0IGFwcFV0aWxzLmV4dHJhY3RCdW5kbGVJZChhcHApO1xuXG4gICAgYnVuZGxlSWQuc2hvdWxkLmVxdWFsKCdpby5hcHBpdW0uVGVzdEFwcCcpO1xuICB9KTtcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9

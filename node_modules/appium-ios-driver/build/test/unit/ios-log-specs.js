require('source-map-support').install();

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this = this;

var _ = require('../..');

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _appiumSupport = require('appium-support');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _libDeviceLogLogger = require('../../lib/device-log/logger');

var _libDeviceLogLogger2 = _interopRequireDefault(_libDeviceLogLogger);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

var LOG_DIR = _path2['default'].resolve('test', 'assets', 'logs');

describe('system logs', function () {
  var tmpSystemLog = undefined;
  var sim = undefined;
  beforeEach(function callee$1$0() {
    var fixSystemLog;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          // get the simulator, and stub what will be called
          sim = {
            udid: 'fake-udid',
            getLogDir: function getLogDir() {},
            getPlatformVersion: function getPlatformVersion() {}
          };
          _sinon2['default'].stub(sim, 'getLogDir').returns(LOG_DIR);
          _sinon2['default'].stub(sim, 'getPlatformVersion').returns('8.4');

          // copy the file into a temporary location, so we can muck with it
          fixSystemLog = _path2['default'].resolve(LOG_DIR, 'system.log.fixture');

          tmpSystemLog = _path2['default'].resolve(LOG_DIR, 'system.log');
          context$2$0.next = 7;
          return _regeneratorRuntime.awrap(_appiumSupport.fs.copyFile(fixSystemLog, tmpSystemLog));

        case 7:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  afterEach(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(tmpSystemLog));

        case 2:
          if (!context$2$0.sent) {
            context$2$0.next = 5;
            break;
          }

          context$2$0.next = 5;
          return _regeneratorRuntime.awrap(_appiumSupport.fs.unlink(tmpSystemLog));

        case 5:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should begin log capture', function callee$1$0() {
    var log, spy, message;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          log = new _.IOSLog({ sim: sim, showLogs: true });
          spy = _sinon2['default'].spy(_libDeviceLogLogger2['default'], 'info');
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(log.startCapture());

        case 4:
          message = 'This is a test log line';
          context$2$0.next = 7;
          return _regeneratorRuntime.awrap(_appiumSupport.fs.writeFile(tmpSystemLog, message + '\n', { flag: 'a' }));

        case 7:
          context$2$0.next = 9;
          return _regeneratorRuntime.awrap(_bluebird2['default'].delay(500));

        case 9:

          spy.calledWith('[IOS_SYSLOG_ROW] ' + message).should.be['true'];

          context$2$0.next = 12;
          return _regeneratorRuntime.awrap(log.stopCapture());

        case 12:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });
});

// on some slow system (e.g., Travis) need a moment
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvdW5pdC9pb3MtbG9nLXNwZWNzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Z0JBRXVCLE9BQU87O3FCQUNaLE9BQU87Ozs7NkJBQ04sZ0JBQWdCOztvQkFDbEIsTUFBTTs7OztrQ0FDSiw2QkFBNkI7Ozs7b0JBQy9CLE1BQU07Ozs7OEJBQ0ksa0JBQWtCOzs7O3dCQUMvQixVQUFVOzs7O0FBR3hCLGtCQUFLLE1BQU0sRUFBRSxDQUFDO0FBQ2Qsa0JBQUssR0FBRyw2QkFBZ0IsQ0FBQzs7QUFFekIsSUFBTSxPQUFPLEdBQUcsa0JBQUssT0FBTyxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7O0FBRXZELFFBQVEsQ0FBQyxhQUFhLEVBQUUsWUFBTTtBQUM1QixNQUFJLFlBQVksWUFBQSxDQUFDO0FBQ2pCLE1BQUksR0FBRyxZQUFBLENBQUM7QUFDUixZQUFVLENBQUM7UUFXTCxZQUFZOzs7OztBQVRoQixhQUFHLEdBQUc7QUFDSixnQkFBSSxFQUFFLFdBQVc7QUFDakIscUJBQVMsRUFBRSxxQkFBTSxFQUFFO0FBQ25CLDhCQUFrQixFQUFFLDhCQUFNLEVBQUU7V0FDN0IsQ0FBQztBQUNGLDZCQUFNLElBQUksQ0FBQyxHQUFHLEVBQUUsV0FBVyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQzlDLDZCQUFNLElBQUksQ0FBQyxHQUFHLEVBQUUsb0JBQW9CLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7OztBQUdqRCxzQkFBWSxHQUFHLGtCQUFLLE9BQU8sQ0FBQyxPQUFPLEVBQUUsb0JBQW9CLENBQUM7O0FBQzlELHNCQUFZLEdBQUcsa0JBQUssT0FBTyxDQUFDLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQzs7MkNBQzdDLGtCQUFHLFFBQVEsQ0FBQyxZQUFZLEVBQUUsWUFBWSxDQUFDOzs7Ozs7O0dBQzlDLENBQUMsQ0FBQztBQUNILFdBQVMsQ0FBQzs7Ozs7MkNBQ0Usa0JBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQzs7Ozs7Ozs7OzJDQUN6QixrQkFBRyxNQUFNLENBQUMsWUFBWSxDQUFDOzs7Ozs7O0dBRWhDLENBQUMsQ0FBQzs7QUFFSCxJQUFFLENBQUMsMEJBQTBCLEVBQUU7UUFDekIsR0FBRyxFQUNILEdBQUcsRUFJSCxPQUFPOzs7O0FBTFAsYUFBRyxHQUFHLGFBQVcsRUFBQyxHQUFHLEVBQUgsR0FBRyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUMsQ0FBQztBQUN2QyxhQUFHLEdBQUcsbUJBQU0sR0FBRyxrQ0FBUyxNQUFNLENBQUM7OzJDQUU3QixHQUFHLENBQUMsWUFBWSxFQUFFOzs7QUFFcEIsaUJBQU8sR0FBRyx5QkFBeUI7OzJDQUNqQyxrQkFBRyxTQUFTLENBQUMsWUFBWSxFQUFLLE9BQU8sU0FBTSxFQUFDLElBQUksRUFBRSxHQUFHLEVBQUMsQ0FBQzs7OzsyQ0FHdkQsc0JBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQzs7OztBQUVsQixhQUFHLENBQUMsVUFBVSx1QkFBcUIsT0FBTyxDQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsUUFBSyxDQUFDOzs7MkNBRXZELEdBQUcsQ0FBQyxXQUFXLEVBQUU7Ozs7Ozs7R0FDeEIsQ0FBQyxDQUFDO0NBQ0osQ0FBQyxDQUFDIiwiZmlsZSI6InRlc3QvdW5pdC9pb3MtbG9nLXNwZWNzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdHJhbnNwaWxlOm1vY2hhXG5cbmltcG9ydCB7IElPU0xvZyB9IGZyb20gJy4uLy4uJztcbmltcG9ydCBzaW5vbiBmcm9tICdzaW5vbic7XG5pbXBvcnQgeyBmcyB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IGxvZ2dlciBmcm9tICcuLi8uLi9saWIvZGV2aWNlLWxvZy9sb2dnZXInO1xuaW1wb3J0IGNoYWkgZnJvbSAnY2hhaSc7XG5pbXBvcnQgY2hhaUFzUHJvbWlzZWQgZnJvbSAnY2hhaS1hcy1wcm9taXNlZCc7XG5pbXBvcnQgQiBmcm9tICdibHVlYmlyZCc7XG5cblxuY2hhaS5zaG91bGQoKTtcbmNoYWkudXNlKGNoYWlBc1Byb21pc2VkKTtcblxuY29uc3QgTE9HX0RJUiA9IHBhdGgucmVzb2x2ZSgndGVzdCcsICdhc3NldHMnLCAnbG9ncycpO1xuXG5kZXNjcmliZSgnc3lzdGVtIGxvZ3MnLCAoKSA9PiB7XG4gIGxldCB0bXBTeXN0ZW1Mb2c7XG4gIGxldCBzaW07XG4gIGJlZm9yZUVhY2goYXN5bmMgKCkgPT4ge1xuICAgIC8vIGdldCB0aGUgc2ltdWxhdG9yLCBhbmQgc3R1YiB3aGF0IHdpbGwgYmUgY2FsbGVkXG4gICAgc2ltID0ge1xuICAgICAgdWRpZDogJ2Zha2UtdWRpZCcsXG4gICAgICBnZXRMb2dEaXI6ICgpID0+IHt9LFxuICAgICAgZ2V0UGxhdGZvcm1WZXJzaW9uOiAoKSA9PiB7fVxuICAgIH07XG4gICAgc2lub24uc3R1YihzaW0sICdnZXRMb2dEaXInKS5yZXR1cm5zKExPR19ESVIpO1xuICAgIHNpbm9uLnN0dWIoc2ltLCAnZ2V0UGxhdGZvcm1WZXJzaW9uJykucmV0dXJucygnOC40Jyk7XG5cbiAgICAvLyBjb3B5IHRoZSBmaWxlIGludG8gYSB0ZW1wb3JhcnkgbG9jYXRpb24sIHNvIHdlIGNhbiBtdWNrIHdpdGggaXRcbiAgICBsZXQgZml4U3lzdGVtTG9nID0gcGF0aC5yZXNvbHZlKExPR19ESVIsICdzeXN0ZW0ubG9nLmZpeHR1cmUnKTtcbiAgICB0bXBTeXN0ZW1Mb2cgPSBwYXRoLnJlc29sdmUoTE9HX0RJUiwgJ3N5c3RlbS5sb2cnKTtcbiAgICBhd2FpdCBmcy5jb3B5RmlsZShmaXhTeXN0ZW1Mb2csIHRtcFN5c3RlbUxvZyk7XG4gIH0pO1xuICBhZnRlckVhY2goYXN5bmMgKCkgPT4ge1xuICAgIGlmIChhd2FpdCBmcy5leGlzdHModG1wU3lzdGVtTG9nKSkge1xuICAgICAgYXdhaXQgZnMudW5saW5rKHRtcFN5c3RlbUxvZyk7XG4gICAgfVxuICB9KTtcblxuICBpdCgnc2hvdWxkIGJlZ2luIGxvZyBjYXB0dXJlJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIGxldCBsb2cgPSBuZXcgSU9TTG9nKHtzaW0sIHNob3dMb2dzOiB0cnVlfSk7XG4gICAgbGV0IHNweSA9IHNpbm9uLnNweShsb2dnZXIsICdpbmZvJyk7XG5cbiAgICBhd2FpdCBsb2cuc3RhcnRDYXB0dXJlKCk7XG5cbiAgICBsZXQgbWVzc2FnZSA9ICdUaGlzIGlzIGEgdGVzdCBsb2cgbGluZSc7XG4gICAgYXdhaXQgZnMud3JpdGVGaWxlKHRtcFN5c3RlbUxvZywgYCR7bWVzc2FnZX1cXG5gLCB7ZmxhZzogJ2EnfSk7XG5cbiAgICAvLyBvbiBzb21lIHNsb3cgc3lzdGVtIChlLmcuLCBUcmF2aXMpIG5lZWQgYSBtb21lbnRcbiAgICBhd2FpdCBCLmRlbGF5KDUwMCk7XG5cbiAgICBzcHkuY2FsbGVkV2l0aChgW0lPU19TWVNMT0dfUk9XXSAke21lc3NhZ2V9YCkuc2hvdWxkLmJlLnRydWU7XG5cbiAgICBhd2FpdCBsb2cuc3RvcENhcHR1cmUoKTtcbiAgfSk7XG59KTtcbiJdLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==

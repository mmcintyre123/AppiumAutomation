'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _appiumSupport = require('appium-support');

var _appiumXcode = require('appium-xcode');

var _appiumXcode2 = _interopRequireDefault(_appiumXcode);

var _appUtils = require('./app-utils');

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _teen_process = require('teen_process');

var _commandsSafari = require('./commands/safari');

var _safariLauncher = require('./safari-launcher');

var rootDir = _path2['default'].resolve(__dirname, '..', '..');

function prepareIosOpts(opts) {
  var pv;
  return _regeneratorRuntime.async(function prepareIosOpts$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        opts.backendRetries = 4;
        opts.withoutDelay = !opts.nativeInstrumentsLib;
        opts.reset = !opts.noReset;
        opts.initialOrientation = opts.deviceOrientation || opts.orientation || "PORTRAIT";
        opts.useRobot = opts.robotPort > 0;
        opts.robotUrl = opts.useRobot ? 'http://' + opts.robotAddress + ':' + opts.robotPort : null;

        if (!(opts.locationServicesAuthorized && !opts.bundleId)) {
          context$1$0.next = 8;
          break;
        }

        throw new Error("You must set the bundleId cap if using locationServicesEnabled");

      case 8:
        context$1$0.t0 = opts.platformVersion;

        if (context$1$0.t0) {
          context$1$0.next = 13;
          break;
        }

        context$1$0.next = 12;
        return _regeneratorRuntime.awrap(_appiumXcode2['default'].getMaxIOSSDK());

      case 12:
        context$1$0.t0 = context$1$0.sent;

      case 13:
        opts.platformVersion = context$1$0.t0;
        pv = parseFloat(opts.platformVersion);

        if (pv < 8) {
          _logger2['default'].warn('iOS version ' + opts.platformVersion + ' support has been ' + 'deprecated and will be removed in a future version of ' + 'Appium.');
        }
        opts.localizableStringsDir = opts.localizableStringsDir || 'en.lproj';
        opts.autoAcceptAlerts = _lodash2['default'].isNull(opts.autoAcceptAlerts) || _lodash2['default'].isUndefined(opts.autoAcceptAlerts) ? false : opts.autoAcceptAlerts;
        opts.autoDismissAlerts = _lodash2['default'].isNull(opts.autoDismissAlerts) || _lodash2['default'].isUndefined(opts.autoDismissAlerts) ? false : opts.autoDismissAlerts;

        if ((opts.browserName || '').toLowerCase() === 'safari' || (opts.app || '').toLowerCase() === 'safari' || (opts.bundleId || '').toLowerCase() === _commandsSafari.SAFARI_BUNDLE) {
          // preparing a safari session
          if (opts.udid) {
            opts.app = _safariLauncher.SAFARI_LAUNCHER_APP_FILE;
            opts.bundleId = _safariLauncher.SAFARI_LAUNCHER_BUNDLE;
          } else {
            if (parseFloat(opts.platformVersion) <= 8) {
              // make sure args.app has something in it so we get to the right spots
              // in moveBuiltInApp()
              opts.app = 'safari';
              opts.bundleId = null;
            } else {
              opts.app = null;
              opts.bundleId = _commandsSafari.SAFARI_BUNDLE;
            }
          }
          opts.safari = true;
        }

      case 20:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function appIsPackageOrBundle(app) {
  return (/^([a-zA-Z0-9\-_]+\.[a-zA-Z0-9\-_]+)+$/.test(app)
  );
}

function removeInstrumentsSocket(sock) {
  return _regeneratorRuntime.async(function removeInstrumentsSocket$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug("Removing any remaining instruments sockets");
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.rimraf(sock));

      case 3:
        _logger2['default'].debug('Cleaned up instruments socket ' + sock);

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function getAndCheckXcodeVersion(caps) {
  var version, minorVersion, pv;
  return _regeneratorRuntime.async(function getAndCheckXcodeVersion$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        version = undefined;
        context$1$0.prev = 1;
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(_appiumXcode2['default'].getVersion(true));

      case 4:
        version = context$1$0.sent;
        context$1$0.next = 12;
        break;

      case 7:
        context$1$0.prev = 7;
        context$1$0.t0 = context$1$0['catch'](1);

        _logger2['default'].debug(context$1$0.t0);
        _logger2['default'].error('Could not determine Xcode version: ' + context$1$0.t0.message);
        throw context$1$0.t0;

      case 12:
        minorVersion = version.versionFloat;
        pv = parseFloat(caps.platformVersion);

        // we deprecate Xcodes < 6.3, except for iOS 8.0 in which case we
        // support Xcode 6.0 as well
        if (minorVersion < 6.3 && !(minorVersion === 6.0 && pv === 8.0)) {
          _logger2['default'].warn('Xcode version \'' + version.versionString + '\'. Support for Xcode ' + (version.versionString + ' has been deprecated and will be removed ') + 'in a future version. Please upgrade to version 6.3 or ' + 'higher (or version 6.0.1 for iOS 8.0)');
        }
        return context$1$0.abrupt('return', version);

      case 16:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[1, 7]]);
}

function getAndCheckIosSdkVersion() {
  var versionNumber;
  return _regeneratorRuntime.async(function getAndCheckIosSdkVersion$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        versionNumber = undefined;
        context$1$0.prev = 1;
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(_appiumXcode2['default'].getMaxIOSSDK());

      case 4:
        versionNumber = context$1$0.sent;
        context$1$0.next = 11;
        break;

      case 7:
        context$1$0.prev = 7;
        context$1$0.t0 = context$1$0['catch'](1);

        _logger2['default'].error("Could not determine iOS SDK version");
        throw context$1$0.t0;

      case 11:
        return context$1$0.abrupt('return', versionNumber);

      case 12:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[1, 7]]);
}

function getSimForDeviceString(dString, availDevices) {
  var matchedDevice = null;
  var matchedUdid = null;
  _lodash2['default'].each(availDevices, function (device) {
    if (device.indexOf(dString) !== -1) {
      matchedDevice = device;
      try {
        matchedUdid = /.+\[([^\]]+)\]/.exec(device)[1];
      } catch (e) {
        matchedUdid = null;
      }
    }
  });
  return [matchedDevice, matchedUdid];
}

function detectUdid(caps) {
  var cmd, args, udid, _ref, stdout;

  return _regeneratorRuntime.async(function detectUdid$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!(caps.udid !== null && caps.udid === "auto")) {
          context$1$0.next = 34;
          break;
        }

        _logger2['default'].debug("Auto-detecting iOS udid...");
        cmd = undefined, args = [];
        context$1$0.prev = 3;
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.which('idevice_id'));

      case 6:
        cmd = context$1$0.sent;

        args.push('-l');
        context$1$0.next = 13;
        break;

      case 10:
        context$1$0.prev = 10;
        context$1$0.t0 = context$1$0['catch'](3);

        cmd = require.resolve('udidetect');

      case 13:
        udid = undefined;
        context$1$0.prev = 14;
        context$1$0.next = 17;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)(cmd, args, { timeout: 3000 }));

      case 17:
        _ref = context$1$0.sent;
        stdout = _ref.stdout;

        udid = stdout.split("\n")[0];
        context$1$0.next = 26;
        break;

      case 22:
        context$1$0.prev = 22;
        context$1$0.t1 = context$1$0['catch'](14);

        _logger2['default'].error("Error detecting udid");
        throw context$1$0.t1;

      case 26:
        if (!(udid && udid.length > 2)) {
          context$1$0.next = 31;
          break;
        }

        caps.udid = udid;
        _logger2['default'].debug('Detected udid as \'' + caps.udid + '\'');
        context$1$0.next = 32;
        break;

      case 31:
        throw new Error("Could not detect udid.");

      case 32:
        context$1$0.next = 35;
        break;

      case 34:
        _logger2['default'].debug("Not auto-detecting udid.");

      case 35:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[3, 10], [14, 22]]);
}

function parseLocalizableStrings(opts) {
  var language, stringFile, strings, obj;
  return _regeneratorRuntime.async(function parseLocalizableStrings$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!(_lodash2['default'].isNull(opts.app) || _lodash2['default'].isUndefined(opts.app))) {
          context$1$0.next = 3;
          break;
        }

        _logger2['default'].debug("Localizable.strings is not currently supported when using real devices.");
        return context$1$0.abrupt('return');

      case 3:
        language = opts.language;
        stringFile = opts.stringFile || "Localizable.strings";
        strings = null;

        if (!language) {
          context$1$0.next = 15;
          break;
        }

        strings = _path2['default'].resolve(opts.app, language + '.lproj', stringFile);
        context$1$0.next = 10;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(strings));

      case 10:
        if (context$1$0.sent) {
          context$1$0.next = 13;
          break;
        }

        _logger2['default'].debug('No strings file \'' + stringFile + '\' for language \'' + language + '\', getting default strings');
        strings = _path2['default'].resolve(opts.app, stringFile);

      case 13:
        context$1$0.next = 17;
        break;

      case 15:
        _logger2['default'].debug('No language specified. Using default strings');
        strings = _path2['default'].resolve(opts.app, stringFile);

      case 17:
        context$1$0.next = 19;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(strings));

      case 19:
        if (context$1$0.sent) {
          context$1$0.next = 21;
          break;
        }

        if (opts.localizableStringsDir) {
          _logger2['default'].debug('Strings file not found. Looking in \'' + opts.localizableStringsDir + '\' directory');
          strings = _path2['default'].resolve(opts.app, opts.localizableStringsDir, stringFile);
        } else {
          strings = null;
        }

      case 21:
        context$1$0.t0 = !strings;

        if (context$1$0.t0) {
          context$1$0.next = 26;
          break;
        }

        context$1$0.next = 25;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(strings));

      case 25:
        context$1$0.t0 = !context$1$0.sent;

      case 26:
        if (!context$1$0.t0) {
          context$1$0.next = 29;
          break;
        }

        _logger2['default'].warn('Could not file localizable strings file \'' + stringFile + '\'!');
        return context$1$0.abrupt('return');

      case 29:
        obj = undefined;
        context$1$0.prev = 30;
        context$1$0.next = 33;
        return _regeneratorRuntime.awrap(_appiumSupport.plist.parsePlistFile(strings));

      case 33:
        obj = context$1$0.sent;

        _logger2['default'].debug('Parsed app \'' + stringFile + '\'');
        opts.localizableStrings = obj;
        return context$1$0.abrupt('return', obj);

      case 39:
        context$1$0.prev = 39;
        context$1$0.t1 = context$1$0['catch'](30);

        _logger2['default'].warn('Could not parse app \'' + stringFile + '\' assuming it does not exist');

      case 42:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[30, 39]]);
}

function setBundleIdFromApp(caps) {
  return _regeneratorRuntime.async(function setBundleIdFromApp$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (caps.bundleId) {
          context$1$0.next = 12;
          break;
        }

        context$1$0.prev = 1;
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap((0, _appUtils.extractBundleId)(caps.app));

      case 4:
        caps.bundleId = context$1$0.sent;

        _logger2['default'].info('Extracted bundleID: ' + caps.bundleId + ' from app: ' + caps.app);
        context$1$0.next = 12;
        break;

      case 8:
        context$1$0.prev = 8;
        context$1$0.t0 = context$1$0['catch'](1);

        _logger2['default'].error("Could not set the bundleId from app.");
        throw context$1$0.t0;

      case 12:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[1, 8]]);
}

function shouldPrelaunchSimulator(caps, iosSdkVersion) {
  var shouldPrelaunch = false;

  if (caps.defaultDevice || iosSdkVersion >= 7.1) {
    if (this.iosSdkVersion >= 7.1) {
      _logger2['default'].debug("We're on iOS7.1+ so forcing defaultDevice on");
    } else {
      _logger2['default'].debug("User specified default device, letting instruments launch it");
    }
  } else {
    shouldPrelaunch = true;
  }
  return shouldPrelaunch;
}

function setDeviceTypeInInfoPlist(app, deviceString) {
  var plistFile, isiPhone, deviceTypeCode;
  return _regeneratorRuntime.async(function setDeviceTypeInInfoPlist$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!(_lodash2['default'].isNull(app) || _lodash2['default'].isUndefined(app))) {
          context$1$0.next = 2;
          break;
        }

        return context$1$0.abrupt('return');

      case 2:
        plistFile = _path2['default'].resolve(app, "Info.plist");
        isiPhone = deviceString.toLowerCase().indexOf("ipad") === -1;
        deviceTypeCode = isiPhone ? 1 : 2;
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(_appiumSupport.plist.updatePlistFile(plistFile, { UIDeviceFamily: [deviceTypeCode] }));

      case 7:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function unwrapEl(el) {
  if (typeof el === 'object' && el.ELEMENT) {
    return el.ELEMENT;
  }
  return el;
}

function clearLogs(locations) {
  var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _location, size, _ref2, stdout;

  return _regeneratorRuntime.async(function clearLogs$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Clearing log files');
        _iteratorNormalCompletion = true;
        _didIteratorError = false;
        _iteratorError = undefined;
        context$1$0.prev = 4;
        _iterator = _getIterator(locations);

      case 6:
        if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
          context$1$0.next = 34;
          break;
        }

        _location = _step.value;
        context$1$0.next = 10;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(_location));

      case 10:
        if (!context$1$0.sent) {
          context$1$0.next = 31;
          break;
        }

        size = undefined;
        context$1$0.prev = 12;
        context$1$0.next = 15;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('du', ['-sh', _location]));

      case 15:
        _ref2 = context$1$0.sent;
        stdout = _ref2.stdout;

        size = stdout.trim().split(/\s+/)[0];
        context$1$0.next = 22;
        break;

      case 20:
        context$1$0.prev = 20;
        context$1$0.t0 = context$1$0['catch'](12);

      case 22:
        context$1$0.prev = 22;

        /* jshint ignore:start */
        _logger2['default'].debug('Deleting \'' + _location + '\'. ' + (size ? 'Freeing ' + size + '.' : ''));
        /* jshint ignore:end */
        context$1$0.next = 26;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.rimraf(_location));

      case 26:
        context$1$0.next = 31;
        break;

      case 28:
        context$1$0.prev = 28;
        context$1$0.t1 = context$1$0['catch'](22);

        _logger2['default'].warn('Unable to delete \'' + _location + '\': ' + context$1$0.t1.message);

      case 31:
        _iteratorNormalCompletion = true;
        context$1$0.next = 6;
        break;

      case 34:
        context$1$0.next = 40;
        break;

      case 36:
        context$1$0.prev = 36;
        context$1$0.t2 = context$1$0['catch'](4);
        _didIteratorError = true;
        _iteratorError = context$1$0.t2;

      case 40:
        context$1$0.prev = 40;
        context$1$0.prev = 41;

        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }

      case 43:
        context$1$0.prev = 43;

        if (!_didIteratorError) {
          context$1$0.next = 46;
          break;
        }

        throw _iteratorError;

      case 46:
        return context$1$0.finish(43);

      case 47:
        return context$1$0.finish(40);

      case 48:
        _logger2['default'].debug('Finished clearing log files');

      case 49:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[4, 36, 40, 48], [12, 20], [22, 28], [41,, 43, 47]]);
}

exports['default'] = { rootDir: rootDir, removeInstrumentsSocket: removeInstrumentsSocket, getAndCheckXcodeVersion: getAndCheckXcodeVersion, prepareIosOpts: prepareIosOpts,
  appIsPackageOrBundle: appIsPackageOrBundle, getAndCheckIosSdkVersion: getAndCheckIosSdkVersion, detectUdid: detectUdid, parseLocalizableStrings: parseLocalizableStrings,
  setBundleIdFromApp: setBundleIdFromApp, shouldPrelaunchSimulator: shouldPrelaunchSimulator, setDeviceTypeInInfoPlist: setDeviceTypeInInfoPlist,
  getSimForDeviceString: getSimForDeviceString, unwrapEl: unwrapEl, clearLogs: clearLogs };
module.exports = exports['default'];

// This method will try to extract the bundleId from the app
//# sourceMappingURL=data:application/json;charset=utf8;base64,

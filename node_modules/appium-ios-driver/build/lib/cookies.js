/*
 * derived from jQuery Cookie Plugin v1.4.1
 * https://github.com/carhartl/jquery-cookie
 */

// needed to communicate/translate between JSONWire cookies and regular JavaScript cookies

'use strict';

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _appiumLogger = require('appium-logger');

var log = (0, _appiumLogger.getLogger)('Cookie');

// parses the value if needed and converts the value if a converter is provided
// internal function, not exported
function convertCookie(value, converter) {
  if (value.indexOf('"') === 0) {
    // this is a quoted cookied according to RFC2068
    // remove enclosing quotes and internal quotes and backslashes
    value = value.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, '\\');
  }

  var parsedValue = undefined;
  try {
    parsedValue = decodeURIComponent(value.replace(/\+/g, ' '));
  } catch (e) {
    // no need to fail if we can't decode
    log.warn(e);
  }

  return converter ? converter(parsedValue) : parsedValue;
}

// takes arguments given and creates a JavaScript Cookie
function createJSCookie(key, value) {
  var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

  return [encodeURIComponent(key), '=', value, options.expires ? '; expires=' + options.expires : '', options.path ? '; path=' + options.path : '', options.domain ? '; domain=' + options.domain : '', options.secure ? '; secure' : ''].join('');
}

// takes the JavaScript cookieString and translates it into a JSONWire formatted cookie
function createJWPCookie(key, cookieString) {
  var converter = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

  var result = {};
  var cookies = cookieString ? cookieString.split('; ') : [];
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = _getIterator(cookies), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var cookie = _step.value;

      var parts = cookie.split('=');

      // get the first and second element as name and value
      var _name = decodeURIComponent(parts.shift());
      var val = parts[0];

      // if name is key, this is the central element of the cookie, so add as `name`
      // otherwise it is an optional element
      if (key && key === _name) {
        result.name = key;
        result.value = convertCookie(val, converter);
      } else {
        result[_name] = convertCookie(val, converter);
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator['return']) {
        _iterator['return']();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return result;
}

// takes a JavaScript cookiestring and parses it for the value given the key
function getValue(key, cookieString) {
  var converter = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

  var result = createJWPCookie(key, cookieString, converter);

  // if `key` is undefined we want the entire cookie
  return _lodash2['default'].isUndefined(key) ? result : result.value;
}

// returns a cookie that expires on 01 Jan 1970
// assign the returned cookie to an existing cookie to delete that cookie
function expireCookie(key, options) {
  // override `expires` in `options`, and then make the cookie
  return createJSCookie(key, '', _lodash2['default'].assign({}, options, {
    expires: 'Thu, 01 Jan 1970 00:00:00 GMT'
  }));
}

// export individually and also (as default) as an object
exports.createJSCookie = createJSCookie;
exports.createJWPCookie = createJWPCookie;
exports.getValue = getValue;
exports.expireCookie = expireCookie;
exports['default'] = { createJSCookie: createJSCookie, createJWPCookie: createJWPCookie, getValue: getValue, expireCookie: expireCookie };
//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUFFLFdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQztDQUNuRDs7OztBQUtELFNBQVMsWUFBWSxDQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUU7O0FBRW5DLFNBQU8sY0FBYyxDQUFDLEdBQUcsRUFBRSxFQUFFLEVBQUUsb0JBQUUsTUFBTSxDQUFDLEVBQUUsRUFBRSxPQUFPLEVBQUU7QUFDbkQsV0FBTyxFQUFFLCtCQUErQjtHQUN6QyxDQUFDLENBQUMsQ0FBQztDQUNMOzs7UUFHUSxjQUFjLEdBQWQsY0FBYztRQUFFLGVBQWUsR0FBZixlQUFlO1FBQUUsUUFBUSxHQUFSLFFBQVE7UUFBRSxZQUFZLEdBQVosWUFBWTtxQkFDakQsRUFBRSxjQUFjLEVBQWQsY0FBYyxFQUFFLGVBQWUsRUFBZixlQUFlLEVBQUUsUUFBUSxFQUFSLFFBQVEsRUFBRSxZQUFZLEVBQVosWUFBWSxFQUFFIiwiZmlsZSI6ImxpYi9jb29raWVzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIGRlcml2ZWQgZnJvbSBqUXVlcnkgQ29va2llIFBsdWdpbiB2MS40LjFcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jYXJoYXJ0bC9qcXVlcnktY29va2llXG4gKi9cblxuIC8vIG5lZWRlZCB0byBjb21tdW5pY2F0ZS90cmFuc2xhdGUgYmV0d2VlbiBKU09OV2lyZSBjb29raWVzIGFuZCByZWd1bGFyIEphdmFTY3JpcHQgY29va2llc1xuXG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgZ2V0TG9nZ2VyIH0gZnJvbSAnYXBwaXVtLWxvZ2dlcic7XG5cblxuY29uc3QgbG9nID0gZ2V0TG9nZ2VyKCdDb29raWUnKTtcblxuLy8gcGFyc2VzIHRoZSB2YWx1ZSBpZiBuZWVkZWQgYW5kIGNvbnZlcnRzIHRoZSB2YWx1ZSBpZiBhIGNvbnZlcnRlciBpcyBwcm92aWRlZFxuLy8gaW50ZXJuYWwgZnVuY3Rpb24sIG5vdCBleHBvcnRlZFxuZnVuY3Rpb24gY29udmVydENvb2tpZSAodmFsdWUsIGNvbnZlcnRlcikge1xuICBpZiAodmFsdWUuaW5kZXhPZignXCInKSA9PT0gMCkge1xuICAgIC8vIHRoaXMgaXMgYSBxdW90ZWQgY29va2llZCBhY2NvcmRpbmcgdG8gUkZDMjA2OFxuICAgIC8vIHJlbW92ZSBlbmNsb3NpbmcgcXVvdGVzIGFuZCBpbnRlcm5hbCBxdW90ZXMgYW5kIGJhY2tzbGFzaGVzXG4gICAgdmFsdWUgPSB2YWx1ZS5zbGljZSgxLCAtMSkucmVwbGFjZSgvXFxcXFwiL2csICdcIicpLnJlcGxhY2UoL1xcXFxcXFxcL2csICdcXFxcJyk7XG4gIH1cblxuICBsZXQgcGFyc2VkVmFsdWU7XG4gIHRyeSB7XG4gICAgcGFyc2VkVmFsdWUgPSBkZWNvZGVVUklDb21wb25lbnQodmFsdWUucmVwbGFjZSgvXFwrL2csICcgJykpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gbm8gbmVlZCB0byBmYWlsIGlmIHdlIGNhbid0IGRlY29kZVxuICAgIGxvZy53YXJuKGUpO1xuICB9XG5cbiAgcmV0dXJuIGNvbnZlcnRlciA/IGNvbnZlcnRlcihwYXJzZWRWYWx1ZSkgOiBwYXJzZWRWYWx1ZTtcbn1cblxuLy8gdGFrZXMgYXJndW1lbnRzIGdpdmVuIGFuZCBjcmVhdGVzIGEgSmF2YVNjcmlwdCBDb29raWVcbmZ1bmN0aW9uIGNyZWF0ZUpTQ29va2llIChrZXksIHZhbHVlLCBvcHRpb25zID0ge30pIHtcbiAgcmV0dXJuIFtcbiAgICBlbmNvZGVVUklDb21wb25lbnQoa2V5KSwgJz0nLCB2YWx1ZSxcbiAgICBvcHRpb25zLmV4cGlyZXMgPyBgOyBleHBpcmVzPSR7b3B0aW9ucy5leHBpcmVzfWAgOiAnJyxcbiAgICBvcHRpb25zLnBhdGggICAgPyBgOyBwYXRoPSR7b3B0aW9ucy5wYXRofWAgICAgICAgOiAnJyxcbiAgICBvcHRpb25zLmRvbWFpbiAgPyBgOyBkb21haW49JHtvcHRpb25zLmRvbWFpbn1gICAgOiAnJyxcbiAgICBvcHRpb25zLnNlY3VyZSAgPyAnOyBzZWN1cmUnIDogJydcbiAgXS5qb2luKCcnKTtcbn1cblxuLy8gdGFrZXMgdGhlIEphdmFTY3JpcHQgY29va2llU3RyaW5nIGFuZCB0cmFuc2xhdGVzIGl0IGludG8gYSBKU09OV2lyZSBmb3JtYXR0ZWQgY29va2llXG5mdW5jdGlvbiBjcmVhdGVKV1BDb29raWUgKGtleSwgY29va2llU3RyaW5nLCBjb252ZXJ0ZXIgPSBudWxsKSB7XG4gIGxldCByZXN1bHQgPSB7fTtcbiAgbGV0IGNvb2tpZXMgPSBjb29raWVTdHJpbmcgPyBjb29raWVTdHJpbmcuc3BsaXQoJzsgJykgOiBbXTtcbiAgZm9yIChsZXQgY29va2llIG9mIGNvb2tpZXMpIHtcbiAgICBsZXQgcGFydHMgPSBjb29raWUuc3BsaXQoJz0nKTtcblxuICAgIC8vIGdldCB0aGUgZmlyc3QgYW5kIHNlY29uZCBlbGVtZW50IGFzIG5hbWUgYW5kIHZhbHVlXG4gICAgbGV0IG5hbWUgPSBkZWNvZGVVUklDb21wb25lbnQocGFydHMuc2hpZnQoKSk7XG4gICAgbGV0IHZhbCA9IHBhcnRzWzBdO1xuXG4gICAgLy8gaWYgbmFtZSBpcyBrZXksIHRoaXMgaXMgdGhlIGNlbnRyYWwgZWxlbWVudCBvZiB0aGUgY29va2llLCBzbyBhZGQgYXMgYG5hbWVgXG4gICAgLy8gb3RoZXJ3aXNlIGl0IGlzIGFuIG9wdGlvbmFsIGVsZW1lbnRcbiAgICBpZiAoa2V5ICYmIGtleSA9PT0gbmFtZSkge1xuICAgICAgcmVzdWx0Lm5hbWUgPSBrZXk7XG4gICAgICByZXN1bHQudmFsdWUgPSBjb252ZXJ0Q29va2llKHZhbCwgY29udmVydGVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W25hbWVdID0gY29udmVydENvb2tpZSh2YWwsIGNvbnZlcnRlcik7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8vIHRha2VzIGEgSmF2YVNjcmlwdCBjb29raWVzdHJpbmcgYW5kIHBhcnNlcyBpdCBmb3IgdGhlIHZhbHVlIGdpdmVuIHRoZSBrZXlcbmZ1bmN0aW9uIGdldFZhbHVlIChrZXksIGNvb2tpZVN0cmluZywgY29udmVydGVyID0gbnVsbCkge1xuICBsZXQgcmVzdWx0ID0gY3JlYXRlSldQQ29va2llKGtleSwgY29va2llU3RyaW5nLCBjb252ZXJ0ZXIpO1xuXG4gIC8vIGlmIGBrZXlgIGlzIHVuZGVmaW5lZCB3ZSB3YW50IHRoZSBlbnRpcmUgY29va2llXG4gIHJldHVybiBfLmlzVW5kZWZpbmVkKGtleSkgPyByZXN1bHQgOiByZXN1bHQudmFsdWU7XG59XG5cblxuLy8gcmV0dXJucyBhIGNvb2tpZSB0aGF0IGV4cGlyZXMgb24gMDEgSmFuIDE5NzBcbi8vIGFzc2lnbiB0aGUgcmV0dXJuZWQgY29va2llIHRvIGFuIGV4aXN0aW5nIGNvb2tpZSB0byBkZWxldGUgdGhhdCBjb29raWVcbmZ1bmN0aW9uIGV4cGlyZUNvb2tpZSAoa2V5LCBvcHRpb25zKSB7XG4gIC8vIG92ZXJyaWRlIGBleHBpcmVzYCBpbiBgb3B0aW9uc2AsIGFuZCB0aGVuIG1ha2UgdGhlIGNvb2tpZVxuICByZXR1cm4gY3JlYXRlSlNDb29raWUoa2V5LCAnJywgXy5hc3NpZ24oe30sIG9wdGlvbnMsIHtcbiAgICBleHBpcmVzOiAnVGh1LCAwMSBKYW4gMTk3MCAwMDowMDowMCBHTVQnXG4gIH0pKTtcbn1cblxuLy8gZXhwb3J0IGluZGl2aWR1YWxseSBhbmQgYWxzbyAoYXMgZGVmYXVsdCkgYXMgYW4gb2JqZWN0XG5leHBvcnQgeyBjcmVhdGVKU0Nvb2tpZSwgY3JlYXRlSldQQ29va2llLCBnZXRWYWx1ZSwgZXhwaXJlQ29va2llIH07XG5leHBvcnQgZGVmYXVsdCB7IGNyZWF0ZUpTQ29va2llLCBjcmVhdGVKV1BDb29raWUsIGdldFZhbHVlLCBleHBpcmVDb29raWUgfTtcbiJdLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _appiumBaseDriver = require('appium-base-driver');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

var _appiumSupport = require('appium-support');

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var commands = {},
    helpers = {},
    extensions = {};

commands.execute = function callee$0$0(script, args) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!script.match(/^mobile\:/)) {
          context$1$0.next = 7;
          break;
        }

        script = script.replace(/^mobile\:/, '').trim();
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.executeMobile(script, _lodash2['default'].isArray(args) ? args[0] : args));

      case 4:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 7:
        if (!this.isWebContext()) {
          context$1$0.next = 14;
          break;
        }

        args = this.convertElementsForAtoms(args);
        context$1$0.next = 11;
        return _regeneratorRuntime.awrap(this.executeAtom('execute_script', [script, args]));

      case 11:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 14:
        context$1$0.next = 16;
        return _regeneratorRuntime.awrap(this.uiAutoClient.sendCommand(script));

      case 16:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 17:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.executeAsync = function callee$0$0(script, args, sessionId) {
  var address, port, responseUrl, defaultHost, urlObject;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (this.isWebContext()) {
          context$1$0.next = 4;
          break;
        }

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.uiAutoClient.sendCommand(script));

      case 3:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 4:
        address = this.opts.callbackAddress || this.opts.address;
        port = this.opts.callbackPort || this.opts.port;

        sessionId = sessionId || this.sessionId;
        responseUrl = 'http://' + address + ':' + port + '/wd/hub/session/' + sessionId + '/receive_async_response';

        if (this.isRealDevice()) {
          defaultHost = this.opts.address;
          urlObject = _url2['default'].parse(responseUrl);

          if (urlObject.hostname === defaultHost) {
            _logger2['default'].debug('Real device safari test and no custom callback address ' + 'set, changing callback address to local ip.');
            urlObject.hostname = _appiumSupport.util.localIp();
            urlObject.host = null; // set to null, otherwise hostname is ignored
            responseUrl = _url2['default'].format(urlObject);
          } else {
            _logger2['default'].debug('Custom callback address set, leaving as is.');
          }
        }

        _logger2['default'].debug('Response url for executeAsync: ' + responseUrl);
        args = this.convertElementsForAtoms(args);
        context$1$0.next = 13;
        return _regeneratorRuntime.awrap(this.executeAtomAsync('execute_async_script', [script, args, this.asyncWaitMs], responseUrl));

      case 13:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 14:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.receiveAsyncResponse = function callee$0$0(status, value) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Received async response: ' + JSON.stringify(value));
        if (!_lodash2['default'].isNull(this.asyncPromise) && !_lodash2['default'].isUndefined(this.asyncPromise)) {
          if (status !== 0) {
            this.asyncPromise.reject((0, _appiumBaseDriver.errorFromCode)(status, value.message));
          } else {
            this.asyncPromise.resolve(value);
          }
        } else {
          _logger2['default'].warn('Received async response when we were not expecting one! ' + ('Response was: ' + JSON.stringify(value)));
        }

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.executeMobile = function callee$0$0(mobileCommand) {
  var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!(mobileCommand === 'scroll')) {
          context$1$0.next = 5;
          break;
        }

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.mobileScroll(opts));

      case 3:
        context$1$0.next = 6;
        break;

      case 5:
        throw new _appiumBaseDriver.errors.UnknownCommandError('Unknown command, all the mobile commands except scroll have been removed.');

      case 6:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

_Object$assign(extensions, commands, helpers);
exports.commands = commands;
exports.helpers = helpers;
exports['default'] = extensions;

// we only support mobile: scroll
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9leGVjdXRlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztnQ0FBc0Msb0JBQW9COztzQkFDNUMsUUFBUTs7OzttQkFDTixLQUFLOzs7OzZCQUNBLGdCQUFnQjs7c0JBQ2xCLFdBQVc7Ozs7QUFHOUIsSUFBSSxRQUFRLEdBQUcsRUFBRTtJQUFFLE9BQU8sR0FBRyxFQUFFO0lBQUUsVUFBVSxHQUFHLEVBQUUsQ0FBQzs7QUFFakQsUUFBUSxDQUFDLE9BQU8sR0FBRyxvQkFBZ0IsTUFBTSxFQUFFLElBQUk7Ozs7YUFDekMsTUFBTSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUM7Ozs7O0FBQzNCLGNBQU0sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQzs7eUNBQ25DLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLG9CQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDOzs7Ozs7YUFFckUsSUFBSSxDQUFDLFlBQVksRUFBRTs7Ozs7QUFDckIsWUFBSSxHQUFHLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsQ0FBQzs7eUNBQzdCLElBQUksQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7Ozs7Ozs7eUNBRWxELElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQzs7Ozs7Ozs7OztDQUd2RCxDQUFDOztBQUVGLFFBQVEsQ0FBQyxZQUFZLEdBQUcsb0JBQWdCLE1BQU0sRUFBRSxJQUFJLEVBQUUsU0FBUztNQUt6RCxPQUFPLEVBQ1AsSUFBSSxFQUVKLFdBQVcsRUFHVCxXQUFXLEVBQ1gsU0FBUzs7OztZQVhWLElBQUksQ0FBQyxZQUFZLEVBQUU7Ozs7Ozt5Q0FDVCxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUM7Ozs7OztBQUdoRCxlQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPO0FBQ3hELFlBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUk7O0FBQ25ELGlCQUFTLEdBQUcsU0FBUyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUM7QUFDcEMsbUJBQVcsZUFBYSxPQUFPLFNBQUksSUFBSSx3QkFBbUIsU0FBUzs7QUFFdkUsWUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFLEVBQUU7QUFDbkIscUJBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU87QUFDL0IsbUJBQVMsR0FBRyxpQkFBSSxLQUFLLENBQUMsV0FBVyxDQUFDOztBQUN0QyxjQUFJLFNBQVMsQ0FBQyxRQUFRLEtBQUssV0FBVyxFQUFFO0FBQ3RDLGdDQUFPLEtBQUssQ0FBQyx5REFBeUQsR0FDekQsNkNBQTZDLENBQUMsQ0FBQztBQUM1RCxxQkFBUyxDQUFDLFFBQVEsR0FBRyxvQkFBSyxPQUFPLEVBQUUsQ0FBQztBQUNwQyxxQkFBUyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7QUFDdEIsdUJBQVcsR0FBRyxpQkFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7V0FDckMsTUFBTTtBQUNMLGdDQUFPLEtBQUssQ0FBQyw2Q0FBNkMsQ0FBQyxDQUFDO1dBQzdEO1NBQ0Y7O0FBRUQsNEJBQU8sS0FBSyxxQ0FBbUMsV0FBVyxDQUFHLENBQUM7QUFDOUQsWUFBSSxHQUFHLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsQ0FBQzs7eUNBQzdCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxzQkFBc0IsRUFBRSxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLFdBQVcsQ0FBQzs7Ozs7Ozs7OztDQUMxRyxDQUFDOztBQUVGLFFBQVEsQ0FBQyxvQkFBb0IsR0FBRyxvQkFBZ0IsTUFBTSxFQUFFLEtBQUs7Ozs7QUFDM0QsNEJBQU8sS0FBSywrQkFBNkIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBRyxDQUFDO0FBQ2xFLFlBQUksQ0FBQyxvQkFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsb0JBQUUsV0FBVyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsRUFBRTtBQUNyRSxjQUFJLE1BQU0sS0FBSyxDQUFDLEVBQUU7QUFDaEIsZ0JBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLHFDQUFjLE1BQU0sRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztXQUNoRSxNQUFNO0FBQ0wsZ0JBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1dBQ2xDO1NBQ0YsTUFBTTtBQUNMLDhCQUFPLElBQUksQ0FBQyxpRkFDaUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBRSxDQUFDLENBQUM7U0FDdkQ7Ozs7Ozs7Q0FDRixDQUFDOztBQUVGLFFBQVEsQ0FBQyxhQUFhLEdBQUcsb0JBQWdCLGFBQWE7TUFBRSxJQUFJLHlEQUFDLEVBQUU7Ozs7Y0FFekQsYUFBYSxLQUFLLFFBQVEsQ0FBQTs7Ozs7O3lDQUN0QixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQzs7Ozs7OztjQUV2QixJQUFJLHlCQUFPLG1CQUFtQixDQUFDLDJFQUEyRSxDQUFDOzs7Ozs7O0NBRXBILENBQUM7O0FBRUYsZUFBYyxVQUFVLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3BDLFFBQVEsR0FBUixRQUFRO1FBQUUsT0FBTyxHQUFQLE9BQU87cUJBQ1gsVUFBVSIsImZpbGUiOiJsaWIvY29tbWFuZHMvZXhlY3V0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGVycm9ycywgZXJyb3JGcm9tQ29kZSB9IGZyb20gJ2FwcGl1bS1iYXNlLWRyaXZlcic7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHVybCBmcm9tICd1cmwnO1xuaW1wb3J0IHsgdXRpbCB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcbmltcG9ydCBsb2dnZXIgZnJvbSAnLi4vbG9nZ2VyJztcblxuXG5sZXQgY29tbWFuZHMgPSB7fSwgaGVscGVycyA9IHt9LCBleHRlbnNpb25zID0ge307XG5cbmNvbW1hbmRzLmV4ZWN1dGUgPSBhc3luYyBmdW5jdGlvbiAoc2NyaXB0LCBhcmdzKSB7XG4gIGlmIChzY3JpcHQubWF0Y2goL15tb2JpbGVcXDovKSkge1xuICAgIHNjcmlwdCA9IHNjcmlwdC5yZXBsYWNlKC9ebW9iaWxlXFw6LywgJycpLnRyaW0oKTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5leGVjdXRlTW9iaWxlKHNjcmlwdCwgXy5pc0FycmF5KGFyZ3MpID8gYXJnc1swXSA6IGFyZ3MpO1xuICB9IGVsc2Uge1xuICAgIGlmICh0aGlzLmlzV2ViQ29udGV4dCgpKSB7XG4gICAgICBhcmdzID0gdGhpcy5jb252ZXJ0RWxlbWVudHNGb3JBdG9tcyhhcmdzKTtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLmV4ZWN1dGVBdG9tKCdleGVjdXRlX3NjcmlwdCcsIFtzY3JpcHQsIGFyZ3NdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudWlBdXRvQ2xpZW50LnNlbmRDb21tYW5kKHNjcmlwdCk7XG4gICAgfVxuICB9XG59O1xuXG5jb21tYW5kcy5leGVjdXRlQXN5bmMgPSBhc3luYyBmdW5jdGlvbiAoc2NyaXB0LCBhcmdzLCBzZXNzaW9uSWQpIHtcbiAgaWYgKCF0aGlzLmlzV2ViQ29udGV4dCgpKSB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudWlBdXRvQ2xpZW50LnNlbmRDb21tYW5kKHNjcmlwdCk7XG4gIH1cblxuICBsZXQgYWRkcmVzcyA9IHRoaXMub3B0cy5jYWxsYmFja0FkZHJlc3MgfHwgdGhpcy5vcHRzLmFkZHJlc3M7XG4gIGxldCBwb3J0ID0gdGhpcy5vcHRzLmNhbGxiYWNrUG9ydCB8fCB0aGlzLm9wdHMucG9ydDtcbiAgc2Vzc2lvbklkID0gc2Vzc2lvbklkIHx8IHRoaXMuc2Vzc2lvbklkO1xuICBsZXQgcmVzcG9uc2VVcmwgPSBgaHR0cDovLyR7YWRkcmVzc306JHtwb3J0fS93ZC9odWIvc2Vzc2lvbi8ke3Nlc3Npb25JZH0vcmVjZWl2ZV9hc3luY19yZXNwb25zZWA7XG5cbiAgaWYgKHRoaXMuaXNSZWFsRGV2aWNlKCkpIHtcbiAgICBsZXQgZGVmYXVsdEhvc3QgPSB0aGlzLm9wdHMuYWRkcmVzcztcbiAgICBsZXQgdXJsT2JqZWN0ID0gdXJsLnBhcnNlKHJlc3BvbnNlVXJsKTtcbiAgICBpZiAodXJsT2JqZWN0Lmhvc3RuYW1lID09PSBkZWZhdWx0SG9zdCkge1xuICAgICAgbG9nZ2VyLmRlYnVnKCdSZWFsIGRldmljZSBzYWZhcmkgdGVzdCBhbmQgbm8gY3VzdG9tIGNhbGxiYWNrIGFkZHJlc3MgJyArXG4gICAgICAgICAgICAgICAgICAgJ3NldCwgY2hhbmdpbmcgY2FsbGJhY2sgYWRkcmVzcyB0byBsb2NhbCBpcC4nKTtcbiAgICAgIHVybE9iamVjdC5ob3N0bmFtZSA9IHV0aWwubG9jYWxJcCgpO1xuICAgICAgdXJsT2JqZWN0Lmhvc3QgPSBudWxsOyAvLyBzZXQgdG8gbnVsbCwgb3RoZXJ3aXNlIGhvc3RuYW1lIGlzIGlnbm9yZWRcbiAgICAgIHJlc3BvbnNlVXJsID0gdXJsLmZvcm1hdCh1cmxPYmplY3QpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2dnZXIuZGVidWcoJ0N1c3RvbSBjYWxsYmFjayBhZGRyZXNzIHNldCwgbGVhdmluZyBhcyBpcy4nKTtcbiAgICB9XG4gIH1cblxuICBsb2dnZXIuZGVidWcoYFJlc3BvbnNlIHVybCBmb3IgZXhlY3V0ZUFzeW5jOiAke3Jlc3BvbnNlVXJsfWApO1xuICBhcmdzID0gdGhpcy5jb252ZXJ0RWxlbWVudHNGb3JBdG9tcyhhcmdzKTtcbiAgcmV0dXJuIGF3YWl0IHRoaXMuZXhlY3V0ZUF0b21Bc3luYygnZXhlY3V0ZV9hc3luY19zY3JpcHQnLCBbc2NyaXB0LCBhcmdzLCB0aGlzLmFzeW5jV2FpdE1zXSwgcmVzcG9uc2VVcmwpO1xufTtcblxuY29tbWFuZHMucmVjZWl2ZUFzeW5jUmVzcG9uc2UgPSBhc3luYyBmdW5jdGlvbiAoc3RhdHVzLCB2YWx1ZSkge1xuICBsb2dnZXIuZGVidWcoYFJlY2VpdmVkIGFzeW5jIHJlc3BvbnNlOiAke0pTT04uc3RyaW5naWZ5KHZhbHVlKX1gKTtcbiAgaWYgKCFfLmlzTnVsbCh0aGlzLmFzeW5jUHJvbWlzZSkgJiYgIV8uaXNVbmRlZmluZWQodGhpcy5hc3luY1Byb21pc2UpKSB7XG4gICAgaWYgKHN0YXR1cyAhPT0gMCkge1xuICAgICAgdGhpcy5hc3luY1Byb21pc2UucmVqZWN0KGVycm9yRnJvbUNvZGUoc3RhdHVzLCB2YWx1ZS5tZXNzYWdlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYXN5bmNQcm9taXNlLnJlc29sdmUodmFsdWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBsb2dnZXIud2FybihgUmVjZWl2ZWQgYXN5bmMgcmVzcG9uc2Ugd2hlbiB3ZSB3ZXJlIG5vdCBleHBlY3Rpbmcgb25lISBgICtcbiAgICAgICAgICAgICAgICBgUmVzcG9uc2Ugd2FzOiAke0pTT04uc3RyaW5naWZ5KHZhbHVlKX1gKTtcbiAgfVxufTtcblxuY29tbWFuZHMuZXhlY3V0ZU1vYmlsZSA9IGFzeW5jIGZ1bmN0aW9uIChtb2JpbGVDb21tYW5kLCBvcHRzPXt9KSB7XG4gIC8vIHdlIG9ubHkgc3VwcG9ydCBtb2JpbGU6IHNjcm9sbFxuICBpZiAobW9iaWxlQ29tbWFuZCA9PT0gJ3Njcm9sbCcpIHtcbiAgICBhd2FpdCB0aGlzLm1vYmlsZVNjcm9sbChvcHRzKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLlVua25vd25Db21tYW5kRXJyb3IoJ1Vua25vd24gY29tbWFuZCwgYWxsIHRoZSBtb2JpbGUgY29tbWFuZHMgZXhjZXB0IHNjcm9sbCBoYXZlIGJlZW4gcmVtb3ZlZC4nKTtcbiAgfVxufTtcblxuT2JqZWN0LmFzc2lnbihleHRlbnNpb25zLCBjb21tYW5kcywgaGVscGVycyk7XG5leHBvcnQgeyBjb21tYW5kcywgaGVscGVycyB9O1xuZXhwb3J0IGRlZmF1bHQgZXh0ZW5zaW9ucztcbiJdLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==

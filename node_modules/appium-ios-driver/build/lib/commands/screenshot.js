'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _uuidJs = require('uuid-js');

var _uuidJs2 = _interopRequireDefault(_uuidJs);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _asyncbox = require('asyncbox');

var _appiumSupport = require('appium-support');

var _appiumUiauto = require('appium-uiauto');

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var _appiumBaseDriver = require('appium-base-driver');

var commands = {},
    helpers = {},
    extensions = {};

commands.getScreenshot = function callee$0$0() {
  var guid, shotFile, shotFolder, shotPath, takeScreenShot, data;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        guid = _uuidJs2['default'].create();
        shotFile = 'screenshot' + guid;
        shotFolder = _path2['default'].resolve(this.opts.tmpDir, 'appium-instruments/Run 1/');
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(shotFolder));

      case 5:
        if (context$1$0.sent) {
          context$1$0.next = 9;
          break;
        }

        _logger2['default'].debug('Creating folder \'' + shotFolder + '\'');
        context$1$0.next = 9;
        return _regeneratorRuntime.awrap((0, _appiumSupport.mkdirp)(shotFolder));

      case 9:
        shotPath = _path2['default'].resolve(shotFolder, shotFile + '.png');

        _logger2['default'].debug('Taking screenshot: \'' + shotPath + '\'');

        takeScreenShot = function takeScreenShot() {
          var screenshotWaitTimeout, startMs, success;
          return _regeneratorRuntime.async(function takeScreenShot$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.next = 2;
                return _regeneratorRuntime.awrap(this.uiAutoClient.sendCommand('au.capture(\'' + shotFile + '\')'));

              case 2:
                screenshotWaitTimeout = (this.opts.screenshotWaitTimeout || 10) * 1000;

                _logger2['default'].debug('Waiting ' + screenshotWaitTimeout + ' ms for screenshot to be generated.');
                startMs = Date.now();
                success = false;

              case 6:
                if (!(Date.now() - startMs < screenshotWaitTimeout)) {
                  context$2$0.next = 16;
                  break;
                }

                context$2$0.next = 9;
                return _regeneratorRuntime.awrap(_appiumSupport.fs.hasAccess(shotPath));

              case 9:
                if (!context$2$0.sent) {
                  context$2$0.next = 12;
                  break;
                }

                success = true;
                return context$2$0.abrupt('break', 16);

              case 12:
                context$2$0.next = 14;
                return _regeneratorRuntime.awrap(_bluebird2['default'].delay(300));

              case 14:
                context$2$0.next = 6;
                break;

              case 16:
                if (success) {
                  context$2$0.next = 18;
                  break;
                }

                throw new _appiumBaseDriver.errors.UnknownError('Timed out waiting for screenshot file');

              case 18:
                context$2$0.next = 20;
                return _regeneratorRuntime.awrap(this.getOrientation());

              case 20:
                context$2$0.t0 = context$2$0.sent;

                if (!(context$2$0.t0 === 'LANDSCAPE')) {
                  context$2$0.next = 25;
                  break;
                }

                _logger2['default'].debug('Rotating landscape screenshot');
                context$2$0.next = 25;
                return _regeneratorRuntime.awrap(_appiumUiauto.utils.rotateImage(shotPath, -90));

              case 25:
                context$2$0.next = 27;
                return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(shotPath));

              case 27:
                return context$2$0.abrupt('return', context$2$0.sent);

              case 28:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this);
        };

        context$1$0.next = 14;
        return _regeneratorRuntime.awrap((0, _asyncbox.retry)(3, takeScreenShot));

      case 14:
        data = context$1$0.sent;
        return context$1$0.abrupt('return', new Buffer(data).toString('base64'));

      case 16:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

_Object$assign(extensions, commands, helpers);
exports.commands = commands;
exports.helpers = helpers;
exports['default'] = extensions;

// check the rotation, and rotate if necessary

// Retrying the whole screenshot process for three times.
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9zY3JlZW5zaG90LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztzQkFBaUIsU0FBUzs7Ozt3QkFDWixVQUFVOzs7O29CQUNQLE1BQU07Ozs7d0JBQ0QsVUFBVTs7NkJBQ0wsZ0JBQWdCOzs0QkFDckIsZUFBZTs7c0JBQ2xCLFdBQVc7Ozs7Z0NBQ1Asb0JBQW9COztBQUczQyxJQUFJLFFBQVEsR0FBRyxFQUFFO0lBQUUsT0FBTyxHQUFHLEVBQUU7SUFBRSxVQUFVLEdBQUcsRUFBRSxDQUFDOztBQUVqRCxRQUFRLENBQUMsYUFBYSxHQUFHO01BQ25CLElBQUksRUFDSixRQUFRLEVBRVIsVUFBVSxFQU1WLFFBQVEsRUFHUixjQUFjLEVBNEJkLElBQUk7Ozs7OztBQXhDSixZQUFJLEdBQUcsb0JBQUssTUFBTSxFQUFFO0FBQ3BCLGdCQUFRLGtCQUFnQixJQUFJO0FBRTVCLGtCQUFVLEdBQUcsa0JBQUssT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLDJCQUEyQixDQUFDOzt5Q0FDaEUsa0JBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQzs7Ozs7Ozs7QUFDL0IsNEJBQU8sS0FBSyx3QkFBcUIsVUFBVSxRQUFJLENBQUM7O3lDQUMxQywyQkFBTyxVQUFVLENBQUM7OztBQUd0QixnQkFBUSxHQUFHLGtCQUFLLE9BQU8sQ0FBQyxVQUFVLEVBQUssUUFBUSxVQUFPOztBQUMxRCw0QkFBTyxLQUFLLDJCQUF3QixRQUFRLFFBQUksQ0FBQzs7QUFFN0Msc0JBQWMsR0FBRyxTQUFqQixjQUFjO2NBR1oscUJBQXFCLEVBRXJCLE9BQU8sRUFFUCxPQUFPOzs7OztpREFOTCxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsbUJBQWdCLFFBQVEsU0FBSzs7O0FBRTVELHFDQUFxQixHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsSUFBSSxFQUFFLENBQUEsR0FBSSxJQUFJOztBQUMxRSxvQ0FBTyxLQUFLLGNBQVkscUJBQXFCLHlDQUFzQyxDQUFDO0FBQ2hGLHVCQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRTtBQUVwQix1QkFBTyxHQUFHLEtBQUs7OztzQkFDWixBQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxPQUFPLEdBQUkscUJBQXFCLENBQUE7Ozs7OztpREFDekMsa0JBQUcsU0FBUyxDQUFDLFFBQVEsQ0FBQzs7Ozs7Ozs7QUFDOUIsdUJBQU8sR0FBRyxJQUFJLENBQUM7Ozs7O2lEQUdYLHNCQUFFLEtBQUssQ0FBQyxHQUFHLENBQUM7Ozs7Ozs7b0JBRWYsT0FBTzs7Ozs7c0JBQ0osSUFBSSx5QkFBTyxZQUFZLENBQUMsdUNBQXVDLENBQUM7Ozs7aURBSTlELElBQUksQ0FBQyxjQUFjLEVBQUU7Ozs7O3lDQUFLLFdBQVc7Ozs7O0FBQzdDLG9DQUFPLEtBQUssQ0FBQywrQkFBK0IsQ0FBQyxDQUFDOztpREFDeEMsb0JBQU0sV0FBVyxDQUFDLFFBQVEsRUFBRSxDQUFDLEVBQUUsQ0FBQzs7OztpREFFM0Isa0JBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQzs7Ozs7Ozs7OztTQUNuQzs7O3lDQUdnQixxQkFBTSxDQUFDLEVBQUUsY0FBYyxDQUFDOzs7QUFBckMsWUFBSTs0Q0FDRCxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDOzs7Ozs7O0NBQzNDLENBQUM7O0FBR0YsZUFBYyxVQUFVLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3BDLFFBQVEsR0FBUixRQUFRO1FBQUUsT0FBTyxHQUFQLE9BQU87cUJBQ1gsVUFBVSIsImZpbGUiOiJsaWIvY29tbWFuZHMvc2NyZWVuc2hvdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB1dWlkIGZyb20gJ3V1aWQtanMnO1xuaW1wb3J0IEIgZnJvbSAnYmx1ZWJpcmQnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyByZXRyeSB9IGZyb20gJ2FzeW5jYm94JztcbmltcG9ydCB7IGZzLCBta2RpcnAgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgeyB1dGlscyB9IGZyb20gJ2FwcGl1bS11aWF1dG8nO1xuaW1wb3J0IGxvZ2dlciBmcm9tICcuLi9sb2dnZXInO1xuaW1wb3J0IHsgZXJyb3JzIH0gZnJvbSAnYXBwaXVtLWJhc2UtZHJpdmVyJztcblxuXG5sZXQgY29tbWFuZHMgPSB7fSwgaGVscGVycyA9IHt9LCBleHRlbnNpb25zID0ge307XG5cbmNvbW1hbmRzLmdldFNjcmVlbnNob3QgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIGxldCBndWlkID0gdXVpZC5jcmVhdGUoKTtcbiAgbGV0IHNob3RGaWxlID0gYHNjcmVlbnNob3Qke2d1aWR9YDtcblxuICBsZXQgc2hvdEZvbGRlciA9IHBhdGgucmVzb2x2ZSh0aGlzLm9wdHMudG1wRGlyLCAnYXBwaXVtLWluc3RydW1lbnRzL1J1biAxLycpO1xuICBpZiAoIShhd2FpdCBmcy5leGlzdHMoc2hvdEZvbGRlcikpKSB7XG4gICAgbG9nZ2VyLmRlYnVnKGBDcmVhdGluZyBmb2xkZXIgJyR7c2hvdEZvbGRlcn0nYCk7XG4gICAgYXdhaXQgbWtkaXJwKHNob3RGb2xkZXIpO1xuICB9XG5cbiAgbGV0IHNob3RQYXRoID0gcGF0aC5yZXNvbHZlKHNob3RGb2xkZXIsIGAke3Nob3RGaWxlfS5wbmdgKTtcbiAgbG9nZ2VyLmRlYnVnKGBUYWtpbmcgc2NyZWVuc2hvdDogJyR7c2hvdFBhdGh9J2ApO1xuXG4gIGxldCB0YWtlU2NyZWVuU2hvdCA9IGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCB0aGlzLnVpQXV0b0NsaWVudC5zZW5kQ29tbWFuZChgYXUuY2FwdHVyZSgnJHtzaG90RmlsZX0nKWApO1xuXG4gICAgbGV0IHNjcmVlbnNob3RXYWl0VGltZW91dCA9ICh0aGlzLm9wdHMuc2NyZWVuc2hvdFdhaXRUaW1lb3V0IHx8IDEwKSAqIDEwMDA7XG4gICAgbG9nZ2VyLmRlYnVnKGBXYWl0aW5nICR7c2NyZWVuc2hvdFdhaXRUaW1lb3V0fSBtcyBmb3Igc2NyZWVuc2hvdCB0byBiZSBnZW5lcmF0ZWQuYCk7XG4gICAgbGV0IHN0YXJ0TXMgPSBEYXRlLm5vdygpO1xuXG4gICAgbGV0IHN1Y2Nlc3MgPSBmYWxzZTtcbiAgICB3aGlsZSAoKERhdGUubm93KCkgLSBzdGFydE1zKSA8IHNjcmVlbnNob3RXYWl0VGltZW91dCkge1xuICAgICAgaWYgKGF3YWl0IGZzLmhhc0FjY2VzcyhzaG90UGF0aCkpIHtcbiAgICAgICAgc3VjY2VzcyA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgYXdhaXQgQi5kZWxheSgzMDApO1xuICAgIH1cbiAgICBpZiAoIXN1Y2Nlc3MpIHtcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuVW5rbm93bkVycm9yKCdUaW1lZCBvdXQgd2FpdGluZyBmb3Igc2NyZWVuc2hvdCBmaWxlJyk7XG4gICAgfVxuXG4gICAgLy8gY2hlY2sgdGhlIHJvdGF0aW9uLCBhbmQgcm90YXRlIGlmIG5lY2Vzc2FyeVxuICAgIGlmIChhd2FpdCB0aGlzLmdldE9yaWVudGF0aW9uKCkgPT09ICdMQU5EU0NBUEUnKSB7XG4gICAgICBsb2dnZXIuZGVidWcoJ1JvdGF0aW5nIGxhbmRzY2FwZSBzY3JlZW5zaG90Jyk7XG4gICAgICBhd2FpdCB1dGlscy5yb3RhdGVJbWFnZShzaG90UGF0aCwgLTkwKTtcbiAgICB9XG4gICAgcmV0dXJuIGF3YWl0IGZzLnJlYWRGaWxlKHNob3RQYXRoKTtcbiAgfTtcblxuICAvLyBSZXRyeWluZyB0aGUgd2hvbGUgc2NyZWVuc2hvdCBwcm9jZXNzIGZvciB0aHJlZSB0aW1lcy5cbiAgbGV0IGRhdGEgPSBhd2FpdCByZXRyeSgzLCB0YWtlU2NyZWVuU2hvdCk7XG4gIHJldHVybiBuZXcgQnVmZmVyKGRhdGEpLnRvU3RyaW5nKCdiYXNlNjQnKTtcbn07XG5cblxuT2JqZWN0LmFzc2lnbihleHRlbnNpb25zLCBjb21tYW5kcywgaGVscGVycyk7XG5leHBvcnQgeyBjb21tYW5kcywgaGVscGVycyB9O1xuZXhwb3J0IGRlZmF1bHQgZXh0ZW5zaW9ucztcbiJdLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==

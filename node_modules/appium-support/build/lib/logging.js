'use strict';

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _npmlog = require('npmlog');

var _npmlog2 = _interopRequireDefault(_npmlog);

// levels that are available from `npmlog`
var NPM_LEVELS = ['silly', 'verbose', 'debug', 'info', 'http', 'warn', 'error'];

// mock log object used in testing mode
var mockLog = {};
var _iteratorNormalCompletion = true;
var _didIteratorError = false;
var _iteratorError = undefined;

try {
  for (var _iterator = _getIterator(NPM_LEVELS), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
    var level = _step.value;

    mockLog[level] = function () {};
  }
} catch (err) {
  _didIteratorError = true;
  _iteratorError = err;
} finally {
  try {
    if (!_iteratorNormalCompletion && _iterator['return']) {
      _iterator['return']();
    }
  } finally {
    if (_didIteratorError) {
      throw _iteratorError;
    }
  }
}

function patchLogger(logger) {
  if (!logger.debug) {
    logger.addLevel('debug', 1000, { fg: 'blue', bg: 'black' }, 'dbug');
  }
}

function _getLogger() {
  // check if the user set the `_TESTING` or `_FORCE_LOGS` flag
  var testingMode = parseInt(process.env._TESTING, 10) === 1;
  var forceLogMode = parseInt(process.env._FORCE_LOGS, 10) === 1;

  // if is possible that there is a logger instance that is already around,
  // in which case we want t o use that
  var usingGlobalLog = !!global._global_npmlog;
  var logger = undefined;
  if (testingMode && !forceLogMode) {
    // in testing mode, use a mock logger object that we can query
    logger = mockLog;
  } else {
    // otherwise, either use the global, or a new `npmlog` object
    logger = global._global_npmlog || _npmlog2['default'];
  }
  patchLogger(logger);
  return [logger, usingGlobalLog];
}

function getLogger() {
  var prefix = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];

  var _getLogger2 = _getLogger();

  var _getLogger22 = _slicedToArray(_getLogger2, 2);

  var logger = _getLogger22[0];
  var usingGlobalLog = _getLogger22[1];

  // wrap the logger so that we can catch and modify any logging
  var wrappedLogger = { unwrap: function unwrap() {
      return logger;
    } };

  // allow access to the level of the underlying logger
  Object.defineProperty(wrappedLogger, 'level', {
    get: function get() {
      return logger.level;
    },
    set: function set(newValue) {
      logger.level = newValue;
    },
    enumerable: true,
    configurable: true
  });
  // add all the levels from `npmlog`, and map to the underlying logger
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = _getIterator(NPM_LEVELS), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var level = _step2.value;

      wrappedLogger[level] = logger[level].bind(logger, prefix);
    }
    // add method to log an error, and throw it, for convenience
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2['return']) {
        _iterator2['return']();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  wrappedLogger.errorAndThrow = function (err) {
    // make sure we have an `Error` object. Wrap if necessary
    if (!(err instanceof Error)) {
      err = new Error(err);
    }
    // log and throw
    this.error(err);
    throw err;
  };
  if (!usingGlobalLog) {
    // if we're not using a global log specified from some top-level package,
    // set the log level to a default of verbose. Otherwise, let the top-level
    // package set the log level
    wrappedLogger.level = 'verbose';
  }
  wrappedLogger.levels = NPM_LEVELS;
  return wrappedLogger;
}

// export a default logger with no prefix
var log = getLogger();

exports.log = log;
exports.patchLogger = patchLogger;
exports.getLogger = getLogger;
exports['default'] = log;
//# sourceMappingURL=data:application/json;charset=utf8;base64,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Q0FBQztHQUNqQztBQUNELGVBQWEsQ0FBQyxNQUFNLEdBQUcsVUFBVSxDQUFDO0FBQ2xDLFNBQU8sYUFBYSxDQUFDO0NBQ3RCOzs7QUFHRCxJQUFNLEdBQUcsR0FBRyxTQUFTLEVBQUUsQ0FBQzs7UUFFZixHQUFHLEdBQUgsR0FBRztRQUFFLFdBQVcsR0FBWCxXQUFXO1FBQUUsU0FBUyxHQUFULFNBQVM7cUJBQ3JCLEdBQUciLCJmaWxlIjoibGliL2xvZ2dpbmcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbnBtbG9nIGZyb20gJ25wbWxvZyc7XG5cblxuLy8gbGV2ZWxzIHRoYXQgYXJlIGF2YWlsYWJsZSBmcm9tIGBucG1sb2dgXG5jb25zdCBOUE1fTEVWRUxTID0gWydzaWxseScsICd2ZXJib3NlJywgJ2RlYnVnJywgJ2luZm8nLCAnaHR0cCcsICd3YXJuJywgJ2Vycm9yJ107XG5cbi8vIG1vY2sgbG9nIG9iamVjdCB1c2VkIGluIHRlc3RpbmcgbW9kZVxubGV0IG1vY2tMb2cgPSB7fTtcbmZvciAobGV0IGxldmVsIG9mIE5QTV9MRVZFTFMpIHtcbiAgbW9ja0xvZ1tsZXZlbF0gPSAoKSA9PiB7fTtcbn1cblxuZnVuY3Rpb24gcGF0Y2hMb2dnZXIgKGxvZ2dlcikge1xuICBpZiAoIWxvZ2dlci5kZWJ1Zykge1xuICAgIGxvZ2dlci5hZGRMZXZlbCgnZGVidWcnLCAxMDAwLCB7IGZnOiAnYmx1ZScsIGJnOiAnYmxhY2snIH0sICdkYnVnJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2dldExvZ2dlciAoKSB7XG4gIC8vIGNoZWNrIGlmIHRoZSB1c2VyIHNldCB0aGUgYF9URVNUSU5HYCBvciBgX0ZPUkNFX0xPR1NgIGZsYWdcbiAgY29uc3QgdGVzdGluZ01vZGUgPSBwYXJzZUludChwcm9jZXNzLmVudi5fVEVTVElORywgMTApID09PSAxO1xuICBjb25zdCBmb3JjZUxvZ01vZGUgPSBwYXJzZUludChwcm9jZXNzLmVudi5fRk9SQ0VfTE9HUywgMTApID09PSAxO1xuXG4gIC8vIGlmIGlzIHBvc3NpYmxlIHRoYXQgdGhlcmUgaXMgYSBsb2dnZXIgaW5zdGFuY2UgdGhhdCBpcyBhbHJlYWR5IGFyb3VuZCxcbiAgLy8gaW4gd2hpY2ggY2FzZSB3ZSB3YW50IHQgbyB1c2UgdGhhdFxuICBjb25zdCB1c2luZ0dsb2JhbExvZyA9ICEhZ2xvYmFsLl9nbG9iYWxfbnBtbG9nO1xuICBsZXQgbG9nZ2VyO1xuICBpZiAodGVzdGluZ01vZGUgJiYgIWZvcmNlTG9nTW9kZSkge1xuICAgIC8vIGluIHRlc3RpbmcgbW9kZSwgdXNlIGEgbW9jayBsb2dnZXIgb2JqZWN0IHRoYXQgd2UgY2FuIHF1ZXJ5XG4gICAgbG9nZ2VyID0gbW9ja0xvZztcbiAgfSBlbHNlIHtcbiAgICAvLyBvdGhlcndpc2UsIGVpdGhlciB1c2UgdGhlIGdsb2JhbCwgb3IgYSBuZXcgYG5wbWxvZ2Agb2JqZWN0XG4gICAgbG9nZ2VyID0gZ2xvYmFsLl9nbG9iYWxfbnBtbG9nIHx8IG5wbWxvZztcbiAgfVxuICBwYXRjaExvZ2dlcihsb2dnZXIpO1xuICByZXR1cm4gW2xvZ2dlciwgdXNpbmdHbG9iYWxMb2ddO1xufVxuXG5mdW5jdGlvbiBnZXRMb2dnZXIgKHByZWZpeCA9IG51bGwpIHtcbiAgbGV0IFtsb2dnZXIsIHVzaW5nR2xvYmFsTG9nXSA9IF9nZXRMb2dnZXIoKTtcblxuICAvLyB3cmFwIHRoZSBsb2dnZXIgc28gdGhhdCB3ZSBjYW4gY2F0Y2ggYW5kIG1vZGlmeSBhbnkgbG9nZ2luZ1xuICBsZXQgd3JhcHBlZExvZ2dlciA9IHt1bndyYXA6ICgpID0+IGxvZ2dlcn07XG5cbiAgLy8gYWxsb3cgYWNjZXNzIHRvIHRoZSBsZXZlbCBvZiB0aGUgdW5kZXJseWluZyBsb2dnZXJcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdyYXBwZWRMb2dnZXIsICdsZXZlbCcsIHtcbiAgICBnZXQ6ICgpID0+IHsgcmV0dXJuIGxvZ2dlci5sZXZlbDsgfSxcbiAgICBzZXQ6IChuZXdWYWx1ZSkgPT4geyBsb2dnZXIubGV2ZWwgPSBuZXdWYWx1ZTsgfSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcbiAgLy8gYWRkIGFsbCB0aGUgbGV2ZWxzIGZyb20gYG5wbWxvZ2AsIGFuZCBtYXAgdG8gdGhlIHVuZGVybHlpbmcgbG9nZ2VyXG4gIGZvciAobGV0IGxldmVsIG9mIE5QTV9MRVZFTFMpIHtcbiAgICB3cmFwcGVkTG9nZ2VyW2xldmVsXSA9IGxvZ2dlcltsZXZlbF0uYmluZChsb2dnZXIsIHByZWZpeCk7XG4gIH1cbiAgLy8gYWRkIG1ldGhvZCB0byBsb2cgYW4gZXJyb3IsIGFuZCB0aHJvdyBpdCwgZm9yIGNvbnZlbmllbmNlXG4gIHdyYXBwZWRMb2dnZXIuZXJyb3JBbmRUaHJvdyA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAvLyBtYWtlIHN1cmUgd2UgaGF2ZSBhbiBgRXJyb3JgIG9iamVjdC4gV3JhcCBpZiBuZWNlc3NhcnlcbiAgICBpZiAoIShlcnIgaW5zdGFuY2VvZiBFcnJvcikpIHtcbiAgICAgIGVyciA9IG5ldyBFcnJvcihlcnIpO1xuICAgIH1cbiAgICAvLyBsb2cgYW5kIHRocm93XG4gICAgdGhpcy5lcnJvcihlcnIpO1xuICAgIHRocm93IGVycjtcbiAgfTtcbiAgaWYgKCF1c2luZ0dsb2JhbExvZykge1xuICAgIC8vIGlmIHdlJ3JlIG5vdCB1c2luZyBhIGdsb2JhbCBsb2cgc3BlY2lmaWVkIGZyb20gc29tZSB0b3AtbGV2ZWwgcGFja2FnZSxcbiAgICAvLyBzZXQgdGhlIGxvZyBsZXZlbCB0byBhIGRlZmF1bHQgb2YgdmVyYm9zZS4gT3RoZXJ3aXNlLCBsZXQgdGhlIHRvcC1sZXZlbFxuICAgIC8vIHBhY2thZ2Ugc2V0IHRoZSBsb2cgbGV2ZWxcbiAgICB3cmFwcGVkTG9nZ2VyLmxldmVsID0gJ3ZlcmJvc2UnO1xuICB9XG4gIHdyYXBwZWRMb2dnZXIubGV2ZWxzID0gTlBNX0xFVkVMUztcbiAgcmV0dXJuIHdyYXBwZWRMb2dnZXI7XG59XG5cbi8vIGV4cG9ydCBhIGRlZmF1bHQgbG9nZ2VyIHdpdGggbm8gcHJlZml4XG5jb25zdCBsb2cgPSBnZXRMb2dnZXIoKTtcblxuZXhwb3J0IHsgbG9nLCBwYXRjaExvZ2dlciwgZ2V0TG9nZ2VyIH07XG5leHBvcnQgZGVmYXVsdCBsb2c7XG4iXSwic291cmNlUm9vdCI6Ii4uLy4uIn0=

'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.hasContent = hasContent;

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _os = require('os');

var _os2 = _interopRequireDefault(_os);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function hasContent(val) {
  return _lodash2['default'].isString(val) && val !== "";
}

// return true if the the value is not undefined, null, or NaN.
function hasValue(val) {
  var hasVal = false;
  // avoid incorrectly evaluating `0` as false
  if (_lodash2['default'].isNumber(val)) {
    hasVal = !_lodash2['default'].isNaN(val);
  } else {
    hasVal = !_lodash2['default'].isUndefined(val) && !_lodash2['default'].isNull(val);
  }

  return hasVal;
}

// escape spaces in string, for commandline calls
function escapeSpace(str) {
  return str.split(/ /).join('\\ ');
}

function escapeSpecialChars(str, quoteEscape) {
  if (typeof str !== "string") {
    return str;
  }
  if (typeof quoteEscape === "undefined") {
    quoteEscape = false;
  }
  str = str.replace(/[\\]/g, '\\\\').replace(/[\/]/g, '\\/').replace(/[\b]/g, '\\b').replace(/[\f]/g, '\\f').replace(/[\n]/g, '\\n').replace(/[\r]/g, '\\r').replace(/[\t]/g, '\\t').replace(/[\"]/g, '\\"').replace(/\\'/g, "\\'");
  if (quoteEscape) {
    var re = new RegExp(quoteEscape, "g");
    str = str.replace(re, "\\" + quoteEscape);
  }
  return str;
}

function localIp() {
  var ip = _lodash2['default'].chain(_os2['default'].networkInterfaces()).values().flatten().filter(function (val) {
    return val.family === 'IPv4' && val.internal === false;
  }).map('address').first().value();
  return ip;
}

/*
 * Creates a promise that is cancellable, and will timeout
 * after `ms` delay
 */
function cancellableDelay(ms) {
  var timer = undefined;
  return new _bluebird2['default'].Promise(function (resolve) {
    timer = setTimeout(function () {
      resolve();
    }, ms);
  }).cancellable()['catch'](_bluebird2['default'].CancellationError, function (err) {
    clearTimeout(timer);
    throw err;
  });
}

function multiResolve(roots) {
  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  return roots.map(function (root) {
    return _path2['default'].resolve.apply(_path2['default'], [root].concat(args));
  });
}

/*
 * Parses an object if possible. Otherwise returns the object without parsing.
 */
function safeJsonParse(obj) {
  try {
    obj = JSON.parse(obj);
  } catch (ign) {
    // ignore: this is not json parsable
  }
  return obj;
}

/*
 * Removes the wrapper from element, if it exists.
 *   { ELEMENT: 4 } becomes 4
 */
function unwrapElement(el) {
  if (typeof el === 'object' && el.ELEMENT) {
    return el.ELEMENT;
  }
  return el;
}

exports.hasValue = hasValue;
exports.escapeSpace = escapeSpace;
exports.escapeSpecialChars = escapeSpecialChars;
exports.localIp = localIp;
exports.cancellableDelay = cancellableDelay;
exports.multiResolve = multiResolve;
exports.safeJsonParse = safeJsonParse;
exports.unwrapElement = unwrapElement;
//# sourceMappingURL=data:application/json;charset=utf8;base64,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LEVBQUUsRUFBRSxDQUFDLENBQUM7R0FDUixDQUFDLENBQ0QsV0FBVyxFQUFFLFNBQ1IsQ0FBQyxzQkFBRSxpQkFBaUIsRUFBRSxVQUFDLEdBQUcsRUFBSztBQUNuQyxnQkFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3BCLFVBQU0sR0FBRyxDQUFDO0dBQ1gsQ0FBQyxDQUFDO0NBQ0o7O0FBRUQsU0FBUyxZQUFZLENBQUUsS0FBSyxFQUFXO29DQUFOLElBQUk7QUFBSixRQUFJOzs7QUFDbkMsU0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLFVBQUMsSUFBSSxFQUFLO0FBQ3pCLFdBQU8sa0JBQUssT0FBTyxNQUFBLHFCQUFDLElBQUksU0FBSyxJQUFJLEVBQUMsQ0FBQztHQUNwQyxDQUFDLENBQUM7Q0FDSjs7Ozs7QUFLRCxTQUFTLGFBQWEsQ0FBRSxHQUFHLEVBQUU7QUFDM0IsTUFBSTtBQUNGLE9BQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0dBQ3ZCLENBQUMsT0FBTyxHQUFHLEVBQUU7O0dBRWI7QUFDRCxTQUFPLEdBQUcsQ0FBQztDQUNaOzs7Ozs7QUFNRCxTQUFTLGFBQWEsQ0FBRSxFQUFFLEVBQUU7QUFDMUIsTUFBSSxPQUFPLEVBQUUsS0FBSyxRQUFRLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRTtBQUN4QyxXQUFPLEVBQUUsQ0FBQyxPQUFPLENBQUM7R0FDbkI7QUFDRCxTQUFPLEVBQUUsQ0FBQztDQUNYOztRQUVRLFFBQVEsR0FBUixRQUFRO1FBQUUsV0FBVyxHQUFYLFdBQVc7UUFBRSxrQkFBa0IsR0FBbEIsa0JBQWtCO1FBQUUsT0FBTyxHQUFQLE9BQU87UUFBRSxnQkFBZ0IsR0FBaEIsZ0JBQWdCO1FBQ3BFLFlBQVksR0FBWixZQUFZO1FBQUUsYUFBYSxHQUFiLGFBQWE7UUFBRSxhQUFhLEdBQWIsYUFBYSIsImZpbGUiOiJsaWIvdXRpbC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCIGZyb20gJ2JsdWViaXJkJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgb3MgZnJvbSAnb3MnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNDb250ZW50ICh2YWwpIHtcbiAgcmV0dXJuIF8uaXNTdHJpbmcodmFsKSAmJiB2YWwgIT09IFwiXCI7XG59XG5cbi8vIHJldHVybiB0cnVlIGlmIHRoZSB0aGUgdmFsdWUgaXMgbm90IHVuZGVmaW5lZCwgbnVsbCwgb3IgTmFOLlxuZnVuY3Rpb24gaGFzVmFsdWUgKHZhbCkge1xuICBsZXQgaGFzVmFsID0gZmFsc2U7XG4gIC8vIGF2b2lkIGluY29ycmVjdGx5IGV2YWx1YXRpbmcgYDBgIGFzIGZhbHNlXG4gIGlmIChfLmlzTnVtYmVyKHZhbCkpIHtcbiAgICBoYXNWYWwgPSAhXy5pc05hTih2YWwpO1xuICB9IGVsc2Uge1xuICAgIGhhc1ZhbCA9ICFfLmlzVW5kZWZpbmVkKHZhbCkgJiYgIV8uaXNOdWxsKHZhbCk7XG4gIH1cblxuICByZXR1cm4gaGFzVmFsO1xufVxuXG4vLyBlc2NhcGUgc3BhY2VzIGluIHN0cmluZywgZm9yIGNvbW1hbmRsaW5lIGNhbGxzXG5mdW5jdGlvbiBlc2NhcGVTcGFjZSAoc3RyKSB7XG4gIHJldHVybiBzdHIuc3BsaXQoLyAvKS5qb2luKCdcXFxcICcpO1xufVxuXG5mdW5jdGlvbiBlc2NhcGVTcGVjaWFsQ2hhcnMgKHN0ciwgcXVvdGVFc2NhcGUpIHtcbiAgaWYgKHR5cGVvZiBzdHIgIT09IFwic3RyaW5nXCIpIHtcbiAgICByZXR1cm4gc3RyO1xuICB9XG4gIGlmICh0eXBlb2YgcXVvdGVFc2NhcGUgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBxdW90ZUVzY2FwZSA9IGZhbHNlO1xuICB9XG4gIHN0ciA9IHN0clxuICAgICAgICAucmVwbGFjZSgvW1xcXFxdL2csICdcXFxcXFxcXCcpXG4gICAgICAgIC5yZXBsYWNlKC9bXFwvXS9nLCAnXFxcXC8nKVxuICAgICAgICAucmVwbGFjZSgvW1xcYl0vZywgJ1xcXFxiJylcbiAgICAgICAgLnJlcGxhY2UoL1tcXGZdL2csICdcXFxcZicpXG4gICAgICAgIC5yZXBsYWNlKC9bXFxuXS9nLCAnXFxcXG4nKVxuICAgICAgICAucmVwbGFjZSgvW1xccl0vZywgJ1xcXFxyJylcbiAgICAgICAgLnJlcGxhY2UoL1tcXHRdL2csICdcXFxcdCcpXG4gICAgICAgIC5yZXBsYWNlKC9bXFxcIl0vZywgJ1xcXFxcIicpXG4gICAgICAgIC5yZXBsYWNlKC9cXFxcJy9nLCBcIlxcXFwnXCIpO1xuICBpZiAocXVvdGVFc2NhcGUpIHtcbiAgICB2YXIgcmUgPSBuZXcgUmVnRXhwKHF1b3RlRXNjYXBlLCBcImdcIik7XG4gICAgc3RyID0gc3RyLnJlcGxhY2UocmUsIFwiXFxcXFwiICsgcXVvdGVFc2NhcGUpO1xuICB9XG4gIHJldHVybiBzdHI7XG59XG5cbmZ1bmN0aW9uIGxvY2FsSXAgKCkge1xuICBsZXQgaXAgPSBfLmNoYWluKG9zLm5ldHdvcmtJbnRlcmZhY2VzKCkpXG4gICAgLnZhbHVlcygpXG4gICAgLmZsYXR0ZW4oKVxuICAgIC5maWx0ZXIoZnVuY3Rpb24gKHZhbCkge1xuICAgICAgcmV0dXJuICh2YWwuZmFtaWx5ID09PSAnSVB2NCcgJiYgdmFsLmludGVybmFsID09PSBmYWxzZSk7XG4gICAgfSlcbiAgICAubWFwKCdhZGRyZXNzJylcbiAgICAuZmlyc3QoKVxuICAgIC52YWx1ZSgpO1xuICByZXR1cm4gaXA7XG59XG5cbi8qXG4gKiBDcmVhdGVzIGEgcHJvbWlzZSB0aGF0IGlzIGNhbmNlbGxhYmxlLCBhbmQgd2lsbCB0aW1lb3V0XG4gKiBhZnRlciBgbXNgIGRlbGF5XG4gKi9cbmZ1bmN0aW9uIGNhbmNlbGxhYmxlRGVsYXkgKG1zKSB7XG4gIGxldCB0aW1lcjtcbiAgcmV0dXJuIG5ldyBCLlByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICByZXNvbHZlKCk7XG4gICAgfSwgbXMpO1xuICB9KVxuICAuY2FuY2VsbGFibGUoKVxuICAuY2F0Y2goQi5DYW5jZWxsYXRpb25FcnJvciwgKGVycikgPT4ge1xuICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgdGhyb3cgZXJyO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gbXVsdGlSZXNvbHZlIChyb290cywgLi4uYXJncykge1xuICByZXR1cm4gcm9vdHMubWFwKChyb290KSA9PiB7XG4gICAgcmV0dXJuIHBhdGgucmVzb2x2ZShyb290LCAuLi5hcmdzKTtcbiAgfSk7XG59XG5cbi8qXG4gKiBQYXJzZXMgYW4gb2JqZWN0IGlmIHBvc3NpYmxlLiBPdGhlcndpc2UgcmV0dXJucyB0aGUgb2JqZWN0IHdpdGhvdXQgcGFyc2luZy5cbiAqL1xuZnVuY3Rpb24gc2FmZUpzb25QYXJzZSAob2JqKSB7XG4gIHRyeSB7XG4gICAgb2JqID0gSlNPTi5wYXJzZShvYmopO1xuICB9IGNhdGNoIChpZ24pIHtcbiAgICAvLyBpZ25vcmU6IHRoaXMgaXMgbm90IGpzb24gcGFyc2FibGVcbiAgfVxuICByZXR1cm4gb2JqO1xufVxuXG4vKlxuICogUmVtb3ZlcyB0aGUgd3JhcHBlciBmcm9tIGVsZW1lbnQsIGlmIGl0IGV4aXN0cy5cbiAqICAgeyBFTEVNRU5UOiA0IH0gYmVjb21lcyA0XG4gKi9cbmZ1bmN0aW9uIHVud3JhcEVsZW1lbnQgKGVsKSB7XG4gIGlmICh0eXBlb2YgZWwgPT09ICdvYmplY3QnICYmIGVsLkVMRU1FTlQpIHtcbiAgICByZXR1cm4gZWwuRUxFTUVOVDtcbiAgfVxuICByZXR1cm4gZWw7XG59XG5cbmV4cG9ydCB7IGhhc1ZhbHVlLCBlc2NhcGVTcGFjZSwgZXNjYXBlU3BlY2lhbENoYXJzLCBsb2NhbElwLCBjYW5jZWxsYWJsZURlbGF5LFxuICAgICAgICAgbXVsdGlSZXNvbHZlLCBzYWZlSnNvblBhcnNlLCB1bndyYXBFbGVtZW50IH07XG4iXSwic291cmNlUm9vdCI6Ii4uLy4uIn0=

To do:

	// set code signing identity and provisioning profile in updateAndBuild.js
	// turn on and unlock physical device if off?
	// improve sql for assigning walkbooks to prevent walkbook completed scenario after surveying just one house.
	// see todo in Field Portal project for features to add here, esp mochawesome reporter.
	// address fixmes
	// write sql & js for adding a tag - figure out what tags are already added to the selected person, eliminate those, then randomly select another tag to add.
	// take a screenshot at the end of every it - check after test run to make sure nothing failed silently (you don't see any errors or anything strange).
	// always verify disposition and targets are not greyed out before clicking
	// Figure out how this happens and makes sure all possible promise rejections are handled. 
		(node:5947) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 2): ConnectionError: Failed to connect to MD1:undefined in 30000ms
		(node:5947) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.

	Automation flow for Continuous Integration:

		Change is checked into repo on bitbucket
		Shippable or Jenkins detects the change and queues a build and automation run =>	
			
			1. Run a shell script that pulls the latest code from bitbucket, then builds the app locally, then kicks off the tests:

cd ~/i360 && \
xcrun simctl uninstall D7662095-A24B-44B5-A0B1-071A1250DAE9 com.i360.i360Walk && \
git pull && \
cd ~/i360/iOS/i360\ Canvass && \
xcodebuild -scheme i360\ Canvass -target i360\ Canvass -destination 'platform=iOS Simulator,id=D7662095-A24B-44B5-A0B1-071A1250DAE9' -configuration Debug -derivedDataPath build clean && \
xcrun xcodebuild -scheme i360\ Canvass -target i360\ Canvass -destination 'platform=iOS Simulator,id=D7662095-A24B-44B5-A0B1-071A1250DAE9' -configuration Debug -derivedDataPath build && 

			2. Push the app to testflight (does it need to be an ipa?  Look into this.  See tutorial on Test Flight integration with Jenkins, research for Shippable).

			*3. Kick off appium tests

cd ~/AppiumAutomation && node run.js -sim iosSim2

	// update sql with Rob's points
	// address todo items in code
	// run all icon_colors test cases in dbg mode and non-dbg mode and verify they pass.
	// remove remnants of recorder.  Save a record in case we want it in the future or for Android?
	// what is package-lock.json?
	// declare config.thisElem = ''; at the beginning of every test case - or in beforeEach?
	// declare variables in beforeEach function - e.g. config.thisHousehold = ''; etc.
	// clean up / figure out where timeouts are defined and which are being applied
	// create a test result file and email with mailgun? - https://www.npmjs.com/package/mailgun-js




Later

	// Jenkins location: /Library/Application Support/Jenkins/jenkins-runner.sh

	// elementOrNull command - utilize in fullLogin method:

		Retrieve an element avoiding not found exception and returning null instead:
		elementOrNull(using, value, cb) -> cb(err, element)
		May try this in fullLogin instead of the nested functions to check if rememberMe is checked.

Miscelaneous

	// try these for finding elements by a part of their id:

	  .elementByXPath('//*[(contains(id()\'prim_btnRemaining\')],600000)
	  .elementByXPath('//*[contains(@id,\'cellHouse_8\')]')
	  .elementByXPath('//*[contains(@text,\'cellHouse_8\')]')
	  .elementByXPath('//*[contains(@checked,\'false\')]')

	// wait for an element by one of two things:
	  .waitForElementByXPath( '//UIAApplication[1]/UIAWindow[1]/UIAElement[2] | //*[ @text=\'View Later\' ]', 600000 )
